//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\My Dev\mlo\Mlo.Examples.Antlr4\Mlo.Examples.Antlr4.SqlParserExample01\SqlParser.g4 by ANTLR 4.5.3

// Unreachable code detected

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;

#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Mlo.Examples.Antlr4.DemoApp02.Parsers {

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class SqlParser : Parser {
	public const int
		AS=1, ALL=2, AND=3, ANY=4, ASYMMETRIC=5, ASC=6, BOTH=7, CASE=8, CAST=9, 
		CREATE=10, CROSS=11, DESC=12, DISTINCT=13, END=14, ELSE=15, EXCEPT=16, 
		FALSE=17, FULL=18, FROM=19, GROUP=20, HAVING=21, ILIKE=22, IN=23, INNER=24, 
		INTERSECT=25, INTO=26, IS=27, JOIN=28, LEADING=29, LEFT=30, LIKE=31, LIMIT=32, 
		NATURAL=33, NOT=34, NULL=35, ON=36, OUTER=37, OR=38, ORDER=39, RIGHT=40, 
		SELECT=41, SOME=42, SYMMETRIC=43, TABLE=44, THEN=45, TRAILING=46, TRUE=47, 
		UNION=48, UNIQUE=49, USING=50, WHEN=51, WHERE=52, WITH=53, AVG=54, BETWEEN=55, 
		BY=56, CENTURY=57, CHARACTER=58, COLLECT=59, COALESCE=60, COLUMN=61, COUNT=62, 
		CUBE=63, DAY=64, DEC=65, DECADE=66, DOW=67, DOY=68, DROP=69, EPOCH=70, 
		EVERY=71, EXISTS=72, EXTERNAL=73, EXTRACT=74, FILTER=75, FIRST=76, FORMAT=77, 
		FUSION=78, GROUPING=79, HASH=80, HOUR=81, INDEX=82, INSERT=83, INTERSECTION=84, 
		ISODOW=85, ISOYEAR=86, LAST=87, LESS=88, LIST=89, LOCATION=90, MAX=91, 
		MAXVALUE=92, MICROSECONDS=93, MILLENNIUM=94, MILLISECONDS=95, MIN=96, 
		MINUTE=97, MONTH=98, NATIONAL=99, NULLIF=100, OVERWRITE=101, PARTITION=102, 
		PARTITIONS=103, PRECISION=104, PURGE=105, QUARTER=106, RANGE=107, REGEXP=108, 
		RLIKE=109, ROLLUP=110, SECOND=111, SET=112, SIMILAR=113, STDDEV_POP=114, 
		STDDEV_SAMP=115, SUBPARTITION=116, SUM=117, TABLESPACE=118, THAN=119, 
		TIMEZONE=120, TIMEZONE_HOUR=121, TIMEZONE_MINUTE=122, TRIM=123, TO=124, 
		UNKNOWN=125, VALUES=126, VAR_SAMP=127, VAR_POP=128, VARYING=129, WEEK=130, 
		YEAR=131, ZONE=132, BOOLEAN=133, BOOL=134, BIT=135, VARBIT=136, INT1=137, 
		INT2=138, INT4=139, INT8=140, TINYINT=141, SMALLINT=142, INT=143, INTEGER=144, 
		BIGINT=145, FLOAT4=146, FLOAT8=147, REAL=148, FLOAT=149, DOUBLE=150, NUMERIC=151, 
		DECIMAL=152, CHAR=153, VARCHAR=154, NCHAR=155, NVARCHAR=156, DATE=157, 
		TIME=158, TIMETZ=159, TIMESTAMP=160, TIMESTAMPTZ=161, TEXT=162, BINARY=163, 
		VARBINARY=164, BLOB=165, BYTEA=166, INET4=167, Similar_To=168, Not_Similar_To=169, 
		Similar_To_Case_Insensitive=170, Not_Similar_To_Case_Insensitive=171, 
		CAST_EXPRESSION=172, ASSIGN=173, EQUAL=174, COLON=175, SEMI_COLON=176, 
		COMMA=177, CONCATENATION_OPERATOR=178, NOT_EQUAL=179, LTH=180, LEQ=181, 
		GTH=182, GEQ=183, LEFT_PAREN=184, RIGHT_PAREN=185, PLUS=186, MINUS=187, 
		MULTIPLY=188, DIVIDE=189, MODULAR=190, DOT=191, UNDERLINE=192, VERTICAL_BAR=193, 
		QUOTE=194, DOUBLE_QUOTE=195, NUMBER=196, REAL_NUMBER=197, BlockComment=198, 
		LineComment=199, Identifier=200, Character_String_Literal=201, Space=202, 
		White_Space=203, BAD=204;
	public const int
		RULE_sql = 0, RULE_statement = 1, RULE_data_statement = 2, RULE_data_change_statement = 3, 
		RULE_schema_statement = 4, RULE_index_statement = 5, RULE_create_table_statement = 6, 
		RULE_table_elements = 7, RULE_field_element = 8, RULE_field_type = 9, 
		RULE_param_clause = 10, RULE_param = 11, RULE_method_specifier = 12, RULE_table_space_specifier = 13, 
		RULE_table_space_name = 14, RULE_table_partitioning_clauses = 15, RULE_range_partitions = 16, 
		RULE_range_value_clause_list = 17, RULE_range_value_clause = 18, RULE_hash_partitions = 19, 
		RULE_individual_hash_partitions = 20, RULE_individual_hash_partition = 21, 
		RULE_hash_partitions_by_quantity = 22, RULE_list_partitions = 23, RULE_list_value_clause_list = 24, 
		RULE_list_value_partition = 25, RULE_column_partitions = 26, RULE_partition_name = 27, 
		RULE_drop_table_statement = 28, RULE_identifier = 29, RULE_nonreserved_keywords = 30, 
		RULE_unsigned_literal = 31, RULE_general_literal = 32, RULE_datetime_literal = 33, 
		RULE_time_literal = 34, RULE_timestamp_literal = 35, RULE_date_literal = 36, 
		RULE_boolean_literal = 37, RULE_data_type = 38, RULE_predefined_type = 39, 
		RULE_network_type = 40, RULE_character_string_type = 41, RULE_type_length = 42, 
		RULE_national_character_string_type = 43, RULE_binary_large_object_string_type = 44, 
		RULE_numeric_type = 45, RULE_exact_numeric_type = 46, RULE_approximate_numeric_type = 47, 
		RULE_precision_param = 48, RULE_boolean_type = 49, RULE_datetime_type = 50, 
		RULE_bit_type = 51, RULE_binary_type = 52, RULE_value_expression_primary = 53, 
		RULE_parenthesized_value_expression = 54, RULE_nonparenthesized_value_expression_primary = 55, 
		RULE_unsigned_value_specification = 56, RULE_unsigned_numeric_literal = 57, 
		RULE_signed_numerical_literal = 58, RULE_set_function_specification = 59, 
		RULE_aggregate_function = 60, RULE_general_set_function = 61, RULE_set_function_type = 62, 
		RULE_filter_clause = 63, RULE_grouping_operation = 64, RULE_case_expression = 65, 
		RULE_case_abbreviation = 66, RULE_case_specification = 67, RULE_simple_case = 68, 
		RULE_searched_case = 69, RULE_simple_when_clause = 70, RULE_searched_when_clause = 71, 
		RULE_else_clause = 72, RULE_result = 73, RULE_cast_specification = 74, 
		RULE_cast_operand = 75, RULE_cast_target = 76, RULE_value_expression = 77, 
		RULE_common_value_expression = 78, RULE_numeric_value_expression = 79, 
		RULE_term = 80, RULE_factor = 81, RULE_array = 82, RULE_numeric_primary = 83, 
		RULE_sign = 84, RULE_numeric_value_function = 85, RULE_extract_expression = 86, 
		RULE_extract_field = 87, RULE_time_zone_field = 88, RULE_extract_source = 89, 
		RULE_string_value_expression = 90, RULE_character_value_expression = 91, 
		RULE_character_factor = 92, RULE_character_primary = 93, RULE_string_value_function = 94, 
		RULE_trim_function = 95, RULE_trim_operands = 96, RULE_trim_specification = 97, 
		RULE_boolean_value_expression = 98, RULE_or_predicate = 99, RULE_and_predicate = 100, 
		RULE_boolean_factor = 101, RULE_boolean_test = 102, RULE_is_clause = 103, 
		RULE_truth_value = 104, RULE_boolean_primary = 105, RULE_boolean_predicand = 106, 
		RULE_parenthesized_boolean_value_expression = 107, RULE_row_value_expression = 108, 
		RULE_row_value_special_case = 109, RULE_explicit_row_value_constructor = 110, 
		RULE_row_value_predicand = 111, RULE_row_value_constructor_predicand = 112, 
		RULE_table_expression = 113, RULE_from_clause = 114, RULE_table_reference_list = 115, 
		RULE_table_reference = 116, RULE_joined_table = 117, RULE_joined_table_primary = 118, 
		RULE_cross_join = 119, RULE_qualified_join = 120, RULE_natural_join = 121, 
		RULE_union_join = 122, RULE_join_type = 123, RULE_outer_join_type = 124, 
		RULE_outer_join_type_part2 = 125, RULE_join_specification = 126, RULE_join_condition = 127, 
		RULE_named_columns_join = 128, RULE_table_primary = 129, RULE_column_name_list = 130, 
		RULE_derived_table = 131, RULE_where_clause = 132, RULE_search_condition = 133, 
		RULE_groupby_clause = 134, RULE_grouping_element_list = 135, RULE_grouping_element = 136, 
		RULE_ordinary_grouping_set = 137, RULE_ordinary_grouping_set_list = 138, 
		RULE_rollup_list = 139, RULE_cube_list = 140, RULE_empty_grouping_set = 141, 
		RULE_having_clause = 142, RULE_row_value_predicand_list = 143, RULE_query_expression = 144, 
		RULE_query_expression_body = 145, RULE_non_join_query_expression = 146, 
		RULE_query_term = 147, RULE_non_join_query_term = 148, RULE_query_primary = 149, 
		RULE_non_join_query_primary = 150, RULE_simple_table = 151, RULE_explicit_table = 152, 
		RULE_table_or_query_name = 153, RULE_table_name = 154, RULE_query_specification = 155, 
		RULE_select_list = 156, RULE_select_sublist = 157, RULE_derived_column = 158, 
		RULE_qualified_asterisk = 159, RULE_set_qualifier = 160, RULE_column_reference = 161, 
		RULE_as_clause = 162, RULE_column_reference_list = 163, RULE_scalar_subquery = 164, 
		RULE_row_subquery = 165, RULE_table_subquery = 166, RULE_subquery = 167, 
		RULE_predicate = 168, RULE_comparison_predicate = 169, RULE_comp_op = 170, 
		RULE_between_predicate = 171, RULE_between_predicate_part_2 = 172, RULE_in_predicate = 173, 
		RULE_in_predicate_value = 174, RULE_in_value_list = 175, RULE_pattern_matching_predicate = 176, 
		RULE_pattern_matcher = 177, RULE_negativable_matcher = 178, RULE_regex_matcher = 179, 
		RULE_null_predicate = 180, RULE_quantified_comparison_predicate = 181, 
		RULE_quantifier = 182, RULE_all = 183, RULE_some = 184, RULE_exists_predicate = 185, 
		RULE_unique_predicate = 186, RULE_primary_datetime_field = 187, RULE_non_second_primary_datetime_field = 188, 
		RULE_extended_datetime_field = 189, RULE_routine_invocation = 190, RULE_function_names_for_reserved_words = 191, 
		RULE_function_name = 192, RULE_sql_argument_list = 193, RULE_orderby_clause = 194, 
		RULE_sort_specifier_list = 195, RULE_sort_specifier = 196, RULE_order_specification = 197, 
		RULE_limit_clause = 198, RULE_null_ordering = 199, RULE_insert_statement = 200;
	public static readonly string[] ruleNames = {
		"sql", "statement", "data_statement", "data_change_statement", "schema_statement", 
		"index_statement", "create_table_statement", "table_elements", "field_element", 
		"field_type", "param_clause", "param", "method_specifier", "table_space_specifier", 
		"table_space_name", "table_partitioning_clauses", "range_partitions", 
		"range_value_clause_list", "range_value_clause", "hash_partitions", "individual_hash_partitions", 
		"individual_hash_partition", "hash_partitions_by_quantity", "list_partitions", 
		"list_value_clause_list", "list_value_partition", "column_partitions", 
		"partition_name", "drop_table_statement", "identifier", "nonreserved_keywords", 
		"unsigned_literal", "general_literal", "datetime_literal", "time_literal", 
		"timestamp_literal", "date_literal", "boolean_literal", "data_type", "predefined_type", 
		"network_type", "character_string_type", "type_length", "national_character_string_type", 
		"binary_large_object_string_type", "numeric_type", "exact_numeric_type", 
		"approximate_numeric_type", "precision_param", "boolean_type", "datetime_type", 
		"bit_type", "binary_type", "value_expression_primary", "parenthesized_value_expression", 
		"nonparenthesized_value_expression_primary", "unsigned_value_specification", 
		"unsigned_numeric_literal", "signed_numerical_literal", "set_function_specification", 
		"aggregate_function", "general_set_function", "set_function_type", "filter_clause", 
		"grouping_operation", "case_expression", "case_abbreviation", "case_specification", 
		"simple_case", "searched_case", "simple_when_clause", "searched_when_clause", 
		"else_clause", "result", "cast_specification", "cast_operand", "cast_target", 
		"value_expression", "common_value_expression", "numeric_value_expression", 
		"term", "factor", "array", "numeric_primary", "sign", "numeric_value_function", 
		"extract_expression", "extract_field", "time_zone_field", "extract_source", 
		"string_value_expression", "character_value_expression", "character_factor", 
		"character_primary", "string_value_function", "trim_function", "trim_operands", 
		"trim_specification", "boolean_value_expression", "or_predicate", "and_predicate", 
		"boolean_factor", "boolean_test", "is_clause", "truth_value", "boolean_primary", 
		"boolean_predicand", "parenthesized_boolean_value_expression", "row_value_expression", 
		"row_value_special_case", "explicit_row_value_constructor", "row_value_predicand", 
		"row_value_constructor_predicand", "table_expression", "from_clause", 
		"table_reference_list", "table_reference", "joined_table", "joined_table_primary", 
		"cross_join", "qualified_join", "natural_join", "union_join", "join_type", 
		"outer_join_type", "outer_join_type_part2", "join_specification", "join_condition", 
		"named_columns_join", "table_primary", "column_name_list", "derived_table", 
		"where_clause", "search_condition", "groupby_clause", "grouping_element_list", 
		"grouping_element", "ordinary_grouping_set", "ordinary_grouping_set_list", 
		"rollup_list", "cube_list", "empty_grouping_set", "having_clause", "row_value_predicand_list", 
		"query_expression", "query_expression_body", "non_join_query_expression", 
		"query_term", "non_join_query_term", "query_primary", "non_join_query_primary", 
		"simple_table", "explicit_table", "table_or_query_name", "table_name", 
		"query_specification", "select_list", "select_sublist", "derived_column", 
		"qualified_asterisk", "set_qualifier", "column_reference", "as_clause", 
		"column_reference_list", "scalar_subquery", "row_subquery", "table_subquery", 
		"subquery", "predicate", "comparison_predicate", "comp_op", "between_predicate", 
		"between_predicate_part_2", "in_predicate", "in_predicate_value", "in_value_list", 
		"pattern_matching_predicate", "pattern_matcher", "negativable_matcher", 
		"regex_matcher", "null_predicate", "quantified_comparison_predicate", 
		"quantifier", "all", "some", "exists_predicate", "unique_predicate", "primary_datetime_field", 
		"non_second_primary_datetime_field", "extended_datetime_field", "routine_invocation", 
		"function_names_for_reserved_words", "function_name", "sql_argument_list", 
		"orderby_clause", "sort_specifier_list", "sort_specifier", "order_specification", 
		"limit_clause", "null_ordering", "insert_statement"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'~'", "'!~'", "'~*'", "'!~*'", null, "':='", "'='", "':'", "';'", "','", 
		null, null, "'<'", "'<='", "'>'", "'>='", "'('", "')'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'.'", "'_'", "'|'", "'''", "'\"'", null, null, null, 
		null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AS", "ALL", "AND", "ANY", "ASYMMETRIC", "ASC", "BOTH", "CASE", 
		"CAST", "CREATE", "CROSS", "DESC", "DISTINCT", "END", "ELSE", "EXCEPT", 
		"FALSE", "FULL", "FROM", "GROUP", "HAVING", "ILIKE", "IN", "INNER", "INTERSECT", 
		"INTO", "IS", "JOIN", "LEADING", "LEFT", "LIKE", "LIMIT", "NATURAL", "NOT", 
		"NULL", "ON", "OUTER", "OR", "ORDER", "RIGHT", "SELECT", "SOME", "SYMMETRIC", 
		"TABLE", "THEN", "TRAILING", "TRUE", "UNION", "UNIQUE", "USING", "WHEN", 
		"WHERE", "WITH", "AVG", "BETWEEN", "BY", "CENTURY", "CHARACTER", "COLLECT", 
		"COALESCE", "COLUMN", "COUNT", "CUBE", "DAY", "DEC", "DECADE", "DOW", 
		"DOY", "DROP", "EPOCH", "EVERY", "EXISTS", "EXTERNAL", "EXTRACT", "FILTER", 
		"FIRST", "FORMAT", "FUSION", "GROUPING", "HASH", "HOUR", "INDEX", "INSERT", 
		"INTERSECTION", "ISODOW", "ISOYEAR", "LAST", "LESS", "LIST", "LOCATION", 
		"MAX", "MAXVALUE", "MICROSECONDS", "MILLENNIUM", "MILLISECONDS", "MIN", 
		"MINUTE", "MONTH", "NATIONAL", "NULLIF", "OVERWRITE", "PARTITION", "PARTITIONS", 
		"PRECISION", "PURGE", "QUARTER", "RANGE", "REGEXP", "RLIKE", "ROLLUP", 
		"SECOND", "SET", "SIMILAR", "STDDEV_POP", "STDDEV_SAMP", "SUBPARTITION", 
		"SUM", "TABLESPACE", "THAN", "TIMEZONE", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
		"TRIM", "TO", "UNKNOWN", "VALUES", "VAR_SAMP", "VAR_POP", "VARYING", "WEEK", 
		"YEAR", "ZONE", "BOOLEAN", "BOOL", "BIT", "VARBIT", "INT1", "INT2", "INT4", 
		"INT8", "TINYINT", "SMALLINT", "INT", "INTEGER", "BIGINT", "FLOAT4", "FLOAT8", 
		"REAL", "FLOAT", "DOUBLE", "NUMERIC", "DECIMAL", "CHAR", "VARCHAR", "NCHAR", 
		"NVARCHAR", "DATE", "TIME", "TIMETZ", "TIMESTAMP", "TIMESTAMPTZ", "TEXT", 
		"BINARY", "VARBINARY", "BLOB", "BYTEA", "INET4", "Similar_To", "Not_Similar_To", 
		"Similar_To_Case_Insensitive", "Not_Similar_To_Case_Insensitive", "CAST_EXPRESSION", 
		"ASSIGN", "EQUAL", "COLON", "SEMI_COLON", "COMMA", "CONCATENATION_OPERATOR", 
		"NOT_EQUAL", "LTH", "LEQ", "GTH", "GEQ", "LEFT_PAREN", "RIGHT_PAREN", 
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULAR", "DOT", "UNDERLINE", 
		"VERTICAL_BAR", "QUOTE", "DOUBLE_QUOTE", "NUMBER", "REAL_NUMBER", "BlockComment", 
		"LineComment", "Identifier", "Character_String_Literal", "Space", "White_Space", 
		"BAD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }



	public SqlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class SqlContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SqlParser.Eof, 0); }
		public ITerminalNode SEMI_COLON() { return GetToken(SqlParser.SEMI_COLON, 0); }
		public SqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlContext sql() {
		SqlContext _localctx = new SqlContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402; statement();
			State = 404;
			_la = _input.La(1);
			if (_la==SEMI_COLON) {
				{
				State = 403; Match(SEMI_COLON);
				}
			}

			State = 406; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Data_statementContext data_statement() {
			return GetRuleContext<Data_statementContext>(0);
		}
		public Data_change_statementContext data_change_statement() {
			return GetRuleContext<Data_change_statementContext>(0);
		}
		public Schema_statementContext schema_statement() {
			return GetRuleContext<Schema_statementContext>(0);
		}
		public Index_statementContext index_statement() {
			return GetRuleContext<Index_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 412;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408; data_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409; data_change_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 410; schema_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 411; index_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_statementContext : ParserRuleContext {
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Data_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterData_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitData_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_statementContext data_statement() {
		Data_statementContext _localctx = new Data_statementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_data_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; query_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_change_statementContext : ParserRuleContext {
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Data_change_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_change_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterData_change_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitData_change_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_change_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_change_statementContext data_change_statement() {
		Data_change_statementContext _localctx = new Data_change_statementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_data_change_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; insert_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_statementContext : ParserRuleContext {
		public Create_table_statementContext create_table_statement() {
			return GetRuleContext<Create_table_statementContext>(0);
		}
		public Drop_table_statementContext drop_table_statement() {
			return GetRuleContext<Drop_table_statementContext>(0);
		}
		public Schema_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSchema_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSchema_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_statementContext schema_statement() {
		Schema_statementContext _localctx = new Schema_statementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_schema_statement);
		try {
			State = 420;
			switch (_input.La(1)) {
			case CREATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418; create_table_statement();
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 419; drop_table_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_statementContext : ParserRuleContext {
		public IToken u;
		public IdentifierContext n;
		public Table_nameContext t;
		public Method_specifierContext m;
		public Sort_specifier_listContext s;
		public Param_clauseContext p;
		public ITerminalNode CREATE() { return GetToken(SqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(SqlParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(SqlParser.ON, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Sort_specifier_listContext sort_specifier_list() {
			return GetRuleContext<Sort_specifier_listContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(SqlParser.UNIQUE, 0); }
		public Method_specifierContext method_specifier() {
			return GetRuleContext<Method_specifierContext>(0);
		}
		public Param_clauseContext param_clause() {
			return GetRuleContext<Param_clauseContext>(0);
		}
		public Index_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_statementContext index_statement() {
		Index_statementContext _localctx = new Index_statementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_index_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(CREATE);
			State = 424;
			_la = _input.La(1);
			if (_la==UNIQUE) {
				{
				State = 423; _localctx.u = Match(UNIQUE);
				}
			}

			State = 426; Match(INDEX);
			State = 427; _localctx.n = identifier();
			State = 428; Match(ON);
			State = 429; _localctx.t = table_name();
			State = 431;
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 430; _localctx.m = method_specifier();
				}
			}

			State = 433; Match(LEFT_PAREN);
			State = 434; _localctx.s = sort_specifier_list();
			State = 435; Match(RIGHT_PAREN);
			State = 437;
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 436; _localctx.p = param_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_statementContext : ParserRuleContext {
		public IdentifierContext file_type;
		public IToken path;
		public ITerminalNode CREATE() { return GetToken(SqlParser.CREATE, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(SqlParser.EXTERNAL, 0); }
		public ITerminalNode TABLE() { return GetToken(SqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Table_elementsContext table_elements() {
			return GetRuleContext<Table_elementsContext>(0);
		}
		public ITerminalNode USING() { return GetToken(SqlParser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LOCATION() { return GetToken(SqlParser.LOCATION, 0); }
		public Param_clauseContext param_clause() {
			return GetRuleContext<Param_clauseContext>(0);
		}
		public Table_partitioning_clausesContext table_partitioning_clauses() {
			return GetRuleContext<Table_partitioning_clausesContext>(0);
		}
		public ITerminalNode Character_String_Literal() { return GetToken(SqlParser.Character_String_Literal, 0); }
		public ITerminalNode AS() { return GetToken(SqlParser.AS, 0); }
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Create_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_statementContext create_table_statement() {
		Create_table_statementContext _localctx = new Create_table_statementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_create_table_statement);
		int _la;
		try {
			State = 489;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 439; Match(CREATE);
				State = 440; Match(EXTERNAL);
				State = 441; Match(TABLE);
				State = 442; table_name();
				State = 443; table_elements();
				State = 444; Match(USING);
				State = 445; _localctx.file_type = identifier();
				State = 447;
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 446; param_clause();
					}
				}

				State = 450;
				_la = _input.La(1);
				if (_la==PARTITION) {
					{
					State = 449; table_partitioning_clauses();
					}
				}

				{
				State = 452; Match(LOCATION);
				State = 453; _localctx.path = Match(Character_String_Literal);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 455; Match(CREATE);
				State = 456; Match(TABLE);
				State = 457; table_name();
				State = 458; table_elements();
				State = 461;
				_la = _input.La(1);
				if (_la==USING) {
					{
					State = 459; Match(USING);
					State = 460; _localctx.file_type = identifier();
					}
				}

				State = 464;
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 463; param_clause();
					}
				}

				State = 467;
				_la = _input.La(1);
				if (_la==PARTITION) {
					{
					State = 466; table_partitioning_clauses();
					}
				}

				State = 471;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 469; Match(AS);
					State = 470; query_expression();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 473; Match(CREATE);
				State = 474; Match(TABLE);
				State = 475; table_name();
				State = 478;
				_la = _input.La(1);
				if (_la==USING) {
					{
					State = 476; Match(USING);
					State = 477; _localctx.file_type = identifier();
					}
				}

				State = 481;
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 480; param_clause();
					}
				}

				State = 484;
				_la = _input.La(1);
				if (_la==PARTITION) {
					{
					State = 483; table_partitioning_clauses();
					}
				}

				State = 486; Match(AS);
				State = 487; query_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_elementsContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Field_elementContext[] field_element() {
			return GetRuleContexts<Field_elementContext>();
		}
		public Field_elementContext field_element(int i) {
			return GetRuleContext<Field_elementContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Table_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_elements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTable_elements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTable_elements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_elementsContext table_elements() {
		Table_elementsContext _localctx = new Table_elementsContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_table_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; Match(LEFT_PAREN);
			State = 492; field_element();
			State = 497;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 493; Match(COMMA);
				State = 494; field_element();
				}
				}
				State = 499;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 500; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_elementContext : ParserRuleContext {
		public IdentifierContext name;
		public Field_typeContext field_type() {
			return GetRuleContext<Field_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Field_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterField_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitField_element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_elementContext field_element() {
		Field_elementContext _localctx = new Field_elementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_field_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502; _localctx.name = identifier();
			State = 503; field_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_typeContext : ParserRuleContext {
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Field_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterField_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitField_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_typeContext field_type() {
		Field_typeContext _localctx = new Field_typeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_field_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_clauseContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(SqlParser.WITH, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Param_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterParam_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitParam_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_clauseContext param_clause() {
		Param_clauseContext _localctx = new Param_clauseContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_param_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; Match(WITH);
			State = 508; Match(LEFT_PAREN);
			State = 509; param();
			State = 514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 510; Match(COMMA);
				State = 511; param();
				}
				}
				State = 516;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 517; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public IToken key;
		public Numeric_value_expressionContext value;
		public ITerminalNode EQUAL() { return GetToken(SqlParser.EQUAL, 0); }
		public ITerminalNode Character_String_Literal() { return GetToken(SqlParser.Character_String_Literal, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return GetRuleContext<Numeric_value_expressionContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; _localctx.key = Match(Character_String_Literal);
			State = 520; Match(EQUAL);
			State = 521; _localctx.value = numeric_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_specifierContext : ParserRuleContext {
		public IdentifierContext m;
		public ITerminalNode USING() { return GetToken(SqlParser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Method_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterMethod_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitMethod_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_specifierContext method_specifier() {
		Method_specifierContext _localctx = new Method_specifierContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_method_specifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523; Match(USING);
			State = 524; _localctx.m = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_space_specifierContext : ParserRuleContext {
		public ITerminalNode TABLESPACE() { return GetToken(SqlParser.TABLESPACE, 0); }
		public Table_space_nameContext table_space_name() {
			return GetRuleContext<Table_space_nameContext>(0);
		}
		public Table_space_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_space_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTable_space_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTable_space_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_space_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_space_specifierContext table_space_specifier() {
		Table_space_specifierContext _localctx = new Table_space_specifierContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_table_space_specifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526; Match(TABLESPACE);
			State = 527; table_space_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_space_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Table_space_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_space_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTable_space_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTable_space_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_space_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_space_nameContext table_space_name() {
		Table_space_nameContext _localctx = new Table_space_nameContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_table_space_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_partitioning_clausesContext : ParserRuleContext {
		public Range_partitionsContext range_partitions() {
			return GetRuleContext<Range_partitionsContext>(0);
		}
		public Hash_partitionsContext hash_partitions() {
			return GetRuleContext<Hash_partitionsContext>(0);
		}
		public List_partitionsContext list_partitions() {
			return GetRuleContext<List_partitionsContext>(0);
		}
		public Column_partitionsContext column_partitions() {
			return GetRuleContext<Column_partitionsContext>(0);
		}
		public Table_partitioning_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_partitioning_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTable_partitioning_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTable_partitioning_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_partitioning_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_partitioning_clausesContext table_partitioning_clauses() {
		Table_partitioning_clausesContext _localctx = new Table_partitioning_clausesContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_table_partitioning_clauses);
		try {
			State = 535;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 531; range_partitions();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532; hash_partitions();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 533; list_partitions();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 534; column_partitions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_partitionsContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(SqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(SqlParser.BY, 0); }
		public ITerminalNode RANGE() { return GetToken(SqlParser.RANGE, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(SqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(SqlParser.LEFT_PAREN, i);
		}
		public Column_reference_listContext column_reference_list() {
			return GetRuleContext<Column_reference_listContext>(0);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(SqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(SqlParser.RIGHT_PAREN, i);
		}
		public Range_value_clause_listContext range_value_clause_list() {
			return GetRuleContext<Range_value_clause_listContext>(0);
		}
		public Range_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_partitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRange_partitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRange_partitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_partitionsContext range_partitions() {
		Range_partitionsContext _localctx = new Range_partitionsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_range_partitions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; Match(PARTITION);
			State = 538; Match(BY);
			State = 539; Match(RANGE);
			State = 540; Match(LEFT_PAREN);
			State = 541; column_reference_list();
			State = 542; Match(RIGHT_PAREN);
			State = 543; Match(LEFT_PAREN);
			State = 544; range_value_clause_list();
			State = 545; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_value_clause_listContext : ParserRuleContext {
		public Range_value_clauseContext[] range_value_clause() {
			return GetRuleContexts<Range_value_clauseContext>();
		}
		public Range_value_clauseContext range_value_clause(int i) {
			return GetRuleContext<Range_value_clauseContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Range_value_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_value_clause_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRange_value_clause_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRange_value_clause_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_value_clause_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_value_clause_listContext range_value_clause_list() {
		Range_value_clause_listContext _localctx = new Range_value_clause_listContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_range_value_clause_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; range_value_clause();
			State = 552;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 548; Match(COMMA);
				State = 549; range_value_clause();
				}
				}
				State = 554;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_value_clauseContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(SqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return GetRuleContext<Partition_nameContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(SqlParser.VALUES, 0); }
		public ITerminalNode LESS() { return GetToken(SqlParser.LESS, 0); }
		public ITerminalNode THAN() { return GetToken(SqlParser.THAN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Value_expressionContext value_expression() {
			return GetRuleContext<Value_expressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(SqlParser.MAXVALUE, 0); }
		public Range_value_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_value_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRange_value_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRange_value_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_value_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_value_clauseContext range_value_clause() {
		Range_value_clauseContext _localctx = new Range_value_clauseContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_range_value_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555; Match(PARTITION);
			State = 556; partition_name();
			State = 557; Match(VALUES);
			State = 558; Match(LESS);
			State = 559; Match(THAN);
			State = 571;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 560; Match(LEFT_PAREN);
				State = 561; value_expression();
				State = 562; Match(RIGHT_PAREN);
				}
				break;

			case 2:
				{
				State = 565;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 564; Match(LEFT_PAREN);
					}
				}

				State = 567; Match(MAXVALUE);
				State = 569;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
				case 1:
					{
					State = 568; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partitionsContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(SqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(SqlParser.BY, 0); }
		public ITerminalNode HASH() { return GetToken(SqlParser.HASH, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(SqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(SqlParser.LEFT_PAREN, i);
		}
		public Column_reference_listContext column_reference_list() {
			return GetRuleContext<Column_reference_listContext>(0);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(SqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(SqlParser.RIGHT_PAREN, i);
		}
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return GetRuleContext<Individual_hash_partitionsContext>(0);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return GetRuleContext<Hash_partitions_by_quantityContext>(0);
		}
		public Hash_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterHash_partitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitHash_partitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHash_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partitionsContext hash_partitions() {
		Hash_partitionsContext _localctx = new Hash_partitionsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_hash_partitions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; Match(PARTITION);
			State = 574; Match(BY);
			State = 575; Match(HASH);
			State = 576; Match(LEFT_PAREN);
			State = 577; column_reference_list();
			State = 578; Match(RIGHT_PAREN);
			State = 584;
			switch (_input.La(1)) {
			case LEFT_PAREN:
				{
				State = 579; Match(LEFT_PAREN);
				State = 580; individual_hash_partitions();
				State = 581; Match(RIGHT_PAREN);
				}
				break;
			case PARTITIONS:
				{
				State = 583; hash_partitions_by_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Individual_hash_partitionsContext : ParserRuleContext {
		public Individual_hash_partitionContext[] individual_hash_partition() {
			return GetRuleContexts<Individual_hash_partitionContext>();
		}
		public Individual_hash_partitionContext individual_hash_partition(int i) {
			return GetRuleContext<Individual_hash_partitionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Individual_hash_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_individual_hash_partitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterIndividual_hash_partitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitIndividual_hash_partitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndividual_hash_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Individual_hash_partitionsContext individual_hash_partitions() {
		Individual_hash_partitionsContext _localctx = new Individual_hash_partitionsContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_individual_hash_partitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586; individual_hash_partition();
			State = 591;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 587; Match(COMMA);
				State = 588; individual_hash_partition();
				}
				}
				State = 593;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Individual_hash_partitionContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(SqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return GetRuleContext<Partition_nameContext>(0);
		}
		public Individual_hash_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_individual_hash_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterIndividual_hash_partition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitIndividual_hash_partition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndividual_hash_partition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Individual_hash_partitionContext individual_hash_partition() {
		Individual_hash_partitionContext _localctx = new Individual_hash_partitionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_individual_hash_partition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594; Match(PARTITION);
			State = 595; partition_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partitions_by_quantityContext : ParserRuleContext {
		public Numeric_value_expressionContext quantity;
		public ITerminalNode PARTITIONS() { return GetToken(SqlParser.PARTITIONS, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return GetRuleContext<Numeric_value_expressionContext>(0);
		}
		public Hash_partitions_by_quantityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partitions_by_quantity; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterHash_partitions_by_quantity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitHash_partitions_by_quantity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHash_partitions_by_quantity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
		Hash_partitions_by_quantityContext _localctx = new Hash_partitions_by_quantityContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_hash_partitions_by_quantity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597; Match(PARTITIONS);
			State = 598; _localctx.quantity = numeric_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_partitionsContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(SqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(SqlParser.BY, 0); }
		public ITerminalNode LIST() { return GetToken(SqlParser.LIST, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(SqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(SqlParser.LEFT_PAREN, i);
		}
		public Column_reference_listContext column_reference_list() {
			return GetRuleContext<Column_reference_listContext>(0);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(SqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(SqlParser.RIGHT_PAREN, i);
		}
		public List_value_clause_listContext list_value_clause_list() {
			return GetRuleContext<List_value_clause_listContext>(0);
		}
		public List_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_partitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterList_partitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitList_partitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_partitionsContext list_partitions() {
		List_partitionsContext _localctx = new List_partitionsContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_list_partitions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; Match(PARTITION);
			State = 601; Match(BY);
			State = 602; Match(LIST);
			State = 603; Match(LEFT_PAREN);
			State = 604; column_reference_list();
			State = 605; Match(RIGHT_PAREN);
			State = 606; Match(LEFT_PAREN);
			State = 607; list_value_clause_list();
			State = 608; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_value_clause_listContext : ParserRuleContext {
		public List_value_partitionContext[] list_value_partition() {
			return GetRuleContexts<List_value_partitionContext>();
		}
		public List_value_partitionContext list_value_partition(int i) {
			return GetRuleContext<List_value_partitionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public List_value_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_value_clause_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterList_value_clause_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitList_value_clause_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_value_clause_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_value_clause_listContext list_value_clause_list() {
		List_value_clause_listContext _localctx = new List_value_clause_listContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_list_value_clause_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; list_value_partition();
			State = 615;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 611; Match(COMMA);
				State = 612; list_value_partition();
				}
				}
				State = 617;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_value_partitionContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(SqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return GetRuleContext<Partition_nameContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(SqlParser.VALUES, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public In_value_listContext in_value_list() {
			return GetRuleContext<In_value_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode IN() { return GetToken(SqlParser.IN, 0); }
		public List_value_partitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_value_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterList_value_partition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitList_value_partition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_value_partition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_value_partitionContext list_value_partition() {
		List_value_partitionContext _localctx = new List_value_partitionContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_list_value_partition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; Match(PARTITION);
			State = 619; partition_name();
			State = 620; Match(VALUES);
			State = 622;
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 621; Match(IN);
				}
			}

			State = 624; Match(LEFT_PAREN);
			State = 625; in_value_list();
			State = 626; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_partitionsContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(SqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(SqlParser.BY, 0); }
		public ITerminalNode COLUMN() { return GetToken(SqlParser.COLUMN, 0); }
		public Table_elementsContext table_elements() {
			return GetRuleContext<Table_elementsContext>(0);
		}
		public Column_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_partitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_partitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_partitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_partitionsContext column_partitions() {
		Column_partitionsContext _localctx = new Column_partitionsContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_column_partitions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; Match(PARTITION);
			State = 629; Match(BY);
			State = 630; Match(COLUMN);
			State = 631; table_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Partition_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterPartition_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitPartition_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_nameContext partition_name() {
		Partition_nameContext _localctx = new Partition_nameContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_partition_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_statementContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(SqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(SqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode PURGE() { return GetToken(SqlParser.PURGE, 0); }
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterDrop_table_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitDrop_table_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_statementContext drop_table_statement() {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_drop_table_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635; Match(DROP);
			State = 636; Match(TABLE);
			State = 637; table_name();
			State = 639;
			_la = _input.La(1);
			if (_la==PURGE) {
				{
				State = 638; Match(PURGE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(SqlParser.Identifier, 0); }
		public Nonreserved_keywordsContext nonreserved_keywords() {
			return GetRuleContext<Nonreserved_keywordsContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_identifier);
		try {
			State = 643;
			switch (_input.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 641; Match(Identifier);
				}
				break;
			case AVG:
			case BETWEEN:
			case BY:
			case CENTURY:
			case CHARACTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COUNT:
			case CUBE:
			case DAY:
			case DEC:
			case DECADE:
			case DOW:
			case DOY:
			case DROP:
			case EPOCH:
			case EVERY:
			case EXISTS:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INDEX:
			case INSERT:
			case INTERSECTION:
			case ISODOW:
			case ISOYEAR:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NULLIF:
			case OVERWRITE:
			case PARTITION:
			case PARTITIONS:
			case PRECISION:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGEXP:
			case RLIKE:
			case ROLLUP:
			case SECOND:
			case SET:
			case SIMILAR:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case UNKNOWN:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case WEEK:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 642; nonreserved_keywords();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonreserved_keywordsContext : ParserRuleContext {
		public ITerminalNode AVG() { return GetToken(SqlParser.AVG, 0); }
		public ITerminalNode BETWEEN() { return GetToken(SqlParser.BETWEEN, 0); }
		public ITerminalNode BY() { return GetToken(SqlParser.BY, 0); }
		public ITerminalNode CENTURY() { return GetToken(SqlParser.CENTURY, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SqlParser.CHARACTER, 0); }
		public ITerminalNode COALESCE() { return GetToken(SqlParser.COALESCE, 0); }
		public ITerminalNode COLLECT() { return GetToken(SqlParser.COLLECT, 0); }
		public ITerminalNode COLUMN() { return GetToken(SqlParser.COLUMN, 0); }
		public ITerminalNode COUNT() { return GetToken(SqlParser.COUNT, 0); }
		public ITerminalNode CUBE() { return GetToken(SqlParser.CUBE, 0); }
		public ITerminalNode DAY() { return GetToken(SqlParser.DAY, 0); }
		public ITerminalNode DEC() { return GetToken(SqlParser.DEC, 0); }
		public ITerminalNode DECADE() { return GetToken(SqlParser.DECADE, 0); }
		public ITerminalNode DOW() { return GetToken(SqlParser.DOW, 0); }
		public ITerminalNode DOY() { return GetToken(SqlParser.DOY, 0); }
		public ITerminalNode DROP() { return GetToken(SqlParser.DROP, 0); }
		public ITerminalNode EPOCH() { return GetToken(SqlParser.EPOCH, 0); }
		public ITerminalNode EVERY() { return GetToken(SqlParser.EVERY, 0); }
		public ITerminalNode EXISTS() { return GetToken(SqlParser.EXISTS, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(SqlParser.EXTERNAL, 0); }
		public ITerminalNode EXTRACT() { return GetToken(SqlParser.EXTRACT, 0); }
		public ITerminalNode FILTER() { return GetToken(SqlParser.FILTER, 0); }
		public ITerminalNode FIRST() { return GetToken(SqlParser.FIRST, 0); }
		public ITerminalNode FORMAT() { return GetToken(SqlParser.FORMAT, 0); }
		public ITerminalNode FUSION() { return GetToken(SqlParser.FUSION, 0); }
		public ITerminalNode GROUPING() { return GetToken(SqlParser.GROUPING, 0); }
		public ITerminalNode HASH() { return GetToken(SqlParser.HASH, 0); }
		public ITerminalNode INDEX() { return GetToken(SqlParser.INDEX, 0); }
		public ITerminalNode INSERT() { return GetToken(SqlParser.INSERT, 0); }
		public ITerminalNode INTERSECTION() { return GetToken(SqlParser.INTERSECTION, 0); }
		public ITerminalNode ISODOW() { return GetToken(SqlParser.ISODOW, 0); }
		public ITerminalNode ISOYEAR() { return GetToken(SqlParser.ISOYEAR, 0); }
		public ITerminalNode LAST() { return GetToken(SqlParser.LAST, 0); }
		public ITerminalNode LESS() { return GetToken(SqlParser.LESS, 0); }
		public ITerminalNode LIST() { return GetToken(SqlParser.LIST, 0); }
		public ITerminalNode LOCATION() { return GetToken(SqlParser.LOCATION, 0); }
		public ITerminalNode MAX() { return GetToken(SqlParser.MAX, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(SqlParser.MAXVALUE, 0); }
		public ITerminalNode MICROSECONDS() { return GetToken(SqlParser.MICROSECONDS, 0); }
		public ITerminalNode MILLENNIUM() { return GetToken(SqlParser.MILLENNIUM, 0); }
		public ITerminalNode MILLISECONDS() { return GetToken(SqlParser.MILLISECONDS, 0); }
		public ITerminalNode MIN() { return GetToken(SqlParser.MIN, 0); }
		public ITerminalNode MINUTE() { return GetToken(SqlParser.MINUTE, 0); }
		public ITerminalNode MONTH() { return GetToken(SqlParser.MONTH, 0); }
		public ITerminalNode NATIONAL() { return GetToken(SqlParser.NATIONAL, 0); }
		public ITerminalNode NULLIF() { return GetToken(SqlParser.NULLIF, 0); }
		public ITerminalNode OVERWRITE() { return GetToken(SqlParser.OVERWRITE, 0); }
		public ITerminalNode PARTITION() { return GetToken(SqlParser.PARTITION, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(SqlParser.PARTITIONS, 0); }
		public ITerminalNode PRECISION() { return GetToken(SqlParser.PRECISION, 0); }
		public ITerminalNode PURGE() { return GetToken(SqlParser.PURGE, 0); }
		public ITerminalNode QUARTER() { return GetToken(SqlParser.QUARTER, 0); }
		public ITerminalNode RANGE() { return GetToken(SqlParser.RANGE, 0); }
		public ITerminalNode REGEXP() { return GetToken(SqlParser.REGEXP, 0); }
		public ITerminalNode RLIKE() { return GetToken(SqlParser.RLIKE, 0); }
		public ITerminalNode ROLLUP() { return GetToken(SqlParser.ROLLUP, 0); }
		public ITerminalNode SECOND() { return GetToken(SqlParser.SECOND, 0); }
		public ITerminalNode SET() { return GetToken(SqlParser.SET, 0); }
		public ITerminalNode SIMILAR() { return GetToken(SqlParser.SIMILAR, 0); }
		public ITerminalNode STDDEV_POP() { return GetToken(SqlParser.STDDEV_POP, 0); }
		public ITerminalNode STDDEV_SAMP() { return GetToken(SqlParser.STDDEV_SAMP, 0); }
		public ITerminalNode SUBPARTITION() { return GetToken(SqlParser.SUBPARTITION, 0); }
		public ITerminalNode SUM() { return GetToken(SqlParser.SUM, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(SqlParser.TABLESPACE, 0); }
		public ITerminalNode THAN() { return GetToken(SqlParser.THAN, 0); }
		public ITerminalNode TIMEZONE() { return GetToken(SqlParser.TIMEZONE, 0); }
		public ITerminalNode TIMEZONE_HOUR() { return GetToken(SqlParser.TIMEZONE_HOUR, 0); }
		public ITerminalNode TIMEZONE_MINUTE() { return GetToken(SqlParser.TIMEZONE_MINUTE, 0); }
		public ITerminalNode TRIM() { return GetToken(SqlParser.TRIM, 0); }
		public ITerminalNode TO() { return GetToken(SqlParser.TO, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(SqlParser.UNKNOWN, 0); }
		public ITerminalNode VALUES() { return GetToken(SqlParser.VALUES, 0); }
		public ITerminalNode VAR_POP() { return GetToken(SqlParser.VAR_POP, 0); }
		public ITerminalNode VAR_SAMP() { return GetToken(SqlParser.VAR_SAMP, 0); }
		public ITerminalNode VARYING() { return GetToken(SqlParser.VARYING, 0); }
		public ITerminalNode WEEK() { return GetToken(SqlParser.WEEK, 0); }
		public ITerminalNode YEAR() { return GetToken(SqlParser.YEAR, 0); }
		public ITerminalNode ZONE() { return GetToken(SqlParser.ZONE, 0); }
		public ITerminalNode BIGINT() { return GetToken(SqlParser.BIGINT, 0); }
		public ITerminalNode BIT() { return GetToken(SqlParser.BIT, 0); }
		public ITerminalNode BLOB() { return GetToken(SqlParser.BLOB, 0); }
		public ITerminalNode BOOL() { return GetToken(SqlParser.BOOL, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(SqlParser.BOOLEAN, 0); }
		public ITerminalNode BYTEA() { return GetToken(SqlParser.BYTEA, 0); }
		public ITerminalNode CHAR() { return GetToken(SqlParser.CHAR, 0); }
		public ITerminalNode DATE() { return GetToken(SqlParser.DATE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(SqlParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(SqlParser.DOUBLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(SqlParser.FLOAT, 0); }
		public ITerminalNode FLOAT4() { return GetToken(SqlParser.FLOAT4, 0); }
		public ITerminalNode FLOAT8() { return GetToken(SqlParser.FLOAT8, 0); }
		public ITerminalNode INET4() { return GetToken(SqlParser.INET4, 0); }
		public ITerminalNode INT() { return GetToken(SqlParser.INT, 0); }
		public ITerminalNode INT1() { return GetToken(SqlParser.INT1, 0); }
		public ITerminalNode INT2() { return GetToken(SqlParser.INT2, 0); }
		public ITerminalNode INT4() { return GetToken(SqlParser.INT4, 0); }
		public ITerminalNode INT8() { return GetToken(SqlParser.INT8, 0); }
		public ITerminalNode INTEGER() { return GetToken(SqlParser.INTEGER, 0); }
		public ITerminalNode NCHAR() { return GetToken(SqlParser.NCHAR, 0); }
		public ITerminalNode NUMERIC() { return GetToken(SqlParser.NUMERIC, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(SqlParser.NVARCHAR, 0); }
		public ITerminalNode REAL() { return GetToken(SqlParser.REAL, 0); }
		public ITerminalNode SMALLINT() { return GetToken(SqlParser.SMALLINT, 0); }
		public ITerminalNode TEXT() { return GetToken(SqlParser.TEXT, 0); }
		public ITerminalNode TIME() { return GetToken(SqlParser.TIME, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(SqlParser.TIMESTAMP, 0); }
		public ITerminalNode TIMESTAMPTZ() { return GetToken(SqlParser.TIMESTAMPTZ, 0); }
		public ITerminalNode TIMETZ() { return GetToken(SqlParser.TIMETZ, 0); }
		public ITerminalNode TINYINT() { return GetToken(SqlParser.TINYINT, 0); }
		public ITerminalNode VARBINARY() { return GetToken(SqlParser.VARBINARY, 0); }
		public ITerminalNode VARBIT() { return GetToken(SqlParser.VARBIT, 0); }
		public ITerminalNode VARCHAR() { return GetToken(SqlParser.VARCHAR, 0); }
		public Nonreserved_keywordsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonreserved_keywords; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNonreserved_keywords(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNonreserved_keywords(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonreserved_keywords(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nonreserved_keywordsContext nonreserved_keywords() {
		Nonreserved_keywordsContext _localctx = new Nonreserved_keywordsContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_nonreserved_keywords);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			_la = _input.La(1);
			if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (AVG - 54)) | (1L << (BETWEEN - 54)) | (1L << (BY - 54)) | (1L << (CENTURY - 54)) | (1L << (CHARACTER - 54)) | (1L << (COLLECT - 54)) | (1L << (COALESCE - 54)) | (1L << (COLUMN - 54)) | (1L << (COUNT - 54)) | (1L << (CUBE - 54)) | (1L << (DAY - 54)) | (1L << (DEC - 54)) | (1L << (DECADE - 54)) | (1L << (DOW - 54)) | (1L << (DOY - 54)) | (1L << (DROP - 54)) | (1L << (EPOCH - 54)) | (1L << (EVERY - 54)) | (1L << (EXISTS - 54)) | (1L << (EXTERNAL - 54)) | (1L << (EXTRACT - 54)) | (1L << (FILTER - 54)) | (1L << (FIRST - 54)) | (1L << (FORMAT - 54)) | (1L << (FUSION - 54)) | (1L << (GROUPING - 54)) | (1L << (HASH - 54)) | (1L << (INDEX - 54)) | (1L << (INSERT - 54)) | (1L << (INTERSECTION - 54)) | (1L << (ISODOW - 54)) | (1L << (ISOYEAR - 54)) | (1L << (LAST - 54)) | (1L << (LESS - 54)) | (1L << (LIST - 54)) | (1L << (LOCATION - 54)) | (1L << (MAX - 54)) | (1L << (MAXVALUE - 54)) | (1L << (MICROSECONDS - 54)) | (1L << (MILLENNIUM - 54)) | (1L << (MILLISECONDS - 54)) | (1L << (MIN - 54)) | (1L << (MINUTE - 54)) | (1L << (MONTH - 54)) | (1L << (NATIONAL - 54)) | (1L << (NULLIF - 54)) | (1L << (OVERWRITE - 54)) | (1L << (PARTITION - 54)) | (1L << (PARTITIONS - 54)) | (1L << (PRECISION - 54)) | (1L << (PURGE - 54)) | (1L << (QUARTER - 54)) | (1L << (RANGE - 54)) | (1L << (REGEXP - 54)) | (1L << (RLIKE - 54)) | (1L << (ROLLUP - 54)) | (1L << (SECOND - 54)) | (1L << (SET - 54)) | (1L << (SIMILAR - 54)) | (1L << (STDDEV_POP - 54)) | (1L << (STDDEV_SAMP - 54)) | (1L << (SUBPARTITION - 54)) | (1L << (SUM - 54)))) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (TABLESPACE - 118)) | (1L << (THAN - 118)) | (1L << (TIMEZONE - 118)) | (1L << (TIMEZONE_HOUR - 118)) | (1L << (TIMEZONE_MINUTE - 118)) | (1L << (TRIM - 118)) | (1L << (TO - 118)) | (1L << (UNKNOWN - 118)) | (1L << (VALUES - 118)) | (1L << (VAR_SAMP - 118)) | (1L << (VAR_POP - 118)) | (1L << (VARYING - 118)) | (1L << (WEEK - 118)) | (1L << (YEAR - 118)) | (1L << (ZONE - 118)) | (1L << (BOOLEAN - 118)) | (1L << (BOOL - 118)) | (1L << (BIT - 118)) | (1L << (VARBIT - 118)) | (1L << (INT1 - 118)) | (1L << (INT2 - 118)) | (1L << (INT4 - 118)) | (1L << (INT8 - 118)) | (1L << (TINYINT - 118)) | (1L << (SMALLINT - 118)) | (1L << (INT - 118)) | (1L << (INTEGER - 118)) | (1L << (BIGINT - 118)) | (1L << (FLOAT4 - 118)) | (1L << (FLOAT8 - 118)) | (1L << (REAL - 118)) | (1L << (FLOAT - 118)) | (1L << (DOUBLE - 118)) | (1L << (NUMERIC - 118)) | (1L << (DECIMAL - 118)) | (1L << (CHAR - 118)) | (1L << (VARCHAR - 118)) | (1L << (NCHAR - 118)) | (1L << (NVARCHAR - 118)) | (1L << (DATE - 118)) | (1L << (TIME - 118)) | (1L << (TIMETZ - 118)) | (1L << (TIMESTAMP - 118)) | (1L << (TIMESTAMPTZ - 118)) | (1L << (TEXT - 118)) | (1L << (VARBINARY - 118)) | (1L << (BLOB - 118)) | (1L << (BYTEA - 118)) | (1L << (INET4 - 118)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsigned_literalContext : ParserRuleContext {
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return GetRuleContext<Unsigned_numeric_literalContext>(0);
		}
		public General_literalContext general_literal() {
			return GetRuleContext<General_literalContext>(0);
		}
		public Unsigned_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsigned_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterUnsigned_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitUnsigned_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsigned_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsigned_literalContext unsigned_literal() {
		Unsigned_literalContext _localctx = new Unsigned_literalContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_unsigned_literal);
		try {
			State = 649;
			switch (_input.La(1)) {
			case NUMBER:
			case REAL_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 647; unsigned_numeric_literal();
				}
				break;
			case FALSE:
			case TRUE:
			case UNKNOWN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case Character_String_Literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 648; general_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_literalContext : ParserRuleContext {
		public ITerminalNode Character_String_Literal() { return GetToken(SqlParser.Character_String_Literal, 0); }
		public Datetime_literalContext datetime_literal() {
			return GetRuleContext<Datetime_literalContext>(0);
		}
		public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public General_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterGeneral_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitGeneral_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_literalContext general_literal() {
		General_literalContext _localctx = new General_literalContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_general_literal);
		try {
			State = 654;
			switch (_input.La(1)) {
			case Character_String_Literal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 651; Match(Character_String_Literal);
				}
				break;
			case DATE:
			case TIME:
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 652; datetime_literal();
				}
				break;
			case FALSE:
			case TRUE:
			case UNKNOWN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 653; boolean_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_literalContext : ParserRuleContext {
		public Timestamp_literalContext timestamp_literal() {
			return GetRuleContext<Timestamp_literalContext>(0);
		}
		public Time_literalContext time_literal() {
			return GetRuleContext<Time_literalContext>(0);
		}
		public Date_literalContext date_literal() {
			return GetRuleContext<Date_literalContext>(0);
		}
		public Datetime_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterDatetime_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitDatetime_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_literalContext datetime_literal() {
		Datetime_literalContext _localctx = new Datetime_literalContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_datetime_literal);
		try {
			State = 659;
			switch (_input.La(1)) {
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656; timestamp_literal();
				}
				break;
			case TIME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 657; time_literal();
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 658; date_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_literalContext : ParserRuleContext {
		public IToken time_string;
		public ITerminalNode TIME() { return GetToken(SqlParser.TIME, 0); }
		public ITerminalNode Character_String_Literal() { return GetToken(SqlParser.Character_String_Literal, 0); }
		public Time_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTime_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTime_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_literalContext time_literal() {
		Time_literalContext _localctx = new Time_literalContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_time_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661; Match(TIME);
			State = 662; _localctx.time_string = Match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timestamp_literalContext : ParserRuleContext {
		public IToken timestamp_string;
		public ITerminalNode TIMESTAMP() { return GetToken(SqlParser.TIMESTAMP, 0); }
		public ITerminalNode Character_String_Literal() { return GetToken(SqlParser.Character_String_Literal, 0); }
		public Timestamp_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestamp_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTimestamp_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTimestamp_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestamp_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Timestamp_literalContext timestamp_literal() {
		Timestamp_literalContext _localctx = new Timestamp_literalContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_timestamp_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664; Match(TIMESTAMP);
			State = 665; _localctx.timestamp_string = Match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_literalContext : ParserRuleContext {
		public IToken date_string;
		public ITerminalNode DATE() { return GetToken(SqlParser.DATE, 0); }
		public ITerminalNode Character_String_Literal() { return GetToken(SqlParser.Character_String_Literal, 0); }
		public Date_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterDate_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitDate_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_literalContext date_literal() {
		Date_literalContext _localctx = new Date_literalContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_date_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667; Match(DATE);
			State = 668; _localctx.date_string = Match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(SqlParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(SqlParser.FALSE, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(SqlParser.UNKNOWN, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public Predefined_typeContext predefined_type() {
			return GetRuleContext<Predefined_typeContext>(0);
		}
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_data_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672; predefined_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_typeContext : ParserRuleContext {
		public Character_string_typeContext character_string_type() {
			return GetRuleContext<Character_string_typeContext>(0);
		}
		public National_character_string_typeContext national_character_string_type() {
			return GetRuleContext<National_character_string_typeContext>(0);
		}
		public Binary_large_object_string_typeContext binary_large_object_string_type() {
			return GetRuleContext<Binary_large_object_string_typeContext>(0);
		}
		public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		public Boolean_typeContext boolean_type() {
			return GetRuleContext<Boolean_typeContext>(0);
		}
		public Datetime_typeContext datetime_type() {
			return GetRuleContext<Datetime_typeContext>(0);
		}
		public Bit_typeContext bit_type() {
			return GetRuleContext<Bit_typeContext>(0);
		}
		public Binary_typeContext binary_type() {
			return GetRuleContext<Binary_typeContext>(0);
		}
		public Network_typeContext network_type() {
			return GetRuleContext<Network_typeContext>(0);
		}
		public Predefined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterPredefined_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitPredefined_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefined_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_typeContext predefined_type() {
		Predefined_typeContext _localctx = new Predefined_typeContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_predefined_type);
		try {
			State = 683;
			switch (_input.La(1)) {
			case CHARACTER:
			case CHAR:
			case VARCHAR:
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 674; character_string_type();
				}
				break;
			case NATIONAL:
			case NCHAR:
			case NVARCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 675; national_character_string_type();
				}
				break;
			case BLOB:
			case BYTEA:
				EnterOuterAlt(_localctx, 3);
				{
				State = 676; binary_large_object_string_type();
				}
				break;
			case DEC:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 677; numeric_type();
				}
				break;
			case BOOLEAN:
			case BOOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 678; boolean_type();
				}
				break;
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
				EnterOuterAlt(_localctx, 6);
				{
				State = 679; datetime_type();
				}
				break;
			case BIT:
			case VARBIT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 680; bit_type();
				}
				break;
			case BINARY:
			case VARBINARY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 681; binary_type();
				}
				break;
			case INET4:
				EnterOuterAlt(_localctx, 9);
				{
				State = 682; network_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Network_typeContext : ParserRuleContext {
		public ITerminalNode INET4() { return GetToken(SqlParser.INET4, 0); }
		public Network_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_network_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNetwork_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNetwork_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNetwork_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Network_typeContext network_type() {
		Network_typeContext _localctx = new Network_typeContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_network_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685; Match(INET4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_string_typeContext : ParserRuleContext {
		public ITerminalNode CHARACTER() { return GetToken(SqlParser.CHARACTER, 0); }
		public Type_lengthContext type_length() {
			return GetRuleContext<Type_lengthContext>(0);
		}
		public ITerminalNode CHAR() { return GetToken(SqlParser.CHAR, 0); }
		public ITerminalNode VARYING() { return GetToken(SqlParser.VARYING, 0); }
		public ITerminalNode VARCHAR() { return GetToken(SqlParser.VARCHAR, 0); }
		public ITerminalNode TEXT() { return GetToken(SqlParser.TEXT, 0); }
		public Character_string_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_string_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCharacter_string_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCharacter_string_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_string_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_string_typeContext character_string_type() {
		Character_string_typeContext _localctx = new Character_string_typeContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_character_string_type);
		int _la;
		try {
			State = 710;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 687; Match(CHARACTER);
				State = 689;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 688; type_length();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 691; Match(CHAR);
				State = 693;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 692; type_length();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 695; Match(CHARACTER);
				State = 696; Match(VARYING);
				State = 698;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 697; type_length();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 700; Match(CHAR);
				State = 701; Match(VARYING);
				State = 703;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 702; type_length();
					}
				}

				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 705; Match(VARCHAR);
				State = 707;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 706; type_length();
					}
				}

				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 709; Match(TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_lengthContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ITerminalNode NUMBER() { return GetToken(SqlParser.NUMBER, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Type_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_length; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterType_length(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitType_length(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_length(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_lengthContext type_length() {
		Type_lengthContext _localctx = new Type_lengthContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_type_length);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; Match(LEFT_PAREN);
			State = 713; Match(NUMBER);
			State = 714; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class National_character_string_typeContext : ParserRuleContext {
		public ITerminalNode NATIONAL() { return GetToken(SqlParser.NATIONAL, 0); }
		public ITerminalNode CHARACTER() { return GetToken(SqlParser.CHARACTER, 0); }
		public Type_lengthContext type_length() {
			return GetRuleContext<Type_lengthContext>(0);
		}
		public ITerminalNode CHAR() { return GetToken(SqlParser.CHAR, 0); }
		public ITerminalNode NCHAR() { return GetToken(SqlParser.NCHAR, 0); }
		public ITerminalNode VARYING() { return GetToken(SqlParser.VARYING, 0); }
		public ITerminalNode NVARCHAR() { return GetToken(SqlParser.NVARCHAR, 0); }
		public National_character_string_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_national_character_string_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNational_character_string_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNational_character_string_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNational_character_string_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public National_character_string_typeContext national_character_string_type() {
		National_character_string_typeContext _localctx = new National_character_string_typeContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_national_character_string_type);
		int _la;
		try {
			State = 751;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 716; Match(NATIONAL);
				State = 717; Match(CHARACTER);
				State = 719;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 718; type_length();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 721; Match(NATIONAL);
				State = 722; Match(CHAR);
				State = 724;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 723; type_length();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 726; Match(NCHAR);
				State = 728;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 727; type_length();
					}
				}

				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 730; Match(NATIONAL);
				State = 731; Match(CHARACTER);
				State = 732; Match(VARYING);
				State = 734;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 733; type_length();
					}
				}

				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 736; Match(NATIONAL);
				State = 737; Match(CHAR);
				State = 738; Match(VARYING);
				State = 740;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 739; type_length();
					}
				}

				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 742; Match(NCHAR);
				State = 743; Match(VARYING);
				State = 745;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 744; type_length();
					}
				}

				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 747; Match(NVARCHAR);
				State = 749;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 748; type_length();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_large_object_string_typeContext : ParserRuleContext {
		public ITerminalNode BLOB() { return GetToken(SqlParser.BLOB, 0); }
		public Type_lengthContext type_length() {
			return GetRuleContext<Type_lengthContext>(0);
		}
		public ITerminalNode BYTEA() { return GetToken(SqlParser.BYTEA, 0); }
		public Binary_large_object_string_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_large_object_string_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBinary_large_object_string_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBinary_large_object_string_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_large_object_string_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_large_object_string_typeContext binary_large_object_string_type() {
		Binary_large_object_string_typeContext _localctx = new Binary_large_object_string_typeContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_binary_large_object_string_type);
		int _la;
		try {
			State = 761;
			switch (_input.La(1)) {
			case BLOB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 753; Match(BLOB);
				State = 755;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 754; type_length();
					}
				}

				}
				break;
			case BYTEA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 757; Match(BYTEA);
				State = 759;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 758; type_length();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		public Exact_numeric_typeContext exact_numeric_type() {
			return GetRuleContext<Exact_numeric_typeContext>(0);
		}
		public Approximate_numeric_typeContext approximate_numeric_type() {
			return GetRuleContext<Approximate_numeric_typeContext>(0);
		}
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_numeric_type);
		try {
			State = 765;
			switch (_input.La(1)) {
			case DEC:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case NUMERIC:
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 763; exact_numeric_type();
				}
				break;
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 764; approximate_numeric_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exact_numeric_typeContext : ParserRuleContext {
		public ITerminalNode NUMERIC() { return GetToken(SqlParser.NUMERIC, 0); }
		public Precision_paramContext precision_param() {
			return GetRuleContext<Precision_paramContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(SqlParser.DECIMAL, 0); }
		public ITerminalNode DEC() { return GetToken(SqlParser.DEC, 0); }
		public ITerminalNode INT1() { return GetToken(SqlParser.INT1, 0); }
		public ITerminalNode TINYINT() { return GetToken(SqlParser.TINYINT, 0); }
		public ITerminalNode INT2() { return GetToken(SqlParser.INT2, 0); }
		public ITerminalNode SMALLINT() { return GetToken(SqlParser.SMALLINT, 0); }
		public ITerminalNode INT4() { return GetToken(SqlParser.INT4, 0); }
		public ITerminalNode INT() { return GetToken(SqlParser.INT, 0); }
		public ITerminalNode INTEGER() { return GetToken(SqlParser.INTEGER, 0); }
		public ITerminalNode INT8() { return GetToken(SqlParser.INT8, 0); }
		public ITerminalNode BIGINT() { return GetToken(SqlParser.BIGINT, 0); }
		public Exact_numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exact_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterExact_numeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitExact_numeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExact_numeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exact_numeric_typeContext exact_numeric_type() {
		Exact_numeric_typeContext _localctx = new Exact_numeric_typeContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_exact_numeric_type);
		int _la;
		try {
			State = 788;
			switch (_input.La(1)) {
			case NUMERIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 767; Match(NUMERIC);
				State = 769;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 768; precision_param();
					}
				}

				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 771; Match(DECIMAL);
				State = 773;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 772; precision_param();
					}
				}

				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 775; Match(DEC);
				State = 777;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 776; precision_param();
					}
				}

				}
				break;
			case INT1:
				EnterOuterAlt(_localctx, 4);
				{
				State = 779; Match(INT1);
				}
				break;
			case TINYINT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 780; Match(TINYINT);
				}
				break;
			case INT2:
				EnterOuterAlt(_localctx, 6);
				{
				State = 781; Match(INT2);
				}
				break;
			case SMALLINT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 782; Match(SMALLINT);
				}
				break;
			case INT4:
				EnterOuterAlt(_localctx, 8);
				{
				State = 783; Match(INT4);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 784; Match(INT);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 785; Match(INTEGER);
				}
				break;
			case INT8:
				EnterOuterAlt(_localctx, 11);
				{
				State = 786; Match(INT8);
				}
				break;
			case BIGINT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 787; Match(BIGINT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Approximate_numeric_typeContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(SqlParser.FLOAT, 0); }
		public Precision_paramContext precision_param() {
			return GetRuleContext<Precision_paramContext>(0);
		}
		public ITerminalNode FLOAT4() { return GetToken(SqlParser.FLOAT4, 0); }
		public ITerminalNode REAL() { return GetToken(SqlParser.REAL, 0); }
		public ITerminalNode FLOAT8() { return GetToken(SqlParser.FLOAT8, 0); }
		public ITerminalNode DOUBLE() { return GetToken(SqlParser.DOUBLE, 0); }
		public ITerminalNode PRECISION() { return GetToken(SqlParser.PRECISION, 0); }
		public Approximate_numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_approximate_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterApproximate_numeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitApproximate_numeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApproximate_numeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Approximate_numeric_typeContext approximate_numeric_type() {
		Approximate_numeric_typeContext _localctx = new Approximate_numeric_typeContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_approximate_numeric_type);
		int _la;
		try {
			State = 800;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 790; Match(FLOAT);
				State = 792;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 791; precision_param();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 794; Match(FLOAT4);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 795; Match(REAL);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 796; Match(FLOAT8);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 797; Match(DOUBLE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 798; Match(DOUBLE);
				State = 799; Match(PRECISION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precision_paramContext : ParserRuleContext {
		public IToken precision;
		public IToken scale;
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] NUMBER() { return GetTokens(SqlParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(SqlParser.NUMBER, i);
		}
		public ITerminalNode COMMA() { return GetToken(SqlParser.COMMA, 0); }
		public Precision_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterPrecision_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitPrecision_param(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Precision_paramContext precision_param() {
		Precision_paramContext _localctx = new Precision_paramContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_precision_param);
		try {
			State = 810;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 802; Match(LEFT_PAREN);
				State = 803; _localctx.precision = Match(NUMBER);
				State = 804; Match(RIGHT_PAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 805; Match(LEFT_PAREN);
				State = 806; _localctx.precision = Match(NUMBER);
				State = 807; Match(COMMA);
				State = 808; _localctx.scale = Match(NUMBER);
				State = 809; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_typeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(SqlParser.BOOLEAN, 0); }
		public ITerminalNode BOOL() { return GetToken(SqlParser.BOOL, 0); }
		public Boolean_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBoolean_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBoolean_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_typeContext boolean_type() {
		Boolean_typeContext _localctx = new Boolean_typeContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_boolean_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812;
			_la = _input.La(1);
			if ( !(_la==BOOLEAN || _la==BOOL) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_typeContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(SqlParser.DATE, 0); }
		public ITerminalNode[] TIME() { return GetTokens(SqlParser.TIME); }
		public ITerminalNode TIME(int i) {
			return GetToken(SqlParser.TIME, i);
		}
		public ITerminalNode WITH() { return GetToken(SqlParser.WITH, 0); }
		public ITerminalNode ZONE() { return GetToken(SqlParser.ZONE, 0); }
		public ITerminalNode TIMETZ() { return GetToken(SqlParser.TIMETZ, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(SqlParser.TIMESTAMP, 0); }
		public ITerminalNode TIMESTAMPTZ() { return GetToken(SqlParser.TIMESTAMPTZ, 0); }
		public Datetime_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterDatetime_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitDatetime_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_typeContext datetime_type() {
		Datetime_typeContext _localctx = new Datetime_typeContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_datetime_type);
		try {
			State = 827;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 814; Match(DATE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 815; Match(TIME);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 816; Match(TIME);
				State = 817; Match(WITH);
				State = 818; Match(TIME);
				State = 819; Match(ZONE);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 820; Match(TIMETZ);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 821; Match(TIMESTAMP);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 822; Match(TIMESTAMP);
				State = 823; Match(WITH);
				State = 824; Match(TIME);
				State = 825; Match(ZONE);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 826; Match(TIMESTAMPTZ);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_typeContext : ParserRuleContext {
		public ITerminalNode BIT() { return GetToken(SqlParser.BIT, 0); }
		public Type_lengthContext type_length() {
			return GetRuleContext<Type_lengthContext>(0);
		}
		public ITerminalNode VARBIT() { return GetToken(SqlParser.VARBIT, 0); }
		public ITerminalNode VARYING() { return GetToken(SqlParser.VARYING, 0); }
		public Bit_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBit_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBit_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBit_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bit_typeContext bit_type() {
		Bit_typeContext _localctx = new Bit_typeContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_bit_type);
		int _la;
		try {
			State = 842;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 829; Match(BIT);
				State = 831;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 830; type_length();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 833; Match(VARBIT);
				State = 835;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 834; type_length();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 837; Match(BIT);
				State = 838; Match(VARYING);
				State = 840;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 839; type_length();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_typeContext : ParserRuleContext {
		public ITerminalNode BINARY() { return GetToken(SqlParser.BINARY, 0); }
		public Type_lengthContext type_length() {
			return GetRuleContext<Type_lengthContext>(0);
		}
		public ITerminalNode VARYING() { return GetToken(SqlParser.VARYING, 0); }
		public ITerminalNode VARBINARY() { return GetToken(SqlParser.VARBINARY, 0); }
		public Binary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBinary_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBinary_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_typeContext binary_type() {
		Binary_typeContext _localctx = new Binary_typeContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_binary_type);
		int _la;
		try {
			State = 857;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 844; Match(BINARY);
				State = 846;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 845; type_length();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 848; Match(BINARY);
				State = 849; Match(VARYING);
				State = 851;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 850; type_length();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 853; Match(VARBINARY);
				State = 855;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 854; type_length();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_expression_primaryContext : ParserRuleContext {
		public Parenthesized_value_expressionContext parenthesized_value_expression() {
			return GetRuleContext<Parenthesized_value_expressionContext>(0);
		}
		public Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() {
			return GetRuleContext<Nonparenthesized_value_expression_primaryContext>(0);
		}
		public Value_expression_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_expression_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterValue_expression_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitValue_expression_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_expression_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_expression_primaryContext value_expression_primary() {
		Value_expression_primaryContext _localctx = new Value_expression_primaryContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_value_expression_primary);
		try {
			State = 861;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 859; parenthesized_value_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 860; nonparenthesized_value_expression_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_value_expressionContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Value_expressionContext value_expression() {
			return GetRuleContext<Value_expressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Parenthesized_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterParenthesized_value_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitParenthesized_value_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized_value_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_value_expressionContext parenthesized_value_expression() {
		Parenthesized_value_expressionContext _localctx = new Parenthesized_value_expressionContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_parenthesized_value_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863; Match(LEFT_PAREN);
			State = 864; value_expression();
			State = 865; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonparenthesized_value_expression_primaryContext : ParserRuleContext {
		public Unsigned_value_specificationContext unsigned_value_specification() {
			return GetRuleContext<Unsigned_value_specificationContext>(0);
		}
		public Column_referenceContext column_reference() {
			return GetRuleContext<Column_referenceContext>(0);
		}
		public Set_function_specificationContext set_function_specification() {
			return GetRuleContext<Set_function_specificationContext>(0);
		}
		public Scalar_subqueryContext scalar_subquery() {
			return GetRuleContext<Scalar_subqueryContext>(0);
		}
		public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		public Cast_specificationContext cast_specification() {
			return GetRuleContext<Cast_specificationContext>(0);
		}
		public Routine_invocationContext routine_invocation() {
			return GetRuleContext<Routine_invocationContext>(0);
		}
		public Nonparenthesized_value_expression_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonparenthesized_value_expression_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNonparenthesized_value_expression_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNonparenthesized_value_expression_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonparenthesized_value_expression_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() {
		Nonparenthesized_value_expression_primaryContext _localctx = new Nonparenthesized_value_expression_primaryContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_nonparenthesized_value_expression_primary);
		try {
			State = 874;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 867; unsigned_value_specification();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 868; column_reference();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 869; set_function_specification();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 870; scalar_subquery();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 871; case_expression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 872; cast_specification();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 873; routine_invocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsigned_value_specificationContext : ParserRuleContext {
		public Unsigned_literalContext unsigned_literal() {
			return GetRuleContext<Unsigned_literalContext>(0);
		}
		public Unsigned_value_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsigned_value_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterUnsigned_value_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitUnsigned_value_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsigned_value_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsigned_value_specificationContext unsigned_value_specification() {
		Unsigned_value_specificationContext _localctx = new Unsigned_value_specificationContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_unsigned_value_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876; unsigned_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsigned_numeric_literalContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(SqlParser.NUMBER, 0); }
		public ITerminalNode REAL_NUMBER() { return GetToken(SqlParser.REAL_NUMBER, 0); }
		public Unsigned_numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsigned_numeric_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterUnsigned_numeric_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitUnsigned_numeric_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsigned_numeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsigned_numeric_literalContext unsigned_numeric_literal() {
		Unsigned_numeric_literalContext _localctx = new Unsigned_numeric_literalContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_unsigned_numeric_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			_la = _input.La(1);
			if ( !(_la==NUMBER || _la==REAL_NUMBER) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numerical_literalContext : ParserRuleContext {
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return GetRuleContext<Unsigned_numeric_literalContext>(0);
		}
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public Signed_numerical_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_numerical_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSigned_numerical_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSigned_numerical_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_numerical_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numerical_literalContext signed_numerical_literal() {
		Signed_numerical_literalContext _localctx = new Signed_numerical_literalContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_signed_numerical_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 880; sign();
				}
			}

			State = 883; unsigned_numeric_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_function_specificationContext : ParserRuleContext {
		public Aggregate_functionContext aggregate_function() {
			return GetRuleContext<Aggregate_functionContext>(0);
		}
		public Set_function_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_function_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSet_function_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSet_function_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_function_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_function_specificationContext set_function_specification() {
		Set_function_specificationContext _localctx = new Set_function_specificationContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_set_function_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885; aggregate_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_functionContext : ParserRuleContext {
		public ITerminalNode COUNT() { return GetToken(SqlParser.COUNT, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ITerminalNode MULTIPLY() { return GetToken(SqlParser.MULTIPLY, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public General_set_functionContext general_set_function() {
			return GetRuleContext<General_set_functionContext>(0);
		}
		public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		public Aggregate_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_functionContext aggregate_function() {
		Aggregate_functionContext _localctx = new Aggregate_functionContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_aggregate_function);
		try {
			State = 895;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 887; Match(COUNT);
				State = 888; Match(LEFT_PAREN);
				State = 889; Match(MULTIPLY);
				State = 890; Match(RIGHT_PAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 891; general_set_function();
				State = 893;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					State = 892; filter_clause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_set_functionContext : ParserRuleContext {
		public Set_function_typeContext set_function_type() {
			return GetRuleContext<Set_function_typeContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Value_expressionContext value_expression() {
			return GetRuleContext<Value_expressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Set_qualifierContext set_qualifier() {
			return GetRuleContext<Set_qualifierContext>(0);
		}
		public General_set_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_set_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterGeneral_set_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitGeneral_set_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_set_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_set_functionContext general_set_function() {
		General_set_functionContext _localctx = new General_set_functionContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_general_set_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897; set_function_type();
			State = 898; Match(LEFT_PAREN);
			State = 900;
			_la = _input.La(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 899; set_qualifier();
				}
			}

			State = 902; value_expression();
			State = 903; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_function_typeContext : ParserRuleContext {
		public ITerminalNode AVG() { return GetToken(SqlParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(SqlParser.MAX, 0); }
		public ITerminalNode MIN() { return GetToken(SqlParser.MIN, 0); }
		public ITerminalNode SUM() { return GetToken(SqlParser.SUM, 0); }
		public ITerminalNode EVERY() { return GetToken(SqlParser.EVERY, 0); }
		public ITerminalNode ANY() { return GetToken(SqlParser.ANY, 0); }
		public ITerminalNode SOME() { return GetToken(SqlParser.SOME, 0); }
		public ITerminalNode COUNT() { return GetToken(SqlParser.COUNT, 0); }
		public ITerminalNode STDDEV_POP() { return GetToken(SqlParser.STDDEV_POP, 0); }
		public ITerminalNode STDDEV_SAMP() { return GetToken(SqlParser.STDDEV_SAMP, 0); }
		public ITerminalNode VAR_SAMP() { return GetToken(SqlParser.VAR_SAMP, 0); }
		public ITerminalNode VAR_POP() { return GetToken(SqlParser.VAR_POP, 0); }
		public ITerminalNode COLLECT() { return GetToken(SqlParser.COLLECT, 0); }
		public ITerminalNode FUSION() { return GetToken(SqlParser.FUSION, 0); }
		public ITerminalNode INTERSECTION() { return GetToken(SqlParser.INTERSECTION, 0); }
		public Set_function_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_function_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSet_function_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSet_function_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_function_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_function_typeContext set_function_type() {
		Set_function_typeContext _localctx = new Set_function_typeContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_set_function_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANY) | (1L << SOME) | (1L << AVG) | (1L << COLLECT) | (1L << COUNT))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (EVERY - 71)) | (1L << (FUSION - 71)) | (1L << (INTERSECTION - 71)) | (1L << (MAX - 71)) | (1L << (MIN - 71)) | (1L << (STDDEV_POP - 71)) | (1L << (STDDEV_SAMP - 71)) | (1L << (SUM - 71)) | (1L << (VAR_SAMP - 71)) | (1L << (VAR_POP - 71)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_clauseContext : ParserRuleContext {
		public ITerminalNode FILTER() { return GetToken(SqlParser.FILTER, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ITerminalNode WHERE() { return GetToken(SqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterFilter_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitFilter_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filter_clauseContext filter_clause() {
		Filter_clauseContext _localctx = new Filter_clauseContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_filter_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907; Match(FILTER);
			State = 908; Match(LEFT_PAREN);
			State = 909; Match(WHERE);
			State = 910; search_condition();
			State = 911; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_operationContext : ParserRuleContext {
		public ITerminalNode GROUPING() { return GetToken(SqlParser.GROUPING, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Column_reference_listContext column_reference_list() {
			return GetRuleContext<Column_reference_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Grouping_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterGrouping_operation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitGrouping_operation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_operationContext grouping_operation() {
		Grouping_operationContext _localctx = new Grouping_operationContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_grouping_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913; Match(GROUPING);
			State = 914; Match(LEFT_PAREN);
			State = 915; column_reference_list();
			State = 916; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public Case_specificationContext case_specification() {
			return GetRuleContext<Case_specificationContext>(0);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_case_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918; case_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_abbreviationContext : ParserRuleContext {
		public ITerminalNode NULLIF() { return GetToken(SqlParser.NULLIF, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return GetRuleContext<Numeric_value_expressionContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Boolean_value_expressionContext[] boolean_value_expression() {
			return GetRuleContexts<Boolean_value_expressionContext>();
		}
		public Boolean_value_expressionContext boolean_value_expression(int i) {
			return GetRuleContext<Boolean_value_expressionContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode COALESCE() { return GetToken(SqlParser.COALESCE, 0); }
		public Case_abbreviationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_abbreviation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCase_abbreviation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCase_abbreviation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_abbreviation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_abbreviationContext case_abbreviation() {
		Case_abbreviationContext _localctx = new Case_abbreviationContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_case_abbreviation);
		int _la;
		try {
			State = 938;
			switch (_input.La(1)) {
			case NULLIF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 920; Match(NULLIF);
				State = 921; Match(LEFT_PAREN);
				State = 922; numeric_value_expression();
				State = 923; Match(COMMA);
				State = 924; boolean_value_expression();
				State = 925; Match(RIGHT_PAREN);
				}
				break;
			case COALESCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 927; Match(COALESCE);
				State = 928; Match(LEFT_PAREN);
				State = 929; numeric_value_expression();
				State = 932;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 930; Match(COMMA);
					State = 931; boolean_value_expression();
					}
					}
					State = 934;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COMMA );
				State = 936; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_specificationContext : ParserRuleContext {
		public Simple_caseContext simple_case() {
			return GetRuleContext<Simple_caseContext>(0);
		}
		public Searched_caseContext searched_case() {
			return GetRuleContext<Searched_caseContext>(0);
		}
		public Case_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCase_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCase_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_specificationContext case_specification() {
		Case_specificationContext _localctx = new Case_specificationContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_case_specification);
		try {
			State = 942;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 940; simple_case();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 941; searched_case();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_caseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(SqlParser.CASE, 0); }
		public Boolean_value_expressionContext boolean_value_expression() {
			return GetRuleContext<Boolean_value_expressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(SqlParser.END, 0); }
		public Simple_when_clauseContext[] simple_when_clause() {
			return GetRuleContexts<Simple_when_clauseContext>();
		}
		public Simple_when_clauseContext simple_when_clause(int i) {
			return GetRuleContext<Simple_when_clauseContext>(i);
		}
		public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public Simple_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_case; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_caseContext simple_case() {
		Simple_caseContext _localctx = new Simple_caseContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_simple_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944; Match(CASE);
			State = 945; boolean_value_expression();
			State = 947;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 946; simple_when_clause();
				}
				}
				State = 949;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==WHEN );
			State = 952;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 951; else_clause();
				}
			}

			State = 954; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Searched_caseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(SqlParser.CASE, 0); }
		public ITerminalNode END() { return GetToken(SqlParser.END, 0); }
		public Searched_when_clauseContext[] searched_when_clause() {
			return GetRuleContexts<Searched_when_clauseContext>();
		}
		public Searched_when_clauseContext searched_when_clause(int i) {
			return GetRuleContext<Searched_when_clauseContext>(i);
		}
		public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public Searched_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searched_case; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSearched_case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSearched_case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearched_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Searched_caseContext searched_case() {
		Searched_caseContext _localctx = new Searched_caseContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_searched_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956; Match(CASE);
			State = 958;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 957; searched_when_clause();
				}
				}
				State = 960;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==WHEN );
			State = 963;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 962; else_clause();
				}
			}

			State = 965; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_when_clauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(SqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(SqlParser.THEN, 0); }
		public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public Simple_when_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_when_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_when_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_when_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_when_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_when_clauseContext simple_when_clause() {
		Simple_when_clauseContext _localctx = new Simple_when_clauseContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_simple_when_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967; Match(WHEN);
			State = 968; search_condition();
			State = 969; Match(THEN);
			State = 970; result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Searched_when_clauseContext : ParserRuleContext {
		public Search_conditionContext c;
		public ResultContext r;
		public ITerminalNode WHEN() { return GetToken(SqlParser.WHEN, 0); }
		public ITerminalNode THEN() { return GetToken(SqlParser.THEN, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public Searched_when_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searched_when_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSearched_when_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSearched_when_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearched_when_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Searched_when_clauseContext searched_when_clause() {
		Searched_when_clauseContext _localctx = new Searched_when_clauseContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_searched_when_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972; Match(WHEN);
			State = 973; _localctx.c = search_condition();
			State = 974; Match(THEN);
			State = 975; _localctx.r = result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_clauseContext : ParserRuleContext {
		public ResultContext r;
		public ITerminalNode ELSE() { return GetToken(SqlParser.ELSE, 0); }
		public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public Else_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterElse_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitElse_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_clauseContext else_clause() {
		Else_clauseContext _localctx = new Else_clauseContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_else_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977; Match(ELSE);
			State = 978; _localctx.r = result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		public Value_expressionContext value_expression() {
			return GetRuleContext<Value_expressionContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(SqlParser.NULL, 0); }
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_result);
		try {
			State = 982;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 980; value_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 981; Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_specificationContext : ParserRuleContext {
		public ITerminalNode CAST() { return GetToken(SqlParser.CAST, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Cast_operandContext cast_operand() {
			return GetRuleContext<Cast_operandContext>(0);
		}
		public ITerminalNode AS() { return GetToken(SqlParser.AS, 0); }
		public Cast_targetContext cast_target() {
			return GetRuleContext<Cast_targetContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Cast_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCast_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCast_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_specificationContext cast_specification() {
		Cast_specificationContext _localctx = new Cast_specificationContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_cast_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984; Match(CAST);
			State = 985; Match(LEFT_PAREN);
			State = 986; cast_operand();
			State = 987; Match(AS);
			State = 988; cast_target();
			State = 989; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_operandContext : ParserRuleContext {
		public Value_expressionContext value_expression() {
			return GetRuleContext<Value_expressionContext>(0);
		}
		public Cast_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_operand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCast_operand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCast_operand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_operand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_operandContext cast_operand() {
		Cast_operandContext _localctx = new Cast_operandContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_cast_operand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 991; value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_targetContext : ParserRuleContext {
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Cast_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCast_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCast_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_targetContext cast_target() {
		Cast_targetContext _localctx = new Cast_targetContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_cast_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993; data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_expressionContext : ParserRuleContext {
		public Common_value_expressionContext common_value_expression() {
			return GetRuleContext<Common_value_expressionContext>(0);
		}
		public Row_value_expressionContext row_value_expression() {
			return GetRuleContext<Row_value_expressionContext>(0);
		}
		public Boolean_value_expressionContext boolean_value_expression() {
			return GetRuleContext<Boolean_value_expressionContext>(0);
		}
		public Value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterValue_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitValue_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_expressionContext value_expression() {
		Value_expressionContext _localctx = new Value_expressionContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_value_expression);
		try {
			State = 998;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 995; common_value_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 996; row_value_expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 997; boolean_value_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_value_expressionContext : ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return GetRuleContext<Numeric_value_expressionContext>(0);
		}
		public String_value_expressionContext string_value_expression() {
			return GetRuleContext<String_value_expressionContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(SqlParser.NULL, 0); }
		public Common_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCommon_value_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCommon_value_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_value_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_value_expressionContext common_value_expression() {
		Common_value_expressionContext _localctx = new Common_value_expressionContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_common_value_expression);
		try {
			State = 1003;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1000; numeric_value_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1001; string_value_expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1002; Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_value_expressionContext : ParserRuleContext {
		public TermContext left;
		public TermContext right;
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(SqlParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(SqlParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(SqlParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(SqlParser.MINUS, i);
		}
		public Numeric_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNumeric_value_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNumeric_value_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_value_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_value_expressionContext numeric_value_expression() {
		Numeric_value_expressionContext _localctx = new Numeric_value_expressionContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_numeric_value_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005; _localctx.left = term();
			State = 1010;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 1006;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 1007; _localctx.right = term();
				}
				}
				State = 1012;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext left;
		public FactorContext right;
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public ITerminalNode[] MULTIPLY() { return GetTokens(SqlParser.MULTIPLY); }
		public ITerminalNode MULTIPLY(int i) {
			return GetToken(SqlParser.MULTIPLY, i);
		}
		public ITerminalNode[] DIVIDE() { return GetTokens(SqlParser.DIVIDE); }
		public ITerminalNode DIVIDE(int i) {
			return GetToken(SqlParser.DIVIDE, i);
		}
		public ITerminalNode[] MODULAR() { return GetTokens(SqlParser.MODULAR); }
		public ITerminalNode MODULAR(int i) {
			return GetToken(SqlParser.MODULAR, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013; _localctx.left = factor();
			State = 1018;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (MULTIPLY - 188)) | (1L << (DIVIDE - 188)) | (1L << (MODULAR - 188)))) != 0)) {
				{
				{
				State = 1014;
				_la = _input.La(1);
				if ( !(((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (MULTIPLY - 188)) | (1L << (DIVIDE - 188)) | (1L << (MODULAR - 188)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 1015; _localctx.right = factor();
				}
				}
				State = 1020;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public Numeric_primaryContext numeric_primary() {
			return GetRuleContext<Numeric_primaryContext>(0);
		}
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1022;
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1021; sign();
				}
			}

			State = 1024; numeric_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Numeric_value_expressionContext[] numeric_value_expression() {
			return GetRuleContexts<Numeric_value_expressionContext>();
		}
		public Numeric_value_expressionContext numeric_value_expression(int i) {
			return GetRuleContext<Numeric_value_expressionContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026; Match(LEFT_PAREN);
			State = 1027; numeric_value_expression();
			State = 1032;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1028; Match(COMMA);
				State = 1029; numeric_value_expression();
				}
				}
				State = 1034;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1035; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_primaryContext : ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return GetRuleContext<Value_expression_primaryContext>(0);
		}
		public ITerminalNode[] CAST_EXPRESSION() { return GetTokens(SqlParser.CAST_EXPRESSION); }
		public ITerminalNode CAST_EXPRESSION(int i) {
			return GetToken(SqlParser.CAST_EXPRESSION, i);
		}
		public Cast_targetContext[] cast_target() {
			return GetRuleContexts<Cast_targetContext>();
		}
		public Cast_targetContext cast_target(int i) {
			return GetRuleContext<Cast_targetContext>(i);
		}
		public Numeric_value_functionContext numeric_value_function() {
			return GetRuleContext<Numeric_value_functionContext>(0);
		}
		public Numeric_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNumeric_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNumeric_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_primaryContext numeric_primary() {
		Numeric_primaryContext _localctx = new Numeric_primaryContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_numeric_primary);
		int _la;
		try {
			State = 1046;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1037; value_expression_primary();
				State = 1042;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CAST_EXPRESSION) {
					{
					{
					State = 1038; Match(CAST_EXPRESSION);
					State = 1039; cast_target();
					}
					}
					State = 1044;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1045; numeric_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(SqlParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SqlParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			_la = _input.La(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_value_functionContext : ParserRuleContext {
		public Extract_expressionContext extract_expression() {
			return GetRuleContext<Extract_expressionContext>(0);
		}
		public Numeric_value_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_value_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNumeric_value_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNumeric_value_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_value_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_value_functionContext numeric_value_function() {
		Numeric_value_functionContext _localctx = new Numeric_value_functionContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_numeric_value_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1050; extract_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_expressionContext : ParserRuleContext {
		public Extract_fieldContext extract_field_string;
		public ITerminalNode EXTRACT() { return GetToken(SqlParser.EXTRACT, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ITerminalNode FROM() { return GetToken(SqlParser.FROM, 0); }
		public Extract_sourceContext extract_source() {
			return GetRuleContext<Extract_sourceContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Extract_fieldContext extract_field() {
			return GetRuleContext<Extract_fieldContext>(0);
		}
		public Extract_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterExtract_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitExtract_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtract_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extract_expressionContext extract_expression() {
		Extract_expressionContext _localctx = new Extract_expressionContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_extract_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052; Match(EXTRACT);
			State = 1053; Match(LEFT_PAREN);
			State = 1054; _localctx.extract_field_string = extract_field();
			State = 1055; Match(FROM);
			State = 1056; extract_source();
			State = 1057; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_fieldContext : ParserRuleContext {
		public Primary_datetime_fieldContext primary_datetime_field() {
			return GetRuleContext<Primary_datetime_fieldContext>(0);
		}
		public Time_zone_fieldContext time_zone_field() {
			return GetRuleContext<Time_zone_fieldContext>(0);
		}
		public Extended_datetime_fieldContext extended_datetime_field() {
			return GetRuleContext<Extended_datetime_fieldContext>(0);
		}
		public Extract_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterExtract_field(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitExtract_field(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtract_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extract_fieldContext extract_field() {
		Extract_fieldContext _localctx = new Extract_fieldContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_extract_field);
		try {
			State = 1062;
			switch (_input.La(1)) {
			case DAY:
			case HOUR:
			case MINUTE:
			case MONTH:
			case SECOND:
			case YEAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1059; primary_datetime_field();
				}
				break;
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1060; time_zone_field();
				}
				break;
			case CENTURY:
			case DECADE:
			case DOW:
			case DOY:
			case EPOCH:
			case ISODOW:
			case ISOYEAR:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case QUARTER:
			case WEEK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1061; extended_datetime_field();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_zone_fieldContext : ParserRuleContext {
		public ITerminalNode TIMEZONE() { return GetToken(SqlParser.TIMEZONE, 0); }
		public ITerminalNode TIMEZONE_HOUR() { return GetToken(SqlParser.TIMEZONE_HOUR, 0); }
		public ITerminalNode TIMEZONE_MINUTE() { return GetToken(SqlParser.TIMEZONE_MINUTE, 0); }
		public Time_zone_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_zone_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTime_zone_field(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTime_zone_field(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_zone_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_zone_fieldContext time_zone_field() {
		Time_zone_fieldContext _localctx = new Time_zone_fieldContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_time_zone_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1064;
			_la = _input.La(1);
			if ( !(((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & ((1L << (TIMEZONE - 120)) | (1L << (TIMEZONE_HOUR - 120)) | (1L << (TIMEZONE_MINUTE - 120)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_sourceContext : ParserRuleContext {
		public Column_referenceContext column_reference() {
			return GetRuleContext<Column_referenceContext>(0);
		}
		public Datetime_literalContext datetime_literal() {
			return GetRuleContext<Datetime_literalContext>(0);
		}
		public Extract_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterExtract_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitExtract_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtract_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extract_sourceContext extract_source() {
		Extract_sourceContext _localctx = new Extract_sourceContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_extract_source);
		try {
			State = 1068;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1066; column_reference();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1067; datetime_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_value_expressionContext : ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return GetRuleContext<Character_value_expressionContext>(0);
		}
		public String_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterString_value_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitString_value_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_value_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_value_expressionContext string_value_expression() {
		String_value_expressionContext _localctx = new String_value_expressionContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_string_value_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070; character_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_value_expressionContext : ParserRuleContext {
		public Character_factorContext[] character_factor() {
			return GetRuleContexts<Character_factorContext>();
		}
		public Character_factorContext character_factor(int i) {
			return GetRuleContext<Character_factorContext>(i);
		}
		public ITerminalNode[] CONCATENATION_OPERATOR() { return GetTokens(SqlParser.CONCATENATION_OPERATOR); }
		public ITerminalNode CONCATENATION_OPERATOR(int i) {
			return GetToken(SqlParser.CONCATENATION_OPERATOR, i);
		}
		public Character_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCharacter_value_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCharacter_value_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_value_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_value_expressionContext character_value_expression() {
		Character_value_expressionContext _localctx = new Character_value_expressionContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_character_value_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072; character_factor();
			State = 1077;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CONCATENATION_OPERATOR) {
				{
				{
				State = 1073; Match(CONCATENATION_OPERATOR);
				State = 1074; character_factor();
				}
				}
				State = 1079;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_factorContext : ParserRuleContext {
		public Character_primaryContext character_primary() {
			return GetRuleContext<Character_primaryContext>(0);
		}
		public Character_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCharacter_factor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCharacter_factor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_factorContext character_factor() {
		Character_factorContext _localctx = new Character_factorContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_character_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1080; character_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_primaryContext : ParserRuleContext {
		public Value_expression_primaryContext value_expression_primary() {
			return GetRuleContext<Value_expression_primaryContext>(0);
		}
		public String_value_functionContext string_value_function() {
			return GetRuleContext<String_value_functionContext>(0);
		}
		public Character_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCharacter_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCharacter_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_primaryContext character_primary() {
		Character_primaryContext _localctx = new Character_primaryContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_character_primary);
		try {
			State = 1084;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1082; value_expression_primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1083; string_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_value_functionContext : ParserRuleContext {
		public Trim_functionContext trim_function() {
			return GetRuleContext<Trim_functionContext>(0);
		}
		public String_value_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_value_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterString_value_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitString_value_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_value_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_value_functionContext string_value_function() {
		String_value_functionContext _localctx = new String_value_functionContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_string_value_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086; trim_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trim_functionContext : ParserRuleContext {
		public ITerminalNode TRIM() { return GetToken(SqlParser.TRIM, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Trim_operandsContext trim_operands() {
			return GetRuleContext<Trim_operandsContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Trim_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trim_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTrim_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTrim_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrim_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trim_functionContext trim_function() {
		Trim_functionContext _localctx = new Trim_functionContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_trim_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1088; Match(TRIM);
			State = 1089; Match(LEFT_PAREN);
			State = 1090; trim_operands();
			State = 1091; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trim_operandsContext : ParserRuleContext {
		public Character_value_expressionContext trim_character;
		public Character_value_expressionContext trim_source;
		public Character_value_expressionContext[] character_value_expression() {
			return GetRuleContexts<Character_value_expressionContext>();
		}
		public Character_value_expressionContext character_value_expression(int i) {
			return GetRuleContext<Character_value_expressionContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(SqlParser.FROM, 0); }
		public Trim_specificationContext trim_specification() {
			return GetRuleContext<Trim_specificationContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(SqlParser.COMMA, 0); }
		public Trim_operandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trim_operands; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTrim_operands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTrim_operands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrim_operands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trim_operandsContext trim_operands() {
		Trim_operandsContext _localctx = new Trim_operandsContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_trim_operands);
		int _la;
		try {
			State = 1107;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1100;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					State = 1094;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOTH) | (1L << LEADING) | (1L << TRAILING))) != 0)) {
						{
						State = 1093; trim_specification();
						}
					}

					State = 1097;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANY) | (1L << CASE) | (1L << CAST) | (1L << FALSE) | (1L << LEFT) | (1L << RIGHT) | (1L << SOME) | (1L << TRUE) | (1L << AVG) | (1L << BETWEEN) | (1L << BY) | (1L << CENTURY) | (1L << CHARACTER) | (1L << COLLECT) | (1L << COALESCE) | (1L << COLUMN) | (1L << COUNT) | (1L << CUBE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DAY - 64)) | (1L << (DEC - 64)) | (1L << (DECADE - 64)) | (1L << (DOW - 64)) | (1L << (DOY - 64)) | (1L << (DROP - 64)) | (1L << (EPOCH - 64)) | (1L << (EVERY - 64)) | (1L << (EXISTS - 64)) | (1L << (EXTERNAL - 64)) | (1L << (EXTRACT - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FORMAT - 64)) | (1L << (FUSION - 64)) | (1L << (GROUPING - 64)) | (1L << (HASH - 64)) | (1L << (INDEX - 64)) | (1L << (INSERT - 64)) | (1L << (INTERSECTION - 64)) | (1L << (ISODOW - 64)) | (1L << (ISOYEAR - 64)) | (1L << (LAST - 64)) | (1L << (LESS - 64)) | (1L << (LIST - 64)) | (1L << (LOCATION - 64)) | (1L << (MAX - 64)) | (1L << (MAXVALUE - 64)) | (1L << (MICROSECONDS - 64)) | (1L << (MILLENNIUM - 64)) | (1L << (MILLISECONDS - 64)) | (1L << (MIN - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NATIONAL - 64)) | (1L << (NULLIF - 64)) | (1L << (OVERWRITE - 64)) | (1L << (PARTITION - 64)) | (1L << (PARTITIONS - 64)) | (1L << (PRECISION - 64)) | (1L << (PURGE - 64)) | (1L << (QUARTER - 64)) | (1L << (RANGE - 64)) | (1L << (REGEXP - 64)) | (1L << (RLIKE - 64)) | (1L << (ROLLUP - 64)) | (1L << (SECOND - 64)) | (1L << (SET - 64)) | (1L << (SIMILAR - 64)) | (1L << (STDDEV_POP - 64)) | (1L << (STDDEV_SAMP - 64)) | (1L << (SUBPARTITION - 64)) | (1L << (SUM - 64)) | (1L << (TABLESPACE - 64)) | (1L << (THAN - 64)) | (1L << (TIMEZONE - 64)) | (1L << (TIMEZONE_HOUR - 64)) | (1L << (TIMEZONE_MINUTE - 64)) | (1L << (TRIM - 64)) | (1L << (TO - 64)) | (1L << (UNKNOWN - 64)) | (1L << (VALUES - 64)) | (1L << (VAR_SAMP - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (VAR_POP - 128)) | (1L << (VARYING - 128)) | (1L << (WEEK - 128)) | (1L << (YEAR - 128)) | (1L << (ZONE - 128)) | (1L << (BOOLEAN - 128)) | (1L << (BOOL - 128)) | (1L << (BIT - 128)) | (1L << (VARBIT - 128)) | (1L << (INT1 - 128)) | (1L << (INT2 - 128)) | (1L << (INT4 - 128)) | (1L << (INT8 - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT4 - 128)) | (1L << (FLOAT8 - 128)) | (1L << (REAL - 128)) | (1L << (FLOAT - 128)) | (1L << (DOUBLE - 128)) | (1L << (NUMERIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (CHAR - 128)) | (1L << (VARCHAR - 128)) | (1L << (NCHAR - 128)) | (1L << (NVARCHAR - 128)) | (1L << (DATE - 128)) | (1L << (TIME - 128)) | (1L << (TIMETZ - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (TIMESTAMPTZ - 128)) | (1L << (TEXT - 128)) | (1L << (VARBINARY - 128)) | (1L << (BLOB - 128)) | (1L << (BYTEA - 128)) | (1L << (INET4 - 128)) | (1L << (LEFT_PAREN - 128)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (NUMBER - 196)) | (1L << (REAL_NUMBER - 196)) | (1L << (Identifier - 196)) | (1L << (Character_String_Literal - 196)))) != 0)) {
						{
						State = 1096; _localctx.trim_character = character_value_expression();
						}
					}

					State = 1099; Match(FROM);
					}
					break;
				}
				State = 1102; _localctx.trim_source = character_value_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1103; _localctx.trim_source = character_value_expression();
				State = 1104; Match(COMMA);
				State = 1105; _localctx.trim_character = character_value_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trim_specificationContext : ParserRuleContext {
		public ITerminalNode LEADING() { return GetToken(SqlParser.LEADING, 0); }
		public ITerminalNode TRAILING() { return GetToken(SqlParser.TRAILING, 0); }
		public ITerminalNode BOTH() { return GetToken(SqlParser.BOTH, 0); }
		public Trim_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trim_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTrim_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTrim_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrim_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trim_specificationContext trim_specification() {
		Trim_specificationContext _localctx = new Trim_specificationContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_trim_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOTH) | (1L << LEADING) | (1L << TRAILING))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_value_expressionContext : ParserRuleContext {
		public Or_predicateContext or_predicate() {
			return GetRuleContext<Or_predicateContext>(0);
		}
		public Boolean_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBoolean_value_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBoolean_value_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_value_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_value_expressionContext boolean_value_expression() {
		Boolean_value_expressionContext _localctx = new Boolean_value_expressionContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_boolean_value_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1111; or_predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_predicateContext : ParserRuleContext {
		public And_predicateContext and_predicate() {
			return GetRuleContext<And_predicateContext>(0);
		}
		public ITerminalNode[] OR() { return GetTokens(SqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(SqlParser.OR, i);
		}
		public Or_predicateContext[] or_predicate() {
			return GetRuleContexts<Or_predicateContext>();
		}
		public Or_predicateContext or_predicate(int i) {
			return GetRuleContext<Or_predicateContext>(i);
		}
		public Or_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterOr_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitOr_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_predicateContext or_predicate() {
		Or_predicateContext _localctx = new Or_predicateContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_or_predicate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113; and_predicate();
			State = 1118;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,97,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1114; Match(OR);
					State = 1115; or_predicate();
					}
					} 
				}
				State = 1120;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,97,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_predicateContext : ParserRuleContext {
		public Boolean_factorContext boolean_factor() {
			return GetRuleContext<Boolean_factorContext>(0);
		}
		public ITerminalNode[] AND() { return GetTokens(SqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(SqlParser.AND, i);
		}
		public And_predicateContext[] and_predicate() {
			return GetRuleContexts<And_predicateContext>();
		}
		public And_predicateContext and_predicate(int i) {
			return GetRuleContext<And_predicateContext>(i);
		}
		public And_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterAnd_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitAnd_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_predicateContext and_predicate() {
		And_predicateContext _localctx = new And_predicateContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_and_predicate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121; boolean_factor();
			State = 1126;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,98,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1122; Match(AND);
					State = 1123; and_predicate();
					}
					} 
				}
				State = 1128;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,98,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_factorContext : ParserRuleContext {
		public Boolean_testContext boolean_test() {
			return GetRuleContext<Boolean_testContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(SqlParser.NOT, 0); }
		public Boolean_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBoolean_factor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBoolean_factor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_factorContext boolean_factor() {
		Boolean_factorContext _localctx = new Boolean_factorContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_boolean_factor);
		try {
			State = 1132;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1129; boolean_test();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1130; Match(NOT);
				State = 1131; boolean_test();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_testContext : ParserRuleContext {
		public Boolean_primaryContext boolean_primary() {
			return GetRuleContext<Boolean_primaryContext>(0);
		}
		public Is_clauseContext is_clause() {
			return GetRuleContext<Is_clauseContext>(0);
		}
		public Boolean_testContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_test; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBoolean_test(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBoolean_test(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_test(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_testContext boolean_test() {
		Boolean_testContext _localctx = new Boolean_testContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_boolean_test);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134; boolean_primary();
			State = 1136;
			_la = _input.La(1);
			if (_la==IS) {
				{
				State = 1135; is_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_clauseContext : ParserRuleContext {
		public Truth_valueContext t;
		public ITerminalNode IS() { return GetToken(SqlParser.IS, 0); }
		public Truth_valueContext truth_value() {
			return GetRuleContext<Truth_valueContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(SqlParser.NOT, 0); }
		public Is_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterIs_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitIs_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIs_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Is_clauseContext is_clause() {
		Is_clauseContext _localctx = new Is_clauseContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_is_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138; Match(IS);
			State = 1140;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 1139; Match(NOT);
				}
			}

			State = 1142; _localctx.t = truth_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truth_valueContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(SqlParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(SqlParser.FALSE, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(SqlParser.UNKNOWN, 0); }
		public Truth_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truth_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTruth_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTruth_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruth_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Truth_valueContext truth_value() {
		Truth_valueContext _localctx = new Truth_valueContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_truth_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1144;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_primaryContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Boolean_predicandContext boolean_predicand() {
			return GetRuleContext<Boolean_predicandContext>(0);
		}
		public Boolean_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBoolean_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBoolean_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_primaryContext boolean_primary() {
		Boolean_primaryContext _localctx = new Boolean_primaryContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_boolean_primary);
		try {
			State = 1148;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1146; predicate();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1147; boolean_predicand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_predicandContext : ParserRuleContext {
		public Parenthesized_boolean_value_expressionContext parenthesized_boolean_value_expression() {
			return GetRuleContext<Parenthesized_boolean_value_expressionContext>(0);
		}
		public Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() {
			return GetRuleContext<Nonparenthesized_value_expression_primaryContext>(0);
		}
		public Boolean_predicandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_predicand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBoolean_predicand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBoolean_predicand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_predicand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_predicandContext boolean_predicand() {
		Boolean_predicandContext _localctx = new Boolean_predicandContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_boolean_predicand);
		try {
			State = 1152;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1150; parenthesized_boolean_value_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1151; nonparenthesized_value_expression_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_boolean_value_expressionContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Boolean_value_expressionContext boolean_value_expression() {
			return GetRuleContext<Boolean_value_expressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Parenthesized_boolean_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_boolean_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterParenthesized_boolean_value_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitParenthesized_boolean_value_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized_boolean_value_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_boolean_value_expressionContext parenthesized_boolean_value_expression() {
		Parenthesized_boolean_value_expressionContext _localctx = new Parenthesized_boolean_value_expressionContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_parenthesized_boolean_value_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1154; Match(LEFT_PAREN);
			State = 1155; boolean_value_expression();
			State = 1156; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_value_expressionContext : ParserRuleContext {
		public Row_value_special_caseContext row_value_special_case() {
			return GetRuleContext<Row_value_special_caseContext>(0);
		}
		public Explicit_row_value_constructorContext explicit_row_value_constructor() {
			return GetRuleContext<Explicit_row_value_constructorContext>(0);
		}
		public Row_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRow_value_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRow_value_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_value_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_value_expressionContext row_value_expression() {
		Row_value_expressionContext _localctx = new Row_value_expressionContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_row_value_expression);
		try {
			State = 1160;
			switch (_input.La(1)) {
			case ANY:
			case CASE:
			case CAST:
			case FALSE:
			case LEFT:
			case RIGHT:
			case SOME:
			case TRUE:
			case AVG:
			case BETWEEN:
			case BY:
			case CENTURY:
			case CHARACTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COUNT:
			case CUBE:
			case DAY:
			case DEC:
			case DECADE:
			case DOW:
			case DOY:
			case DROP:
			case EPOCH:
			case EVERY:
			case EXISTS:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INDEX:
			case INSERT:
			case INTERSECTION:
			case ISODOW:
			case ISOYEAR:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NULLIF:
			case OVERWRITE:
			case PARTITION:
			case PARTITIONS:
			case PRECISION:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGEXP:
			case RLIKE:
			case ROLLUP:
			case SECOND:
			case SET:
			case SIMILAR:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case UNKNOWN:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case WEEK:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case LEFT_PAREN:
			case NUMBER:
			case REAL_NUMBER:
			case Identifier:
			case Character_String_Literal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1158; row_value_special_case();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1159; explicit_row_value_constructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_value_special_caseContext : ParserRuleContext {
		public Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() {
			return GetRuleContext<Nonparenthesized_value_expression_primaryContext>(0);
		}
		public Row_value_special_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_value_special_case; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRow_value_special_case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRow_value_special_case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_value_special_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_value_special_caseContext row_value_special_case() {
		Row_value_special_caseContext _localctx = new Row_value_special_caseContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_row_value_special_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162; nonparenthesized_value_expression_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_row_value_constructorContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(SqlParser.NULL, 0); }
		public Explicit_row_value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_row_value_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterExplicit_row_value_constructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitExplicit_row_value_constructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_row_value_constructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_row_value_constructorContext explicit_row_value_constructor() {
		Explicit_row_value_constructorContext _localctx = new Explicit_row_value_constructorContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_explicit_row_value_constructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1164; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_value_predicandContext : ParserRuleContext {
		public Row_value_special_caseContext row_value_special_case() {
			return GetRuleContext<Row_value_special_caseContext>(0);
		}
		public Row_value_constructor_predicandContext row_value_constructor_predicand() {
			return GetRuleContext<Row_value_constructor_predicandContext>(0);
		}
		public Row_value_predicandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_value_predicand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRow_value_predicand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRow_value_predicand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_value_predicand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_value_predicandContext row_value_predicand() {
		Row_value_predicandContext _localctx = new Row_value_predicandContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_row_value_predicand);
		try {
			State = 1168;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1166; row_value_special_case();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1167; row_value_constructor_predicand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_value_constructor_predicandContext : ParserRuleContext {
		public Common_value_expressionContext common_value_expression() {
			return GetRuleContext<Common_value_expressionContext>(0);
		}
		public Boolean_predicandContext boolean_predicand() {
			return GetRuleContext<Boolean_predicandContext>(0);
		}
		public Row_value_constructor_predicandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_value_constructor_predicand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRow_value_constructor_predicand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRow_value_constructor_predicand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_value_constructor_predicand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_value_constructor_predicandContext row_value_constructor_predicand() {
		Row_value_constructor_predicandContext _localctx = new Row_value_constructor_predicandContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_row_value_constructor_predicand);
		try {
			State = 1172;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1170; common_value_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1171; boolean_predicand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_expressionContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Groupby_clauseContext groupby_clause() {
			return GetRuleContext<Groupby_clauseContext>(0);
		}
		public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		public Orderby_clauseContext orderby_clause() {
			return GetRuleContext<Orderby_clauseContext>(0);
		}
		public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		public Table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTable_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTable_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_expressionContext table_expression() {
		Table_expressionContext _localctx = new Table_expressionContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1174; from_clause();
			State = 1176;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 1175; where_clause();
				}
			}

			State = 1179;
			_la = _input.La(1);
			if (_la==GROUP) {
				{
				State = 1178; groupby_clause();
				}
			}

			State = 1182;
			_la = _input.La(1);
			if (_la==HAVING) {
				{
				State = 1181; having_clause();
				}
			}

			State = 1185;
			_la = _input.La(1);
			if (_la==ORDER) {
				{
				State = 1184; orderby_clause();
				}
			}

			State = 1188;
			_la = _input.La(1);
			if (_la==LIMIT) {
				{
				State = 1187; limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(SqlParser.FROM, 0); }
		public Table_reference_listContext table_reference_list() {
			return GetRuleContext<Table_reference_listContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190; Match(FROM);
			State = 1191; table_reference_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_reference_listContext : ParserRuleContext {
		public Table_referenceContext[] table_reference() {
			return GetRuleContexts<Table_referenceContext>();
		}
		public Table_referenceContext table_reference(int i) {
			return GetRuleContext<Table_referenceContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Table_reference_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_reference_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTable_reference_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTable_reference_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_reference_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_reference_listContext table_reference_list() {
		Table_reference_listContext _localctx = new Table_reference_listContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_table_reference_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193; table_reference();
			State = 1198;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1194; Match(COMMA);
				State = 1195; table_reference();
				}
				}
				State = 1200;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_referenceContext : ParserRuleContext {
		public Joined_tableContext joined_table() {
			return GetRuleContext<Joined_tableContext>(0);
		}
		public Table_primaryContext table_primary() {
			return GetRuleContext<Table_primaryContext>(0);
		}
		public Table_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTable_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTable_reference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_referenceContext table_reference() {
		Table_referenceContext _localctx = new Table_referenceContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_table_reference);
		try {
			State = 1203;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1201; joined_table();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1202; table_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Joined_tableContext : ParserRuleContext {
		public Table_primaryContext table_primary() {
			return GetRuleContext<Table_primaryContext>(0);
		}
		public Joined_table_primaryContext[] joined_table_primary() {
			return GetRuleContexts<Joined_table_primaryContext>();
		}
		public Joined_table_primaryContext joined_table_primary(int i) {
			return GetRuleContext<Joined_table_primaryContext>(i);
		}
		public Joined_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joined_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterJoined_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitJoined_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoined_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Joined_tableContext joined_table() {
		Joined_tableContext _localctx = new Joined_tableContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_joined_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205; table_primary();
			State = 1207;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1206; joined_table_primary();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1209;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,114,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Joined_table_primaryContext : ParserRuleContext {
		public Table_primaryContext right;
		public Join_typeContext t;
		public Join_specificationContext s;
		public ITerminalNode CROSS() { return GetToken(SqlParser.CROSS, 0); }
		public ITerminalNode JOIN() { return GetToken(SqlParser.JOIN, 0); }
		public Table_primaryContext table_primary() {
			return GetRuleContext<Table_primaryContext>(0);
		}
		public Join_specificationContext join_specification() {
			return GetRuleContext<Join_specificationContext>(0);
		}
		public Join_typeContext join_type() {
			return GetRuleContext<Join_typeContext>(0);
		}
		public ITerminalNode NATURAL() { return GetToken(SqlParser.NATURAL, 0); }
		public ITerminalNode UNION() { return GetToken(SqlParser.UNION, 0); }
		public Joined_table_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joined_table_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterJoined_table_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitJoined_table_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoined_table_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Joined_table_primaryContext joined_table_primary() {
		Joined_table_primaryContext _localctx = new Joined_table_primaryContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_joined_table_primary);
		int _la;
		try {
			State = 1230;
			switch (_input.La(1)) {
			case CROSS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1211; Match(CROSS);
				State = 1212; Match(JOIN);
				State = 1213; _localctx.right = table_primary();
				}
				break;
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1215;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FULL) | (1L << INNER) | (1L << LEFT) | (1L << RIGHT))) != 0)) {
					{
					State = 1214; _localctx.t = join_type();
					}
				}

				State = 1217; Match(JOIN);
				State = 1218; _localctx.right = table_primary();
				State = 1219; _localctx.s = join_specification();
				}
				break;
			case NATURAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1221; Match(NATURAL);
				State = 1223;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FULL) | (1L << INNER) | (1L << LEFT) | (1L << RIGHT))) != 0)) {
					{
					State = 1222; _localctx.t = join_type();
					}
				}

				State = 1225; Match(JOIN);
				State = 1226; _localctx.right = table_primary();
				}
				break;
			case UNION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1227; Match(UNION);
				State = 1228; Match(JOIN);
				State = 1229; _localctx.right = table_primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cross_joinContext : ParserRuleContext {
		public Table_primaryContext r;
		public ITerminalNode CROSS() { return GetToken(SqlParser.CROSS, 0); }
		public ITerminalNode JOIN() { return GetToken(SqlParser.JOIN, 0); }
		public Table_primaryContext table_primary() {
			return GetRuleContext<Table_primaryContext>(0);
		}
		public Cross_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cross_join; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCross_join(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCross_join(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCross_join(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cross_joinContext cross_join() {
		Cross_joinContext _localctx = new Cross_joinContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_cross_join);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232; Match(CROSS);
			State = 1233; Match(JOIN);
			State = 1234; _localctx.r = table_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_joinContext : ParserRuleContext {
		public Join_typeContext t;
		public Table_primaryContext r;
		public Join_specificationContext s;
		public ITerminalNode JOIN() { return GetToken(SqlParser.JOIN, 0); }
		public Table_primaryContext table_primary() {
			return GetRuleContext<Table_primaryContext>(0);
		}
		public Join_specificationContext join_specification() {
			return GetRuleContext<Join_specificationContext>(0);
		}
		public Join_typeContext join_type() {
			return GetRuleContext<Join_typeContext>(0);
		}
		public Qualified_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_join; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterQualified_join(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitQualified_join(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_join(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_joinContext qualified_join() {
		Qualified_joinContext _localctx = new Qualified_joinContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_qualified_join);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FULL) | (1L << INNER) | (1L << LEFT) | (1L << RIGHT))) != 0)) {
				{
				State = 1236; _localctx.t = join_type();
				}
			}

			State = 1239; Match(JOIN);
			State = 1240; _localctx.r = table_primary();
			State = 1241; _localctx.s = join_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Natural_joinContext : ParserRuleContext {
		public Join_typeContext t;
		public Table_primaryContext r;
		public ITerminalNode NATURAL() { return GetToken(SqlParser.NATURAL, 0); }
		public ITerminalNode JOIN() { return GetToken(SqlParser.JOIN, 0); }
		public Table_primaryContext table_primary() {
			return GetRuleContext<Table_primaryContext>(0);
		}
		public Join_typeContext join_type() {
			return GetRuleContext<Join_typeContext>(0);
		}
		public Natural_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_natural_join; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNatural_join(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNatural_join(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNatural_join(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Natural_joinContext natural_join() {
		Natural_joinContext _localctx = new Natural_joinContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_natural_join);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243; Match(NATURAL);
			State = 1245;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FULL) | (1L << INNER) | (1L << LEFT) | (1L << RIGHT))) != 0)) {
				{
				State = 1244; _localctx.t = join_type();
				}
			}

			State = 1247; Match(JOIN);
			State = 1248; _localctx.r = table_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_joinContext : ParserRuleContext {
		public Table_primaryContext r;
		public ITerminalNode UNION() { return GetToken(SqlParser.UNION, 0); }
		public ITerminalNode JOIN() { return GetToken(SqlParser.JOIN, 0); }
		public Table_primaryContext table_primary() {
			return GetRuleContext<Table_primaryContext>(0);
		}
		public Union_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_join; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterUnion_join(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitUnion_join(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_join(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Union_joinContext union_join() {
		Union_joinContext _localctx = new Union_joinContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_union_join);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250; Match(UNION);
			State = 1251; Match(JOIN);
			State = 1252; _localctx.r = table_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_typeContext : ParserRuleContext {
		public Outer_join_typeContext t;
		public ITerminalNode INNER() { return GetToken(SqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return GetRuleContext<Outer_join_typeContext>(0);
		}
		public Join_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_typeContext join_type() {
		Join_typeContext _localctx = new Join_typeContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_join_type);
		try {
			State = 1256;
			switch (_input.La(1)) {
			case INNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1254; Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1255; _localctx.t = outer_join_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Outer_join_typeContext : ParserRuleContext {
		public Outer_join_type_part2Context outer_join_type_part2() {
			return GetRuleContext<Outer_join_type_part2Context>(0);
		}
		public ITerminalNode OUTER() { return GetToken(SqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outer_join_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterOuter_join_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitOuter_join_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuter_join_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Outer_join_typeContext outer_join_type() {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_outer_join_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258; outer_join_type_part2();
			State = 1260;
			_la = _input.La(1);
			if (_la==OUTER) {
				{
				State = 1259; Match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Outer_join_type_part2Context : ParserRuleContext {
		public ITerminalNode LEFT() { return GetToken(SqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(SqlParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(SqlParser.FULL, 0); }
		public Outer_join_type_part2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outer_join_type_part2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterOuter_join_type_part2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitOuter_join_type_part2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuter_join_type_part2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Outer_join_type_part2Context outer_join_type_part2() {
		Outer_join_type_part2Context _localctx = new Outer_join_type_part2Context(_ctx, State);
		EnterRule(_localctx, 250, RULE_outer_join_type_part2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1262;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FULL) | (1L << LEFT) | (1L << RIGHT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_specificationContext : ParserRuleContext {
		public Join_conditionContext join_condition() {
			return GetRuleContext<Join_conditionContext>(0);
		}
		public Named_columns_joinContext named_columns_join() {
			return GetRuleContext<Named_columns_joinContext>(0);
		}
		public Join_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_specificationContext join_specification() {
		Join_specificationContext _localctx = new Join_specificationContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_join_specification);
		try {
			State = 1266;
			switch (_input.La(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1264; join_condition();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1265; named_columns_join();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_conditionContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(SqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Join_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_conditionContext join_condition() {
		Join_conditionContext _localctx = new Join_conditionContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_join_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1268; Match(ON);
			State = 1269; search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_columns_joinContext : ParserRuleContext {
		public Column_reference_listContext f;
		public ITerminalNode USING() { return GetToken(SqlParser.USING, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Column_reference_listContext column_reference_list() {
			return GetRuleContext<Column_reference_listContext>(0);
		}
		public Named_columns_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_columns_join; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNamed_columns_join(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNamed_columns_join(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_columns_join(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_columns_joinContext named_columns_join() {
		Named_columns_joinContext _localctx = new Named_columns_joinContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_named_columns_join);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271; Match(USING);
			State = 1272; Match(LEFT_PAREN);
			State = 1273; _localctx.f = column_reference_list();
			State = 1274; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_primaryContext : ParserRuleContext {
		public IdentifierContext alias;
		public IdentifierContext name;
		public Table_or_query_nameContext table_or_query_name() {
			return GetRuleContext<Table_or_query_nameContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(SqlParser.AS, 0); }
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Table_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTable_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTable_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_primaryContext table_primary() {
		Table_primaryContext _localctx = new Table_primaryContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_table_primary);
		int _la;
		try {
			State = 1300;
			switch (_input.La(1)) {
			case AVG:
			case BETWEEN:
			case BY:
			case CENTURY:
			case CHARACTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COUNT:
			case CUBE:
			case DAY:
			case DEC:
			case DECADE:
			case DOW:
			case DOY:
			case DROP:
			case EPOCH:
			case EVERY:
			case EXISTS:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INDEX:
			case INSERT:
			case INTERSECTION:
			case ISODOW:
			case ISOYEAR:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NULLIF:
			case OVERWRITE:
			case PARTITION:
			case PARTITIONS:
			case PRECISION:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGEXP:
			case RLIKE:
			case ROLLUP:
			case SECOND:
			case SET:
			case SIMILAR:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case UNKNOWN:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case WEEK:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1276; table_or_query_name();
				State = 1281;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << AVG) | (1L << BETWEEN) | (1L << BY) | (1L << CENTURY) | (1L << CHARACTER) | (1L << COLLECT) | (1L << COALESCE) | (1L << COLUMN) | (1L << COUNT) | (1L << CUBE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DAY - 64)) | (1L << (DEC - 64)) | (1L << (DECADE - 64)) | (1L << (DOW - 64)) | (1L << (DOY - 64)) | (1L << (DROP - 64)) | (1L << (EPOCH - 64)) | (1L << (EVERY - 64)) | (1L << (EXISTS - 64)) | (1L << (EXTERNAL - 64)) | (1L << (EXTRACT - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FORMAT - 64)) | (1L << (FUSION - 64)) | (1L << (GROUPING - 64)) | (1L << (HASH - 64)) | (1L << (INDEX - 64)) | (1L << (INSERT - 64)) | (1L << (INTERSECTION - 64)) | (1L << (ISODOW - 64)) | (1L << (ISOYEAR - 64)) | (1L << (LAST - 64)) | (1L << (LESS - 64)) | (1L << (LIST - 64)) | (1L << (LOCATION - 64)) | (1L << (MAX - 64)) | (1L << (MAXVALUE - 64)) | (1L << (MICROSECONDS - 64)) | (1L << (MILLENNIUM - 64)) | (1L << (MILLISECONDS - 64)) | (1L << (MIN - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NATIONAL - 64)) | (1L << (NULLIF - 64)) | (1L << (OVERWRITE - 64)) | (1L << (PARTITION - 64)) | (1L << (PARTITIONS - 64)) | (1L << (PRECISION - 64)) | (1L << (PURGE - 64)) | (1L << (QUARTER - 64)) | (1L << (RANGE - 64)) | (1L << (REGEXP - 64)) | (1L << (RLIKE - 64)) | (1L << (ROLLUP - 64)) | (1L << (SECOND - 64)) | (1L << (SET - 64)) | (1L << (SIMILAR - 64)) | (1L << (STDDEV_POP - 64)) | (1L << (STDDEV_SAMP - 64)) | (1L << (SUBPARTITION - 64)) | (1L << (SUM - 64)) | (1L << (TABLESPACE - 64)) | (1L << (THAN - 64)) | (1L << (TIMEZONE - 64)) | (1L << (TIMEZONE_HOUR - 64)) | (1L << (TIMEZONE_MINUTE - 64)) | (1L << (TRIM - 64)) | (1L << (TO - 64)) | (1L << (UNKNOWN - 64)) | (1L << (VALUES - 64)) | (1L << (VAR_SAMP - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (VAR_POP - 128)) | (1L << (VARYING - 128)) | (1L << (WEEK - 128)) | (1L << (YEAR - 128)) | (1L << (ZONE - 128)) | (1L << (BOOLEAN - 128)) | (1L << (BOOL - 128)) | (1L << (BIT - 128)) | (1L << (VARBIT - 128)) | (1L << (INT1 - 128)) | (1L << (INT2 - 128)) | (1L << (INT4 - 128)) | (1L << (INT8 - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT4 - 128)) | (1L << (FLOAT8 - 128)) | (1L << (REAL - 128)) | (1L << (FLOAT - 128)) | (1L << (DOUBLE - 128)) | (1L << (NUMERIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (CHAR - 128)) | (1L << (VARCHAR - 128)) | (1L << (NCHAR - 128)) | (1L << (NVARCHAR - 128)) | (1L << (DATE - 128)) | (1L << (TIME - 128)) | (1L << (TIMETZ - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (TIMESTAMPTZ - 128)) | (1L << (TEXT - 128)) | (1L << (VARBINARY - 128)) | (1L << (BLOB - 128)) | (1L << (BYTEA - 128)) | (1L << (INET4 - 128)))) != 0) || _la==Identifier) {
					{
					State = 1278;
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1277; Match(AS);
						}
					}

					State = 1280; _localctx.alias = identifier();
					}
				}

				State = 1287;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 1283; Match(LEFT_PAREN);
					State = 1284; column_name_list();
					State = 1285; Match(RIGHT_PAREN);
					}
				}

				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1289; derived_table();
				State = 1291;
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 1290; Match(AS);
					}
				}

				State = 1293; _localctx.name = identifier();
				State = 1298;
				_la = _input.La(1);
				if (_la==LEFT_PAREN) {
					{
					State = 1294; Match(LEFT_PAREN);
					State = 1295; column_name_list();
					State = 1296; Match(RIGHT_PAREN);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1302; identifier();
			State = 1307;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1303; Match(COMMA);
				State = 1304; identifier();
				}
				}
				State = 1309;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return GetRuleContext<Table_subqueryContext>(0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerived_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_derived_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1310; table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(SqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1312; Match(WHERE);
			State = 1313; search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		public Value_expressionContext value_expression() {
			return GetRuleContext<Value_expressionContext>(0);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_search_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1315; value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Groupby_clauseContext : ParserRuleContext {
		public Grouping_element_listContext g;
		public ITerminalNode GROUP() { return GetToken(SqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(SqlParser.BY, 0); }
		public Grouping_element_listContext grouping_element_list() {
			return GetRuleContext<Grouping_element_listContext>(0);
		}
		public Groupby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterGroupby_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitGroupby_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Groupby_clauseContext groupby_clause() {
		Groupby_clauseContext _localctx = new Groupby_clauseContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_groupby_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1317; Match(GROUP);
			State = 1318; Match(BY);
			State = 1319; _localctx.g = grouping_element_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_element_listContext : ParserRuleContext {
		public Grouping_elementContext[] grouping_element() {
			return GetRuleContexts<Grouping_elementContext>();
		}
		public Grouping_elementContext grouping_element(int i) {
			return GetRuleContext<Grouping_elementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Grouping_element_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_element_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterGrouping_element_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitGrouping_element_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_element_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_element_listContext grouping_element_list() {
		Grouping_element_listContext _localctx = new Grouping_element_listContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_grouping_element_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1321; grouping_element();
			State = 1326;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1322; Match(COMMA);
				State = 1323; grouping_element();
				}
				}
				State = 1328;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_elementContext : ParserRuleContext {
		public Rollup_listContext rollup_list() {
			return GetRuleContext<Rollup_listContext>(0);
		}
		public Cube_listContext cube_list() {
			return GetRuleContext<Cube_listContext>(0);
		}
		public Empty_grouping_setContext empty_grouping_set() {
			return GetRuleContext<Empty_grouping_setContext>(0);
		}
		public Ordinary_grouping_setContext ordinary_grouping_set() {
			return GetRuleContext<Ordinary_grouping_setContext>(0);
		}
		public Grouping_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterGrouping_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitGrouping_element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_elementContext grouping_element() {
		Grouping_elementContext _localctx = new Grouping_elementContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_grouping_element);
		try {
			State = 1333;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1329; rollup_list();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1330; cube_list();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1331; empty_grouping_set();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1332; ordinary_grouping_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordinary_grouping_setContext : ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return GetRuleContext<Row_value_predicandContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Row_value_predicand_listContext row_value_predicand_list() {
			return GetRuleContext<Row_value_predicand_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Ordinary_grouping_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinary_grouping_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterOrdinary_grouping_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitOrdinary_grouping_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdinary_grouping_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordinary_grouping_setContext ordinary_grouping_set() {
		Ordinary_grouping_setContext _localctx = new Ordinary_grouping_setContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_ordinary_grouping_set);
		try {
			State = 1340;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,132,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1335; row_value_predicand();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1336; Match(LEFT_PAREN);
				State = 1337; row_value_predicand_list();
				State = 1338; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordinary_grouping_set_listContext : ParserRuleContext {
		public Ordinary_grouping_setContext[] ordinary_grouping_set() {
			return GetRuleContexts<Ordinary_grouping_setContext>();
		}
		public Ordinary_grouping_setContext ordinary_grouping_set(int i) {
			return GetRuleContext<Ordinary_grouping_setContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Ordinary_grouping_set_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordinary_grouping_set_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterOrdinary_grouping_set_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitOrdinary_grouping_set_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdinary_grouping_set_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
		Ordinary_grouping_set_listContext _localctx = new Ordinary_grouping_set_listContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_ordinary_grouping_set_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342; ordinary_grouping_set();
			State = 1347;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1343; Match(COMMA);
				State = 1344; ordinary_grouping_set();
				}
				}
				State = 1349;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_listContext : ParserRuleContext {
		public Ordinary_grouping_set_listContext c;
		public ITerminalNode ROLLUP() { return GetToken(SqlParser.ROLLUP, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return GetRuleContext<Ordinary_grouping_set_listContext>(0);
		}
		public Rollup_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRollup_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRollup_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollup_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_listContext rollup_list() {
		Rollup_listContext _localctx = new Rollup_listContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_rollup_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350; Match(ROLLUP);
			State = 1351; Match(LEFT_PAREN);
			State = 1352; _localctx.c = ordinary_grouping_set_list();
			State = 1353; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_listContext : ParserRuleContext {
		public Ordinary_grouping_set_listContext c;
		public ITerminalNode CUBE() { return GetToken(SqlParser.CUBE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return GetRuleContext<Ordinary_grouping_set_listContext>(0);
		}
		public Cube_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterCube_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitCube_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCube_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cube_listContext cube_list() {
		Cube_listContext _localctx = new Cube_listContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_cube_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1355; Match(CUBE);
			State = 1356; Match(LEFT_PAREN);
			State = 1357; _localctx.c = ordinary_grouping_set_list();
			State = 1358; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_grouping_setContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_grouping_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterEmpty_grouping_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitEmpty_grouping_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_grouping_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_grouping_setContext empty_grouping_set() {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_empty_grouping_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360; Match(LEFT_PAREN);
			State = 1361; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_clauseContext : ParserRuleContext {
		public ITerminalNode HAVING() { return GetToken(SqlParser.HAVING, 0); }
		public Boolean_value_expressionContext boolean_value_expression() {
			return GetRuleContext<Boolean_value_expressionContext>(0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterHaving_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitHaving_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Having_clauseContext having_clause() {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_having_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1363; Match(HAVING);
			State = 1364; boolean_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_value_predicand_listContext : ParserRuleContext {
		public Row_value_predicandContext[] row_value_predicand() {
			return GetRuleContexts<Row_value_predicandContext>();
		}
		public Row_value_predicandContext row_value_predicand(int i) {
			return GetRuleContext<Row_value_predicandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Row_value_predicand_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_value_predicand_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRow_value_predicand_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRow_value_predicand_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_value_predicand_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_value_predicand_listContext row_value_predicand_list() {
		Row_value_predicand_listContext _localctx = new Row_value_predicand_listContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_row_value_predicand_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1366; row_value_predicand();
			State = 1371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1367; Match(COMMA);
				State = 1368; row_value_predicand();
				}
				}
				State = 1373;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public Query_expression_bodyContext query_expression_body() {
			return GetRuleContext<Query_expression_bodyContext>(0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_query_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1374; query_expression_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expression_bodyContext : ParserRuleContext {
		public Non_join_query_expressionContext non_join_query_expression() {
			return GetRuleContext<Non_join_query_expressionContext>(0);
		}
		public Joined_tableContext joined_table() {
			return GetRuleContext<Joined_tableContext>(0);
		}
		public Query_expression_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expression_bodyContext query_expression_body() {
		Query_expression_bodyContext _localctx = new Query_expression_bodyContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_query_expression_body);
		try {
			State = 1378;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1376; non_join_query_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1377; joined_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_join_query_expressionContext : ParserRuleContext {
		public Non_join_query_termContext non_join_query_term() {
			return GetRuleContext<Non_join_query_termContext>(0);
		}
		public Joined_tableContext joined_table() {
			return GetRuleContext<Joined_tableContext>(0);
		}
		public Query_termContext[] query_term() {
			return GetRuleContexts<Query_termContext>();
		}
		public Query_termContext query_term(int i) {
			return GetRuleContext<Query_termContext>(i);
		}
		public ITerminalNode[] UNION() { return GetTokens(SqlParser.UNION); }
		public ITerminalNode UNION(int i) {
			return GetToken(SqlParser.UNION, i);
		}
		public ITerminalNode[] EXCEPT() { return GetTokens(SqlParser.EXCEPT); }
		public ITerminalNode EXCEPT(int i) {
			return GetToken(SqlParser.EXCEPT, i);
		}
		public ITerminalNode[] ALL() { return GetTokens(SqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(SqlParser.ALL, i);
		}
		public ITerminalNode[] DISTINCT() { return GetTokens(SqlParser.DISTINCT); }
		public ITerminalNode DISTINCT(int i) {
			return GetToken(SqlParser.DISTINCT, i);
		}
		public Non_join_query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_join_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNon_join_query_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNon_join_query_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_join_query_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_join_query_expressionContext non_join_query_expression() {
		Non_join_query_expressionContext _localctx = new Non_join_query_expressionContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_non_join_query_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1388;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				State = 1380; non_join_query_term();
				}
				break;

			case 2:
				{
				State = 1381; joined_table();
				State = 1382;
				_la = _input.La(1);
				if ( !(_la==EXCEPT || _la==UNION) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 1384;
				_la = _input.La(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 1383;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
				}

				State = 1386; query_term();
				}
				break;
			}
			State = 1397;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EXCEPT || _la==UNION) {
				{
				{
				State = 1390;
				_la = _input.La(1);
				if ( !(_la==EXCEPT || _la==UNION) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 1392;
				_la = _input.La(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 1391;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
				}

				State = 1394; query_term();
				}
				}
				State = 1399;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_termContext : ParserRuleContext {
		public Non_join_query_termContext non_join_query_term() {
			return GetRuleContext<Non_join_query_termContext>(0);
		}
		public Joined_tableContext joined_table() {
			return GetRuleContext<Joined_tableContext>(0);
		}
		public Query_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_termContext query_term() {
		Query_termContext _localctx = new Query_termContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_query_term);
		try {
			State = 1402;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1400; non_join_query_term();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1401; joined_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_join_query_termContext : ParserRuleContext {
		public Non_join_query_primaryContext non_join_query_primary() {
			return GetRuleContext<Non_join_query_primaryContext>(0);
		}
		public Joined_tableContext joined_table() {
			return GetRuleContext<Joined_tableContext>(0);
		}
		public ITerminalNode[] INTERSECT() { return GetTokens(SqlParser.INTERSECT); }
		public ITerminalNode INTERSECT(int i) {
			return GetToken(SqlParser.INTERSECT, i);
		}
		public Query_primaryContext[] query_primary() {
			return GetRuleContexts<Query_primaryContext>();
		}
		public Query_primaryContext query_primary(int i) {
			return GetRuleContext<Query_primaryContext>(i);
		}
		public ITerminalNode[] ALL() { return GetTokens(SqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(SqlParser.ALL, i);
		}
		public ITerminalNode[] DISTINCT() { return GetTokens(SqlParser.DISTINCT); }
		public ITerminalNode DISTINCT(int i) {
			return GetToken(SqlParser.DISTINCT, i);
		}
		public Non_join_query_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_join_query_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNon_join_query_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNon_join_query_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_join_query_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_join_query_termContext non_join_query_term() {
		Non_join_query_termContext _localctx = new Non_join_query_termContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_non_join_query_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				State = 1404; non_join_query_primary();
				}
				break;

			case 2:
				{
				State = 1405; joined_table();
				State = 1406; Match(INTERSECT);
				State = 1408;
				_la = _input.La(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 1407;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
				}

				State = 1410; query_primary();
				}
				break;
			}
			State = 1421;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==INTERSECT) {
				{
				{
				State = 1414; Match(INTERSECT);
				State = 1416;
				_la = _input.La(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 1415;
					_la = _input.La(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
				}

				State = 1418; query_primary();
				}
				}
				State = 1423;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_primaryContext : ParserRuleContext {
		public Non_join_query_primaryContext non_join_query_primary() {
			return GetRuleContext<Non_join_query_primaryContext>(0);
		}
		public Joined_tableContext joined_table() {
			return GetRuleContext<Joined_tableContext>(0);
		}
		public Query_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_primaryContext query_primary() {
		Query_primaryContext _localctx = new Query_primaryContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_query_primary);
		try {
			State = 1426;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1424; non_join_query_primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1425; joined_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_join_query_primaryContext : ParserRuleContext {
		public Simple_tableContext simple_table() {
			return GetRuleContext<Simple_tableContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Non_join_query_expressionContext non_join_query_expression() {
			return GetRuleContext<Non_join_query_expressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Non_join_query_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_join_query_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNon_join_query_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNon_join_query_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_join_query_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_join_query_primaryContext non_join_query_primary() {
		Non_join_query_primaryContext _localctx = new Non_join_query_primaryContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_non_join_query_primary);
		try {
			State = 1433;
			switch (_input.La(1)) {
			case SELECT:
			case TABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1428; simple_table();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1429; Match(LEFT_PAREN);
				State = 1430; non_join_query_expression();
				State = 1431; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_tableContext : ParserRuleContext {
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public Explicit_tableContext explicit_table() {
			return GetRuleContext<Explicit_tableContext>(0);
		}
		public Simple_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSimple_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSimple_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_tableContext simple_table() {
		Simple_tableContext _localctx = new Simple_tableContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_simple_table);
		try {
			State = 1437;
			switch (_input.La(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1435; query_specification();
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1436; explicit_table();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_tableContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(SqlParser.TABLE, 0); }
		public Table_or_query_nameContext table_or_query_name() {
			return GetRuleContext<Table_or_query_nameContext>(0);
		}
		public Explicit_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterExplicit_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitExplicit_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_tableContext explicit_table() {
		Explicit_tableContext _localctx = new Explicit_tableContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_explicit_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1439; Match(TABLE);
			State = 1440; table_or_query_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_query_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Table_or_query_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_query_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTable_or_query_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTable_or_query_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_query_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_query_nameContext table_or_query_name() {
		Table_or_query_nameContext _localctx = new Table_or_query_nameContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_table_or_query_name);
		try {
			State = 1444;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1442; table_name();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1443; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(SqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(SqlParser.DOT, i);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1446; identifier();
			State = 1453;
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 1447; Match(DOT);
				State = 1448; identifier();
				State = 1451;
				_la = _input.La(1);
				if (_la==DOT) {
					{
					State = 1449; Match(DOT);
					State = 1450; identifier();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_specificationContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(SqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public Set_qualifierContext set_qualifier() {
			return GetRuleContext<Set_qualifierContext>(0);
		}
		public Table_expressionContext table_expression() {
			return GetRuleContext<Table_expressionContext>(0);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_specificationContext query_specification() {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_query_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455; Match(SELECT);
			State = 1457;
			_la = _input.La(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 1456; set_qualifier();
				}
			}

			State = 1459; select_list();
			State = 1461;
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 1460; table_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		public Select_sublistContext[] select_sublist() {
			return GetRuleContexts<Select_sublistContext>();
		}
		public Select_sublistContext select_sublist(int i) {
			return GetRuleContext<Select_sublistContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_select_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1463; select_sublist();
			State = 1468;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1464; Match(COMMA);
				State = 1465; select_sublist();
				}
				}
				State = 1470;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_sublistContext : ParserRuleContext {
		public Derived_columnContext derived_column() {
			return GetRuleContext<Derived_columnContext>(0);
		}
		public Qualified_asteriskContext qualified_asterisk() {
			return GetRuleContext<Qualified_asteriskContext>(0);
		}
		public Select_sublistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_sublist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_sublist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_sublist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_sublist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_sublistContext select_sublist() {
		Select_sublistContext _localctx = new Select_sublistContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_select_sublist);
		try {
			State = 1473;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1471; derived_column();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1472; qualified_asterisk();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_columnContext : ParserRuleContext {
		public Value_expressionContext value_expression() {
			return GetRuleContext<Value_expressionContext>(0);
		}
		public As_clauseContext as_clause() {
			return GetRuleContext<As_clauseContext>(0);
		}
		public Derived_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterDerived_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitDerived_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerived_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Derived_columnContext derived_column() {
		Derived_columnContext _localctx = new Derived_columnContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_derived_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475; value_expression();
			State = 1477;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << AVG) | (1L << BETWEEN) | (1L << BY) | (1L << CENTURY) | (1L << CHARACTER) | (1L << COLLECT) | (1L << COALESCE) | (1L << COLUMN) | (1L << COUNT) | (1L << CUBE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DAY - 64)) | (1L << (DEC - 64)) | (1L << (DECADE - 64)) | (1L << (DOW - 64)) | (1L << (DOY - 64)) | (1L << (DROP - 64)) | (1L << (EPOCH - 64)) | (1L << (EVERY - 64)) | (1L << (EXISTS - 64)) | (1L << (EXTERNAL - 64)) | (1L << (EXTRACT - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FORMAT - 64)) | (1L << (FUSION - 64)) | (1L << (GROUPING - 64)) | (1L << (HASH - 64)) | (1L << (INDEX - 64)) | (1L << (INSERT - 64)) | (1L << (INTERSECTION - 64)) | (1L << (ISODOW - 64)) | (1L << (ISOYEAR - 64)) | (1L << (LAST - 64)) | (1L << (LESS - 64)) | (1L << (LIST - 64)) | (1L << (LOCATION - 64)) | (1L << (MAX - 64)) | (1L << (MAXVALUE - 64)) | (1L << (MICROSECONDS - 64)) | (1L << (MILLENNIUM - 64)) | (1L << (MILLISECONDS - 64)) | (1L << (MIN - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NATIONAL - 64)) | (1L << (NULLIF - 64)) | (1L << (OVERWRITE - 64)) | (1L << (PARTITION - 64)) | (1L << (PARTITIONS - 64)) | (1L << (PRECISION - 64)) | (1L << (PURGE - 64)) | (1L << (QUARTER - 64)) | (1L << (RANGE - 64)) | (1L << (REGEXP - 64)) | (1L << (RLIKE - 64)) | (1L << (ROLLUP - 64)) | (1L << (SECOND - 64)) | (1L << (SET - 64)) | (1L << (SIMILAR - 64)) | (1L << (STDDEV_POP - 64)) | (1L << (STDDEV_SAMP - 64)) | (1L << (SUBPARTITION - 64)) | (1L << (SUM - 64)) | (1L << (TABLESPACE - 64)) | (1L << (THAN - 64)) | (1L << (TIMEZONE - 64)) | (1L << (TIMEZONE_HOUR - 64)) | (1L << (TIMEZONE_MINUTE - 64)) | (1L << (TRIM - 64)) | (1L << (TO - 64)) | (1L << (UNKNOWN - 64)) | (1L << (VALUES - 64)) | (1L << (VAR_SAMP - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (VAR_POP - 128)) | (1L << (VARYING - 128)) | (1L << (WEEK - 128)) | (1L << (YEAR - 128)) | (1L << (ZONE - 128)) | (1L << (BOOLEAN - 128)) | (1L << (BOOL - 128)) | (1L << (BIT - 128)) | (1L << (VARBIT - 128)) | (1L << (INT1 - 128)) | (1L << (INT2 - 128)) | (1L << (INT4 - 128)) | (1L << (INT8 - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT4 - 128)) | (1L << (FLOAT8 - 128)) | (1L << (REAL - 128)) | (1L << (FLOAT - 128)) | (1L << (DOUBLE - 128)) | (1L << (NUMERIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (CHAR - 128)) | (1L << (VARCHAR - 128)) | (1L << (NCHAR - 128)) | (1L << (NVARCHAR - 128)) | (1L << (DATE - 128)) | (1L << (TIME - 128)) | (1L << (TIMETZ - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (TIMESTAMPTZ - 128)) | (1L << (TEXT - 128)) | (1L << (VARBINARY - 128)) | (1L << (BLOB - 128)) | (1L << (BYTEA - 128)) | (1L << (INET4 - 128)))) != 0) || _la==Identifier) {
				{
				State = 1476; as_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_asteriskContext : ParserRuleContext {
		public IToken tb_name;
		public ITerminalNode MULTIPLY() { return GetToken(SqlParser.MULTIPLY, 0); }
		public ITerminalNode DOT() { return GetToken(SqlParser.DOT, 0); }
		public ITerminalNode Identifier() { return GetToken(SqlParser.Identifier, 0); }
		public Qualified_asteriskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_asterisk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterQualified_asterisk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitQualified_asterisk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_asterisk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_asteriskContext qualified_asterisk() {
		Qualified_asteriskContext _localctx = new Qualified_asteriskContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_qualified_asterisk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1479; _localctx.tb_name = Match(Identifier);
				State = 1480; Match(DOT);
				}
			}

			State = 1483; Match(MULTIPLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_qualifierContext : ParserRuleContext {
		public ITerminalNode DISTINCT() { return GetToken(SqlParser.DISTINCT, 0); }
		public ITerminalNode ALL() { return GetToken(SqlParser.ALL, 0); }
		public Set_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_qualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSet_qualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSet_qualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_qualifierContext set_qualifier() {
		Set_qualifierContext _localctx = new Set_qualifierContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_set_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1485;
			_la = _input.La(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_referenceContext : ParserRuleContext {
		public IdentifierContext tb_name;
		public IdentifierContext name;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(SqlParser.DOT, 0); }
		public Column_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_reference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_referenceContext column_reference() {
		Column_referenceContext _localctx = new Column_referenceContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_column_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				State = 1487; _localctx.tb_name = identifier();
				State = 1488; Match(DOT);
				}
				break;
			}
			State = 1492; _localctx.name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_clauseContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(SqlParser.AS, 0); }
		public As_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterAs_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitAs_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_clauseContext as_clause() {
		As_clauseContext _localctx = new As_clauseContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_as_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1495;
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1494; Match(AS);
				}
			}

			State = 1497; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_reference_listContext : ParserRuleContext {
		public Column_referenceContext[] column_reference() {
			return GetRuleContexts<Column_referenceContext>();
		}
		public Column_referenceContext column_reference(int i) {
			return GetRuleContext<Column_referenceContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Column_reference_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_reference_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_reference_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_reference_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_reference_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_reference_listContext column_reference_list() {
		Column_reference_listContext _localctx = new Column_reference_listContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_column_reference_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1499; column_reference();
			State = 1504;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1500; Match(COMMA);
				State = 1501; column_reference();
				}
				}
				State = 1506;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_subqueryContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Scalar_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterScalar_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitScalar_subquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_subqueryContext scalar_subquery() {
		Scalar_subqueryContext _localctx = new Scalar_subqueryContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_scalar_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1507; subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_subqueryContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Row_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRow_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRow_subquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_subqueryContext row_subquery() {
		Row_subqueryContext _localctx = new Row_subqueryContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_row_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1509; subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_subqueryContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Table_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterTable_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitTable_subquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_subqueryContext table_subquery() {
		Table_subqueryContext _localctx = new Table_subqueryContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_table_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1511; subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513; Match(LEFT_PAREN);
			State = 1514; query_expression();
			State = 1515; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public Comparison_predicateContext comparison_predicate() {
			return GetRuleContext<Comparison_predicateContext>(0);
		}
		public Between_predicateContext between_predicate() {
			return GetRuleContext<Between_predicateContext>(0);
		}
		public In_predicateContext in_predicate() {
			return GetRuleContext<In_predicateContext>(0);
		}
		public Pattern_matching_predicateContext pattern_matching_predicate() {
			return GetRuleContext<Pattern_matching_predicateContext>(0);
		}
		public Null_predicateContext null_predicate() {
			return GetRuleContext<Null_predicateContext>(0);
		}
		public Exists_predicateContext exists_predicate() {
			return GetRuleContext<Exists_predicateContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_predicate);
		try {
			State = 1523;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1517; comparison_predicate();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1518; between_predicate();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1519; in_predicate();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1520; pattern_matching_predicate();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1521; null_predicate();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1522; exists_predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_predicateContext : ParserRuleContext {
		public Row_value_predicandContext left;
		public Comp_opContext c;
		public Row_value_predicandContext right;
		public Row_value_predicandContext[] row_value_predicand() {
			return GetRuleContexts<Row_value_predicandContext>();
		}
		public Row_value_predicandContext row_value_predicand(int i) {
			return GetRuleContext<Row_value_predicandContext>(i);
		}
		public Comp_opContext comp_op() {
			return GetRuleContext<Comp_opContext>(0);
		}
		public Comparison_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterComparison_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitComparison_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_predicateContext comparison_predicate() {
		Comparison_predicateContext _localctx = new Comparison_predicateContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_comparison_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525; _localctx.left = row_value_predicand();
			State = 1526; _localctx.c = comp_op();
			State = 1527; _localctx.right = row_value_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_opContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(SqlParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(SqlParser.NOT_EQUAL, 0); }
		public ITerminalNode LTH() { return GetToken(SqlParser.LTH, 0); }
		public ITerminalNode LEQ() { return GetToken(SqlParser.LEQ, 0); }
		public ITerminalNode GTH() { return GetToken(SqlParser.GTH, 0); }
		public ITerminalNode GEQ() { return GetToken(SqlParser.GEQ, 0); }
		public Comp_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterComp_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitComp_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_opContext comp_op() {
		Comp_opContext _localctx = new Comp_opContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_comp_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1529;
			_la = _input.La(1);
			if ( !(((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (EQUAL - 174)) | (1L << (NOT_EQUAL - 174)) | (1L << (LTH - 174)) | (1L << (LEQ - 174)) | (1L << (GTH - 174)) | (1L << (GEQ - 174)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Between_predicateContext : ParserRuleContext {
		public Row_value_predicandContext predicand;
		public Between_predicate_part_2Context between_predicate_part_2() {
			return GetRuleContext<Between_predicate_part_2Context>(0);
		}
		public Row_value_predicandContext row_value_predicand() {
			return GetRuleContext<Row_value_predicandContext>(0);
		}
		public Between_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_between_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBetween_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBetween_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Between_predicateContext between_predicate() {
		Between_predicateContext _localctx = new Between_predicateContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_between_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531; _localctx.predicand = row_value_predicand();
			State = 1532; between_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Between_predicate_part_2Context : ParserRuleContext {
		public Row_value_predicandContext begin;
		public Row_value_predicandContext end;
		public ITerminalNode BETWEEN() { return GetToken(SqlParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(SqlParser.AND, 0); }
		public Row_value_predicandContext[] row_value_predicand() {
			return GetRuleContexts<Row_value_predicandContext>();
		}
		public Row_value_predicandContext row_value_predicand(int i) {
			return GetRuleContext<Row_value_predicandContext>(i);
		}
		public ITerminalNode NOT() { return GetToken(SqlParser.NOT, 0); }
		public ITerminalNode ASYMMETRIC() { return GetToken(SqlParser.ASYMMETRIC, 0); }
		public ITerminalNode SYMMETRIC() { return GetToken(SqlParser.SYMMETRIC, 0); }
		public Between_predicate_part_2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_between_predicate_part_2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterBetween_predicate_part_2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitBetween_predicate_part_2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween_predicate_part_2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Between_predicate_part_2Context between_predicate_part_2() {
		Between_predicate_part_2Context _localctx = new Between_predicate_part_2Context(_ctx, State);
		EnterRule(_localctx, 344, RULE_between_predicate_part_2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 1534; Match(NOT);
				}
			}

			State = 1537; Match(BETWEEN);
			State = 1539;
			_la = _input.La(1);
			if (_la==ASYMMETRIC || _la==SYMMETRIC) {
				{
				State = 1538;
				_la = _input.La(1);
				if ( !(_la==ASYMMETRIC || _la==SYMMETRIC) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
			}

			State = 1541; _localctx.begin = row_value_predicand();
			State = 1542; Match(AND);
			State = 1543; _localctx.end = row_value_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_predicateContext : ParserRuleContext {
		public Numeric_value_expressionContext predicand;
		public ITerminalNode IN() { return GetToken(SqlParser.IN, 0); }
		public In_predicate_valueContext in_predicate_value() {
			return GetRuleContext<In_predicate_valueContext>(0);
		}
		public Numeric_value_expressionContext numeric_value_expression() {
			return GetRuleContext<Numeric_value_expressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(SqlParser.NOT, 0); }
		public In_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterIn_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitIn_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_predicateContext in_predicate() {
		In_predicateContext _localctx = new In_predicateContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_in_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1545; _localctx.predicand = numeric_value_expression();
			State = 1547;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 1546; Match(NOT);
				}
			}

			State = 1549; Match(IN);
			State = 1550; in_predicate_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_predicate_valueContext : ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return GetRuleContext<Table_subqueryContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public In_value_listContext in_value_list() {
			return GetRuleContext<In_value_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public In_predicate_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_predicate_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterIn_predicate_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitIn_predicate_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_predicate_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_predicate_valueContext in_predicate_value() {
		In_predicate_valueContext _localctx = new In_predicate_valueContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_in_predicate_value);
		try {
			State = 1557;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1552; table_subquery();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1553; Match(LEFT_PAREN);
				State = 1554; in_value_list();
				State = 1555; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_value_listContext : ParserRuleContext {
		public Row_value_expressionContext[] row_value_expression() {
			return GetRuleContexts<Row_value_expressionContext>();
		}
		public Row_value_expressionContext row_value_expression(int i) {
			return GetRuleContext<Row_value_expressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public In_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_value_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterIn_value_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitIn_value_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_value_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_value_listContext in_value_list() {
		In_value_listContext _localctx = new In_value_listContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_in_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559; row_value_expression();
			State = 1564;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1560; Match(COMMA);
				State = 1561; row_value_expression();
				}
				}
				State = 1566;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pattern_matching_predicateContext : ParserRuleContext {
		public Row_value_predicandContext f;
		public IToken s;
		public Pattern_matcherContext pattern_matcher() {
			return GetRuleContext<Pattern_matcherContext>(0);
		}
		public Row_value_predicandContext row_value_predicand() {
			return GetRuleContext<Row_value_predicandContext>(0);
		}
		public ITerminalNode Character_String_Literal() { return GetToken(SqlParser.Character_String_Literal, 0); }
		public Pattern_matching_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern_matching_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterPattern_matching_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitPattern_matching_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern_matching_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pattern_matching_predicateContext pattern_matching_predicate() {
		Pattern_matching_predicateContext _localctx = new Pattern_matching_predicateContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_pattern_matching_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1567; _localctx.f = row_value_predicand();
			State = 1568; pattern_matcher();
			State = 1569; _localctx.s = Match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pattern_matcherContext : ParserRuleContext {
		public Negativable_matcherContext negativable_matcher() {
			return GetRuleContext<Negativable_matcherContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(SqlParser.NOT, 0); }
		public Regex_matcherContext regex_matcher() {
			return GetRuleContext<Regex_matcherContext>(0);
		}
		public Pattern_matcherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern_matcher; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterPattern_matcher(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitPattern_matcher(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern_matcher(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pattern_matcherContext pattern_matcher() {
		Pattern_matcherContext _localctx = new Pattern_matcherContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_pattern_matcher);
		int _la;
		try {
			State = 1576;
			switch (_input.La(1)) {
			case ILIKE:
			case LIKE:
			case NOT:
			case REGEXP:
			case RLIKE:
			case SIMILAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1572;
				_la = _input.La(1);
				if (_la==NOT) {
					{
					State = 1571; Match(NOT);
					}
				}

				State = 1574; negativable_matcher();
				}
				break;
			case Similar_To:
			case Not_Similar_To:
			case Similar_To_Case_Insensitive:
			case Not_Similar_To_Case_Insensitive:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1575; regex_matcher();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Negativable_matcherContext : ParserRuleContext {
		public ITerminalNode LIKE() { return GetToken(SqlParser.LIKE, 0); }
		public ITerminalNode ILIKE() { return GetToken(SqlParser.ILIKE, 0); }
		public ITerminalNode SIMILAR() { return GetToken(SqlParser.SIMILAR, 0); }
		public ITerminalNode TO() { return GetToken(SqlParser.TO, 0); }
		public ITerminalNode REGEXP() { return GetToken(SqlParser.REGEXP, 0); }
		public ITerminalNode RLIKE() { return GetToken(SqlParser.RLIKE, 0); }
		public Negativable_matcherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negativable_matcher; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNegativable_matcher(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNegativable_matcher(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegativable_matcher(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Negativable_matcherContext negativable_matcher() {
		Negativable_matcherContext _localctx = new Negativable_matcherContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_negativable_matcher);
		try {
			State = 1584;
			switch (_input.La(1)) {
			case LIKE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1578; Match(LIKE);
				}
				break;
			case ILIKE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1579; Match(ILIKE);
				}
				break;
			case SIMILAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1580; Match(SIMILAR);
				State = 1581; Match(TO);
				}
				break;
			case REGEXP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1582; Match(REGEXP);
				}
				break;
			case RLIKE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1583; Match(RLIKE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regex_matcherContext : ParserRuleContext {
		public ITerminalNode Similar_To() { return GetToken(SqlParser.Similar_To, 0); }
		public ITerminalNode Not_Similar_To() { return GetToken(SqlParser.Not_Similar_To, 0); }
		public ITerminalNode Similar_To_Case_Insensitive() { return GetToken(SqlParser.Similar_To_Case_Insensitive, 0); }
		public ITerminalNode Not_Similar_To_Case_Insensitive() { return GetToken(SqlParser.Not_Similar_To_Case_Insensitive, 0); }
		public Regex_matcherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regex_matcher; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRegex_matcher(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRegex_matcher(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegex_matcher(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regex_matcherContext regex_matcher() {
		Regex_matcherContext _localctx = new Regex_matcherContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_regex_matcher);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1586;
			_la = _input.La(1);
			if ( !(((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (Similar_To - 168)) | (1L << (Not_Similar_To - 168)) | (1L << (Similar_To_Case_Insensitive - 168)) | (1L << (Not_Similar_To_Case_Insensitive - 168)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_predicateContext : ParserRuleContext {
		public Row_value_predicandContext predicand;
		public IToken n;
		public ITerminalNode IS() { return GetToken(SqlParser.IS, 0); }
		public ITerminalNode NULL() { return GetToken(SqlParser.NULL, 0); }
		public Row_value_predicandContext row_value_predicand() {
			return GetRuleContext<Row_value_predicandContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(SqlParser.NOT, 0); }
		public Null_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNull_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNull_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_predicateContext null_predicate() {
		Null_predicateContext _localctx = new Null_predicateContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_null_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1588; _localctx.predicand = row_value_predicand();
			State = 1589; Match(IS);
			State = 1591;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 1590; _localctx.n = Match(NOT);
				}
			}

			State = 1593; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quantified_comparison_predicateContext : ParserRuleContext {
		public Numeric_value_expressionContext l;
		public Comp_opContext c;
		public QuantifierContext q;
		public Table_subqueryContext s;
		public Numeric_value_expressionContext numeric_value_expression() {
			return GetRuleContext<Numeric_value_expressionContext>(0);
		}
		public Comp_opContext comp_op() {
			return GetRuleContext<Comp_opContext>(0);
		}
		public QuantifierContext quantifier() {
			return GetRuleContext<QuantifierContext>(0);
		}
		public Table_subqueryContext table_subquery() {
			return GetRuleContext<Table_subqueryContext>(0);
		}
		public Quantified_comparison_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantified_comparison_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterQuantified_comparison_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitQuantified_comparison_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantified_comparison_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quantified_comparison_predicateContext quantified_comparison_predicate() {
		Quantified_comparison_predicateContext _localctx = new Quantified_comparison_predicateContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_quantified_comparison_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595; _localctx.l = numeric_value_expression();
			State = 1596; _localctx.c = comp_op();
			State = 1597; _localctx.q = quantifier();
			State = 1598; _localctx.s = table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantifierContext : ParserRuleContext {
		public AllContext all() {
			return GetRuleContext<AllContext>(0);
		}
		public SomeContext some() {
			return GetRuleContext<SomeContext>(0);
		}
		public QuantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterQuantifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitQuantifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantifierContext quantifier() {
		QuantifierContext _localctx = new QuantifierContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_quantifier);
		try {
			State = 1602;
			switch (_input.La(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1600; all();
				}
				break;
			case ANY:
			case SOME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1601; some();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(SqlParser.ALL, 0); }
		public AllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterAll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitAll(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllContext all() {
		AllContext _localctx = new AllContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_all);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604; Match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SomeContext : ParserRuleContext {
		public ITerminalNode SOME() { return GetToken(SqlParser.SOME, 0); }
		public ITerminalNode ANY() { return GetToken(SqlParser.ANY, 0); }
		public SomeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_some; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSome(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSome(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSome(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomeContext some() {
		SomeContext _localctx = new SomeContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_some);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1606;
			_la = _input.La(1);
			if ( !(_la==ANY || _la==SOME) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exists_predicateContext : ParserRuleContext {
		public Table_subqueryContext s;
		public ITerminalNode EXISTS() { return GetToken(SqlParser.EXISTS, 0); }
		public Table_subqueryContext table_subquery() {
			return GetRuleContext<Table_subqueryContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(SqlParser.NOT, 0); }
		public Exists_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exists_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterExists_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitExists_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExists_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exists_predicateContext exists_predicate() {
		Exists_predicateContext _localctx = new Exists_predicateContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_exists_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1609;
			_la = _input.La(1);
			if (_la==NOT) {
				{
				State = 1608; Match(NOT);
				}
			}

			State = 1611; Match(EXISTS);
			State = 1612; _localctx.s = table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unique_predicateContext : ParserRuleContext {
		public Table_subqueryContext s;
		public ITerminalNode UNIQUE() { return GetToken(SqlParser.UNIQUE, 0); }
		public Table_subqueryContext table_subquery() {
			return GetRuleContext<Table_subqueryContext>(0);
		}
		public Unique_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unique_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterUnique_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitUnique_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnique_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unique_predicateContext unique_predicate() {
		Unique_predicateContext _localctx = new Unique_predicateContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_unique_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1614; Match(UNIQUE);
			State = 1615; _localctx.s = table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_datetime_fieldContext : ParserRuleContext {
		public Non_second_primary_datetime_fieldContext non_second_primary_datetime_field() {
			return GetRuleContext<Non_second_primary_datetime_fieldContext>(0);
		}
		public ITerminalNode SECOND() { return GetToken(SqlParser.SECOND, 0); }
		public Primary_datetime_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_datetime_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterPrimary_datetime_field(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitPrimary_datetime_field(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_datetime_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_datetime_fieldContext primary_datetime_field() {
		Primary_datetime_fieldContext _localctx = new Primary_datetime_fieldContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_primary_datetime_field);
		try {
			State = 1619;
			switch (_input.La(1)) {
			case DAY:
			case HOUR:
			case MINUTE:
			case MONTH:
			case YEAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1617; non_second_primary_datetime_field();
				}
				break;
			case SECOND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1618; Match(SECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_second_primary_datetime_fieldContext : ParserRuleContext {
		public ITerminalNode YEAR() { return GetToken(SqlParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(SqlParser.MONTH, 0); }
		public ITerminalNode DAY() { return GetToken(SqlParser.DAY, 0); }
		public ITerminalNode HOUR() { return GetToken(SqlParser.HOUR, 0); }
		public ITerminalNode MINUTE() { return GetToken(SqlParser.MINUTE, 0); }
		public Non_second_primary_datetime_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_second_primary_datetime_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNon_second_primary_datetime_field(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNon_second_primary_datetime_field(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_second_primary_datetime_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_second_primary_datetime_fieldContext non_second_primary_datetime_field() {
		Non_second_primary_datetime_fieldContext _localctx = new Non_second_primary_datetime_fieldContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_non_second_primary_datetime_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1621;
			_la = _input.La(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DAY - 64)) | (1L << (HOUR - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)))) != 0) || _la==YEAR) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extended_datetime_fieldContext : ParserRuleContext {
		public ITerminalNode CENTURY() { return GetToken(SqlParser.CENTURY, 0); }
		public ITerminalNode DECADE() { return GetToken(SqlParser.DECADE, 0); }
		public ITerminalNode DOW() { return GetToken(SqlParser.DOW, 0); }
		public ITerminalNode DOY() { return GetToken(SqlParser.DOY, 0); }
		public ITerminalNode EPOCH() { return GetToken(SqlParser.EPOCH, 0); }
		public ITerminalNode ISODOW() { return GetToken(SqlParser.ISODOW, 0); }
		public ITerminalNode ISOYEAR() { return GetToken(SqlParser.ISOYEAR, 0); }
		public ITerminalNode MICROSECONDS() { return GetToken(SqlParser.MICROSECONDS, 0); }
		public ITerminalNode MILLENNIUM() { return GetToken(SqlParser.MILLENNIUM, 0); }
		public ITerminalNode MILLISECONDS() { return GetToken(SqlParser.MILLISECONDS, 0); }
		public ITerminalNode QUARTER() { return GetToken(SqlParser.QUARTER, 0); }
		public ITerminalNode WEEK() { return GetToken(SqlParser.WEEK, 0); }
		public Extended_datetime_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extended_datetime_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterExtended_datetime_field(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitExtended_datetime_field(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtended_datetime_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extended_datetime_fieldContext extended_datetime_field() {
		Extended_datetime_fieldContext _localctx = new Extended_datetime_fieldContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_extended_datetime_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1623;
			_la = _input.La(1);
			if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (CENTURY - 57)) | (1L << (DECADE - 57)) | (1L << (DOW - 57)) | (1L << (DOY - 57)) | (1L << (EPOCH - 57)) | (1L << (ISODOW - 57)) | (1L << (ISOYEAR - 57)) | (1L << (MICROSECONDS - 57)) | (1L << (MILLENNIUM - 57)) | (1L << (MILLISECONDS - 57)) | (1L << (QUARTER - 57)))) != 0) || _la==WEEK) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Routine_invocationContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public Sql_argument_listContext sql_argument_list() {
			return GetRuleContext<Sql_argument_listContext>(0);
		}
		public Routine_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routine_invocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterRoutine_invocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitRoutine_invocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutine_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Routine_invocationContext routine_invocation() {
		Routine_invocationContext _localctx = new Routine_invocationContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_routine_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1625; function_name();
			State = 1626; Match(LEFT_PAREN);
			State = 1628;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANY) | (1L << CASE) | (1L << CAST) | (1L << FALSE) | (1L << LEFT) | (1L << NOT) | (1L << NULL) | (1L << RIGHT) | (1L << SOME) | (1L << TRUE) | (1L << AVG) | (1L << BETWEEN) | (1L << BY) | (1L << CENTURY) | (1L << CHARACTER) | (1L << COLLECT) | (1L << COALESCE) | (1L << COLUMN) | (1L << COUNT) | (1L << CUBE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DAY - 64)) | (1L << (DEC - 64)) | (1L << (DECADE - 64)) | (1L << (DOW - 64)) | (1L << (DOY - 64)) | (1L << (DROP - 64)) | (1L << (EPOCH - 64)) | (1L << (EVERY - 64)) | (1L << (EXISTS - 64)) | (1L << (EXTERNAL - 64)) | (1L << (EXTRACT - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FORMAT - 64)) | (1L << (FUSION - 64)) | (1L << (GROUPING - 64)) | (1L << (HASH - 64)) | (1L << (INDEX - 64)) | (1L << (INSERT - 64)) | (1L << (INTERSECTION - 64)) | (1L << (ISODOW - 64)) | (1L << (ISOYEAR - 64)) | (1L << (LAST - 64)) | (1L << (LESS - 64)) | (1L << (LIST - 64)) | (1L << (LOCATION - 64)) | (1L << (MAX - 64)) | (1L << (MAXVALUE - 64)) | (1L << (MICROSECONDS - 64)) | (1L << (MILLENNIUM - 64)) | (1L << (MILLISECONDS - 64)) | (1L << (MIN - 64)) | (1L << (MINUTE - 64)) | (1L << (MONTH - 64)) | (1L << (NATIONAL - 64)) | (1L << (NULLIF - 64)) | (1L << (OVERWRITE - 64)) | (1L << (PARTITION - 64)) | (1L << (PARTITIONS - 64)) | (1L << (PRECISION - 64)) | (1L << (PURGE - 64)) | (1L << (QUARTER - 64)) | (1L << (RANGE - 64)) | (1L << (REGEXP - 64)) | (1L << (RLIKE - 64)) | (1L << (ROLLUP - 64)) | (1L << (SECOND - 64)) | (1L << (SET - 64)) | (1L << (SIMILAR - 64)) | (1L << (STDDEV_POP - 64)) | (1L << (STDDEV_SAMP - 64)) | (1L << (SUBPARTITION - 64)) | (1L << (SUM - 64)) | (1L << (TABLESPACE - 64)) | (1L << (THAN - 64)) | (1L << (TIMEZONE - 64)) | (1L << (TIMEZONE_HOUR - 64)) | (1L << (TIMEZONE_MINUTE - 64)) | (1L << (TRIM - 64)) | (1L << (TO - 64)) | (1L << (UNKNOWN - 64)) | (1L << (VALUES - 64)) | (1L << (VAR_SAMP - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (VAR_POP - 128)) | (1L << (VARYING - 128)) | (1L << (WEEK - 128)) | (1L << (YEAR - 128)) | (1L << (ZONE - 128)) | (1L << (BOOLEAN - 128)) | (1L << (BOOL - 128)) | (1L << (BIT - 128)) | (1L << (VARBIT - 128)) | (1L << (INT1 - 128)) | (1L << (INT2 - 128)) | (1L << (INT4 - 128)) | (1L << (INT8 - 128)) | (1L << (TINYINT - 128)) | (1L << (SMALLINT - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (BIGINT - 128)) | (1L << (FLOAT4 - 128)) | (1L << (FLOAT8 - 128)) | (1L << (REAL - 128)) | (1L << (FLOAT - 128)) | (1L << (DOUBLE - 128)) | (1L << (NUMERIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (CHAR - 128)) | (1L << (VARCHAR - 128)) | (1L << (NCHAR - 128)) | (1L << (NVARCHAR - 128)) | (1L << (DATE - 128)) | (1L << (TIME - 128)) | (1L << (TIMETZ - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (TIMESTAMPTZ - 128)) | (1L << (TEXT - 128)) | (1L << (VARBINARY - 128)) | (1L << (BLOB - 128)) | (1L << (BYTEA - 128)) | (1L << (INET4 - 128)) | (1L << (LEFT_PAREN - 128)) | (1L << (PLUS - 128)) | (1L << (MINUS - 128)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (NUMBER - 196)) | (1L << (REAL_NUMBER - 196)) | (1L << (Identifier - 196)) | (1L << (Character_String_Literal - 196)))) != 0)) {
				{
				State = 1627; sql_argument_list();
				}
			}

			State = 1630; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_names_for_reserved_wordsContext : ParserRuleContext {
		public ITerminalNode LEFT() { return GetToken(SqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(SqlParser.RIGHT, 0); }
		public Function_names_for_reserved_wordsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_names_for_reserved_words; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterFunction_names_for_reserved_words(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitFunction_names_for_reserved_words(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_names_for_reserved_words(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_names_for_reserved_wordsContext function_names_for_reserved_words() {
		Function_names_for_reserved_wordsContext _localctx = new Function_names_for_reserved_wordsContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_function_names_for_reserved_words);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632;
			_la = _input.La(1);
			if ( !(_la==LEFT || _la==RIGHT) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Function_names_for_reserved_wordsContext function_names_for_reserved_words() {
			return GetRuleContext<Function_names_for_reserved_wordsContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_function_name);
		try {
			State = 1636;
			switch (_input.La(1)) {
			case AVG:
			case BETWEEN:
			case BY:
			case CENTURY:
			case CHARACTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COUNT:
			case CUBE:
			case DAY:
			case DEC:
			case DECADE:
			case DOW:
			case DOY:
			case DROP:
			case EPOCH:
			case EVERY:
			case EXISTS:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INDEX:
			case INSERT:
			case INTERSECTION:
			case ISODOW:
			case ISOYEAR:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NULLIF:
			case OVERWRITE:
			case PARTITION:
			case PARTITIONS:
			case PRECISION:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGEXP:
			case RLIKE:
			case ROLLUP:
			case SECOND:
			case SET:
			case SIMILAR:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case UNKNOWN:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case WEEK:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1634; identifier();
				}
				break;
			case LEFT:
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1635; function_names_for_reserved_words();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_argument_listContext : ParserRuleContext {
		public Value_expressionContext[] value_expression() {
			return GetRuleContexts<Value_expressionContext>();
		}
		public Value_expressionContext value_expression(int i) {
			return GetRuleContext<Value_expressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Sql_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSql_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSql_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_argument_listContext sql_argument_list() {
		Sql_argument_listContext _localctx = new Sql_argument_listContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_sql_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638; value_expression();
			State = 1643;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1639; Match(COMMA);
				State = 1640; value_expression();
				}
				}
				State = 1645;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_clauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(SqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(SqlParser.BY, 0); }
		public Sort_specifier_listContext sort_specifier_list() {
			return GetRuleContext<Sort_specifier_listContext>(0);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterOrderby_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitOrderby_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_clauseContext orderby_clause() {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_orderby_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646; Match(ORDER);
			State = 1647; Match(BY);
			State = 1648; sort_specifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_specifier_listContext : ParserRuleContext {
		public Sort_specifierContext[] sort_specifier() {
			return GetRuleContexts<Sort_specifierContext>();
		}
		public Sort_specifierContext sort_specifier(int i) {
			return GetRuleContext<Sort_specifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Sort_specifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_specifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSort_specifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSort_specifier_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort_specifier_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sort_specifier_listContext sort_specifier_list() {
		Sort_specifier_listContext _localctx = new Sort_specifier_listContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_sort_specifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650; sort_specifier();
			State = 1655;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1651; Match(COMMA);
				State = 1652; sort_specifier();
				}
				}
				State = 1657;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_specifierContext : ParserRuleContext {
		public Row_value_predicandContext key;
		public Order_specificationContext order;
		public Null_orderingContext null_order;
		public Row_value_predicandContext row_value_predicand() {
			return GetRuleContext<Row_value_predicandContext>(0);
		}
		public Order_specificationContext order_specification() {
			return GetRuleContext<Order_specificationContext>(0);
		}
		public Null_orderingContext null_ordering() {
			return GetRuleContext<Null_orderingContext>(0);
		}
		public Sort_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterSort_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitSort_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sort_specifierContext sort_specifier() {
		Sort_specifierContext _localctx = new Sort_specifierContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_sort_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1658; _localctx.key = row_value_predicand();
			State = 1660;
			_la = _input.La(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 1659; _localctx.order = order_specification();
				}
			}

			State = 1663;
			_la = _input.La(1);
			if (_la==NULL) {
				{
				State = 1662; _localctx.null_order = null_ordering();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_specificationContext : ParserRuleContext {
		public ITerminalNode ASC() { return GetToken(SqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(SqlParser.DESC, 0); }
		public Order_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterOrder_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitOrder_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_specificationContext order_specification() {
		Order_specificationContext _localctx = new Order_specificationContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_order_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1665;
			_la = _input.La(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		public Numeric_value_expressionContext e;
		public ITerminalNode LIMIT() { return GetToken(SqlParser.LIMIT, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return GetRuleContext<Numeric_value_expressionContext>(0);
		}
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_limit_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1667; Match(LIMIT);
			State = 1668; _localctx.e = numeric_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_orderingContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(SqlParser.NULL, 0); }
		public ITerminalNode FIRST() { return GetToken(SqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(SqlParser.LAST, 0); }
		public Null_orderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterNull_ordering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitNull_ordering(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_ordering(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_orderingContext null_ordering() {
		Null_orderingContext _localctx = new Null_orderingContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_null_ordering);
		try {
			State = 1674;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1670; Match(NULL);
				State = 1671; Match(FIRST);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1672; Match(NULL);
				State = 1673; Match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public IToken path;
		public IdentifierContext file_type;
		public ITerminalNode INSERT() { return GetToken(SqlParser.INSERT, 0); }
		public ITerminalNode INTO() { return GetToken(SqlParser.INTO, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public ITerminalNode OVERWRITE() { return GetToken(SqlParser.OVERWRITE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(SqlParser.LEFT_PAREN, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(SqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode LOCATION() { return GetToken(SqlParser.LOCATION, 0); }
		public ITerminalNode Character_String_Literal() { return GetToken(SqlParser.Character_String_Literal, 0); }
		public ITerminalNode USING() { return GetToken(SqlParser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Param_clauseContext param_clause() {
			return GetRuleContext<Param_clauseContext>(0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlParserListener typedListener = listener as ISqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlParserVisitor<TResult> typedVisitor = visitor as ISqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_insert_statement);
		int _la;
		try {
			State = 1705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1676; Match(INSERT);
				State = 1678;
				_la = _input.La(1);
				if (_la==OVERWRITE) {
					{
					State = 1677; Match(OVERWRITE);
					}
				}

				State = 1680; Match(INTO);
				State = 1681; table_name();
				State = 1686;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
				case 1:
					{
					State = 1682; Match(LEFT_PAREN);
					State = 1683; column_name_list();
					State = 1684; Match(RIGHT_PAREN);
					}
					break;
				}
				State = 1688; query_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1690; Match(INSERT);
				State = 1692;
				_la = _input.La(1);
				if (_la==OVERWRITE) {
					{
					State = 1691; Match(OVERWRITE);
					}
				}

				State = 1694; Match(INTO);
				State = 1695; Match(LOCATION);
				State = 1696; _localctx.path = Match(Character_String_Literal);
				State = 1702;
				_la = _input.La(1);
				if (_la==USING) {
					{
					State = 1697; Match(USING);
					State = 1698; _localctx.file_type = identifier();
					State = 1700;
					_la = _input.La(1);
					if (_la==WITH) {
						{
						State = 1699; param_clause();
						}
					}

					}
				}

				State = 1704; query_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xCE\x6AE\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x3\x2\x3\x2\x5\x2\x197\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x5\x3\x19F\n\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6\x1A7"+
		"\n\x6\x3\a\x3\a\x5\a\x1AB\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1B2\n\a\x3"+
		"\a\x3\a\x3\a\x3\a\x5\a\x1B8\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x5\b\x1C2\n\b\x3\b\x5\b\x1C5\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x5\b\x1D0\n\b\x3\b\x5\b\x1D3\n\b\x3\b\x5\b\x1D6\n\b\x3\b\x3"+
		"\b\x5\b\x1DA\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x1E1\n\b\x3\b\x5\b\x1E4"+
		"\n\b\x3\b\x5\b\x1E7\n\b\x3\b\x3\b\x3\b\x5\b\x1EC\n\b\x3\t\x3\t\x3\t\x3"+
		"\t\a\t\x1F2\n\t\f\t\xE\t\x1F5\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\a\f\x203\n\f\f\f\xE\f\x206\v\f\x3\f\x3\f\x3\r\x3"+
		"\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\x21A\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\a\x13\x229"+
		"\n\x13\f\x13\xE\x13\x22C\v\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x238\n\x14\x3\x14\x3\x14\x5\x14\x23C"+
		"\n\x14\x5\x14\x23E\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x24B\n\x15\x3\x16\x3\x16\x3\x16"+
		"\a\x16\x250\n\x16\f\x16\xE\x16\x253\v\x16\x3\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\a\x1A\x268\n\x1A\f\x1A\xE\x1A\x26B"+
		"\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x271\n\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x5\x1E\x282\n\x1E\x3\x1F\x3\x1F\x5\x1F\x286\n\x1F\x3"+
		" \x3 \x3!\x3!\x5!\x28C\n!\x3\"\x3\"\x3\"\x5\"\x291\n\"\x3#\x3#\x3#\x5"+
		"#\x296\n#\x3$\x3$\x3$\x3%\x3%\x3%\x3&\x3&\x3&\x3\'\x3\'\x3(\x3(\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x2AE\n)\x3*\x3*\x3+\x3+\x5+\x2B4\n+"+
		"\x3+\x3+\x5+\x2B8\n+\x3+\x3+\x3+\x5+\x2BD\n+\x3+\x3+\x3+\x5+\x2C2\n+\x3"+
		"+\x3+\x5+\x2C6\n+\x3+\x5+\x2C9\n+\x3,\x3,\x3,\x3,\x3-\x3-\x3-\x5-\x2D2"+
		"\n-\x3-\x3-\x3-\x5-\x2D7\n-\x3-\x3-\x5-\x2DB\n-\x3-\x3-\x3-\x3-\x5-\x2E1"+
		"\n-\x3-\x3-\x3-\x3-\x5-\x2E7\n-\x3-\x3-\x3-\x5-\x2EC\n-\x3-\x3-\x5-\x2F0"+
		"\n-\x5-\x2F2\n-\x3.\x3.\x5.\x2F6\n.\x3.\x3.\x5.\x2FA\n.\x5.\x2FC\n.\x3"+
		"/\x3/\x5/\x300\n/\x3\x30\x3\x30\x5\x30\x304\n\x30\x3\x30\x3\x30\x5\x30"+
		"\x308\n\x30\x3\x30\x3\x30\x5\x30\x30C\n\x30\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x317\n\x30\x3\x31\x3\x31\x5"+
		"\x31\x31B\n\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x323"+
		"\n\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32"+
		"\x32D\n\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x33E\n\x34\x3\x35"+
		"\x3\x35\x5\x35\x342\n\x35\x3\x35\x3\x35\x5\x35\x346\n\x35\x3\x35\x3\x35"+
		"\x3\x35\x5\x35\x34B\n\x35\x5\x35\x34D\n\x35\x3\x36\x3\x36\x5\x36\x351"+
		"\n\x36\x3\x36\x3\x36\x3\x36\x5\x36\x356\n\x36\x3\x36\x3\x36\x5\x36\x35A"+
		"\n\x36\x5\x36\x35C\n\x36\x3\x37\x3\x37\x5\x37\x360\n\x37\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39"+
		"\x36D\n\x39\x3:\x3:\x3;\x3;\x3<\x5<\x374\n<\x3<\x3<\x3=\x3=\x3>\x3>\x3"+
		">\x3>\x3>\x3>\x5>\x380\n>\x5>\x382\n>\x3?\x3?\x3?\x5?\x387\n?\x3?\x3?"+
		"\x3?\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x6\x44\x3A7\n\x44\r\x44"+
		"\xE\x44\x3A8\x3\x44\x3\x44\x5\x44\x3AD\n\x44\x3\x45\x3\x45\x5\x45\x3B1"+
		"\n\x45\x3\x46\x3\x46\x3\x46\x6\x46\x3B6\n\x46\r\x46\xE\x46\x3B7\x3\x46"+
		"\x5\x46\x3BB\n\x46\x3\x46\x3\x46\x3G\x3G\x6G\x3C1\nG\rG\xEG\x3C2\x3G\x5"+
		"G\x3C6\nG\x3G\x3G\x3H\x3H\x3H\x3H\x3H\x3I\x3I\x3I\x3I\x3I\x3J\x3J\x3J"+
		"\x3K\x3K\x5K\x3D9\nK\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3M\x3M\x3N\x3N\x3O\x3"+
		"O\x3O\x5O\x3E9\nO\x3P\x3P\x3P\x5P\x3EE\nP\x3Q\x3Q\x3Q\aQ\x3F3\nQ\fQ\xE"+
		"Q\x3F6\vQ\x3R\x3R\x3R\aR\x3FB\nR\fR\xER\x3FE\vR\x3S\x5S\x401\nS\x3S\x3"+
		"S\x3T\x3T\x3T\x3T\aT\x409\nT\fT\xET\x40C\vT\x3T\x3T\x3U\x3U\x3U\aU\x413"+
		"\nU\fU\xEU\x416\vU\x3U\x5U\x419\nU\x3V\x3V\x3W\x3W\x3X\x3X\x3X\x3X\x3"+
		"X\x3X\x3X\x3Y\x3Y\x3Y\x5Y\x429\nY\x3Z\x3Z\x3[\x3[\x5[\x42F\n[\x3\\\x3"+
		"\\\x3]\x3]\x3]\a]\x436\n]\f]\xE]\x439\v]\x3^\x3^\x3_\x3_\x5_\x43F\n_\x3"+
		"`\x3`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x5\x62\x449\n\x62\x3\x62"+
		"\x5\x62\x44C\n\x62\x3\x62\x5\x62\x44F\n\x62\x3\x62\x3\x62\x3\x62\x3\x62"+
		"\x3\x62\x5\x62\x456\n\x62\x3\x63\x3\x63\x3\x64\x3\x64\x3\x65\x3\x65\x3"+
		"\x65\a\x65\x45F\n\x65\f\x65\xE\x65\x462\v\x65\x3\x66\x3\x66\x3\x66\a\x66"+
		"\x467\n\x66\f\x66\xE\x66\x46A\v\x66\x3g\x3g\x3g\x5g\x46F\ng\x3h\x3h\x5"+
		"h\x473\nh\x3i\x3i\x5i\x477\ni\x3i\x3i\x3j\x3j\x3k\x3k\x5k\x47F\nk\x3l"+
		"\x3l\x5l\x483\nl\x3m\x3m\x3m\x3m\x3n\x3n\x5n\x48B\nn\x3o\x3o\x3p\x3p\x3"+
		"q\x3q\x5q\x493\nq\x3r\x3r\x5r\x497\nr\x3s\x3s\x5s\x49B\ns\x3s\x5s\x49E"+
		"\ns\x3s\x5s\x4A1\ns\x3s\x5s\x4A4\ns\x3s\x5s\x4A7\ns\x3t\x3t\x3t\x3u\x3"+
		"u\x3u\au\x4AF\nu\fu\xEu\x4B2\vu\x3v\x3v\x5v\x4B6\nv\x3w\x3w\x6w\x4BA\n"+
		"w\rw\xEw\x4BB\x3x\x3x\x3x\x3x\x5x\x4C2\nx\x3x\x3x\x3x\x3x\x3x\x3x\x5x"+
		"\x4CA\nx\x3x\x3x\x3x\x3x\x3x\x5x\x4D1\nx\x3y\x3y\x3y\x3y\x3z\x5z\x4D8"+
		"\nz\x3z\x3z\x3z\x3z\x3{\x3{\x5{\x4E0\n{\x3{\x3{\x3{\x3|\x3|\x3|\x3|\x3"+
		"}\x3}\x5}\x4EB\n}\x3~\x3~\x5~\x4EF\n~\x3\x7F\x3\x7F\x3\x80\x3\x80\x5\x80"+
		"\x4F5\n\x80\x3\x81\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\x3\x82\x3\x82\x3"+
		"\x83\x3\x83\x5\x83\x501\n\x83\x3\x83\x5\x83\x504\n\x83\x3\x83\x3\x83\x3"+
		"\x83\x3\x83\x5\x83\x50A\n\x83\x3\x83\x3\x83\x5\x83\x50E\n\x83\x3\x83\x3"+
		"\x83\x3\x83\x3\x83\x3\x83\x5\x83\x515\n\x83\x5\x83\x517\n\x83\x3\x84\x3"+
		"\x84\x3\x84\a\x84\x51C\n\x84\f\x84\xE\x84\x51F\v\x84\x3\x85\x3\x85\x3"+
		"\x86\x3\x86\x3\x86\x3\x87\x3\x87\x3\x88\x3\x88\x3\x88\x3\x88\x3\x89\x3"+
		"\x89\x3\x89\a\x89\x52F\n\x89\f\x89\xE\x89\x532\v\x89\x3\x8A\x3\x8A\x3"+
		"\x8A\x3\x8A\x5\x8A\x538\n\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x5\x8B"+
		"\x53F\n\x8B\x3\x8C\x3\x8C\x3\x8C\a\x8C\x544\n\x8C\f\x8C\xE\x8C\x547\v"+
		"\x8C\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3"+
		"\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x90\x3\x90\x3\x90\x3\x91\x3\x91\x3\x91\a"+
		"\x91\x55C\n\x91\f\x91\xE\x91\x55F\v\x91\x3\x92\x3\x92\x3\x93\x3\x93\x5"+
		"\x93\x565\n\x93\x3\x94\x3\x94\x3\x94\x3\x94\x5\x94\x56B\n\x94\x3\x94\x3"+
		"\x94\x5\x94\x56F\n\x94\x3\x94\x3\x94\x5\x94\x573\n\x94\x3\x94\a\x94\x576"+
		"\n\x94\f\x94\xE\x94\x579\v\x94\x3\x95\x3\x95\x5\x95\x57D\n\x95\x3\x96"+
		"\x3\x96\x3\x96\x3\x96\x5\x96\x583\n\x96\x3\x96\x3\x96\x5\x96\x587\n\x96"+
		"\x3\x96\x3\x96\x5\x96\x58B\n\x96\x3\x96\a\x96\x58E\n\x96\f\x96\xE\x96"+
		"\x591\v\x96\x3\x97\x3\x97\x5\x97\x595\n\x97\x3\x98\x3\x98\x3\x98\x3\x98"+
		"\x3\x98\x5\x98\x59C\n\x98\x3\x99\x3\x99\x5\x99\x5A0\n\x99\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9B\x3\x9B\x5\x9B\x5A7\n\x9B\x3\x9C\x3\x9C\x3\x9C\x3\x9C\x3"+
		"\x9C\x5\x9C\x5AE\n\x9C\x5\x9C\x5B0\n\x9C\x3\x9D\x3\x9D\x5\x9D\x5B4\n\x9D"+
		"\x3\x9D\x3\x9D\x5\x9D\x5B8\n\x9D\x3\x9E\x3\x9E\x3\x9E\a\x9E\x5BD\n\x9E"+
		"\f\x9E\xE\x9E\x5C0\v\x9E\x3\x9F\x3\x9F\x5\x9F\x5C4\n\x9F\x3\xA0\x3\xA0"+
		"\x5\xA0\x5C8\n\xA0\x3\xA1\x3\xA1\x5\xA1\x5CC\n\xA1\x3\xA1\x3\xA1\x3\xA2"+
		"\x3\xA2\x3\xA3\x3\xA3\x3\xA3\x5\xA3\x5D5\n\xA3\x3\xA3\x3\xA3\x3\xA4\x5"+
		"\xA4\x5DA\n\xA4\x3\xA4\x3\xA4\x3\xA5\x3\xA5\x3\xA5\a\xA5\x5E1\n\xA5\f"+
		"\xA5\xE\xA5\x5E4\v\xA5\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA8\x3\xA8\x3\xA9"+
		"\x3\xA9\x3\xA9\x3\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA"+
		"\x5F6\n\xAA\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3"+
		"\xAD\x3\xAE\x5\xAE\x602\n\xAE\x3\xAE\x3\xAE\x5\xAE\x606\n\xAE\x3\xAE\x3"+
		"\xAE\x3\xAE\x3\xAE\x3\xAF\x3\xAF\x5\xAF\x60E\n\xAF\x3\xAF\x3\xAF\x3\xAF"+
		"\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x5\xB0\x618\n\xB0\x3\xB1\x3\xB1\x3"+
		"\xB1\a\xB1\x61D\n\xB1\f\xB1\xE\xB1\x620\v\xB1\x3\xB2\x3\xB2\x3\xB2\x3"+
		"\xB2\x3\xB3\x5\xB3\x627\n\xB3\x3\xB3\x3\xB3\x5\xB3\x62B\n\xB3\x3\xB4\x3"+
		"\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x633\n\xB4\x3\xB5\x3\xB5\x3\xB6"+
		"\x3\xB6\x3\xB6\x5\xB6\x63A\n\xB6\x3\xB6\x3\xB6\x3\xB7\x3\xB7\x3\xB7\x3"+
		"\xB7\x3\xB7\x3\xB8\x3\xB8\x5\xB8\x645\n\xB8\x3\xB9\x3\xB9\x3\xBA\x3\xBA"+
		"\x3\xBB\x5\xBB\x64C\n\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBC\x3\xBC\x3\xBC\x3"+
		"\xBD\x3\xBD\x5\xBD\x656\n\xBD\x3\xBE\x3\xBE\x3\xBF\x3\xBF\x3\xC0\x3\xC0"+
		"\x3\xC0\x5\xC0\x65F\n\xC0\x3\xC0\x3\xC0\x3\xC1\x3\xC1\x3\xC2\x3\xC2\x5"+
		"\xC2\x667\n\xC2\x3\xC3\x3\xC3\x3\xC3\a\xC3\x66C\n\xC3\f\xC3\xE\xC3\x66F"+
		"\v\xC3\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC5\x3\xC5\x3\xC5\a\xC5\x678\n\xC5"+
		"\f\xC5\xE\xC5\x67B\v\xC5\x3\xC6\x3\xC6\x5\xC6\x67F\n\xC6\x3\xC6\x5\xC6"+
		"\x682\n\xC6\x3\xC7\x3\xC7\x3\xC8\x3\xC8\x3\xC8\x3\xC9\x3\xC9\x3\xC9\x3"+
		"\xC9\x5\xC9\x68D\n\xC9\x3\xCA\x3\xCA\x5\xCA\x691\n\xCA\x3\xCA\x3\xCA\x3"+
		"\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x699\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA"+
		"\x5\xCA\x69F\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x6A7"+
		"\n\xCA\x5\xCA\x6A9\n\xCA\x3\xCA\x5\xCA\x6AC\n\xCA\x3\xCA\x2\x2\x2\xCB"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2"+
		"N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2"+
		"l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88"+
		"\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C"+
		"\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0"+
		"\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4"+
		"\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8"+
		"\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC"+
		"\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100"+
		"\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112"+
		"\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124"+
		"\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136"+
		"\x2\x138\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148"+
		"\x2\x14A\x2\x14C\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A"+
		"\x2\x15C\x2\x15E\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C"+
		"\x2\x16E\x2\x170\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E"+
		"\x2\x180\x2\x182\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C\x2\x18E\x2\x190"+
		"\x2\x192\x2\x2\x16\x5\x2\x38RT\xA4\xA6\xA9\x5\x2\x13\x13\x31\x31\x7F\x7F"+
		"\x3\x2\x87\x88\x3\x2\xC6\xC7\xF\x2\x6\x6,,\x38\x38==@@IIPPVV]]\x62\x62"+
		"tuww\x81\x82\x3\x2\xBC\xBD\x3\x2\xBE\xC0\x3\x2z|\x5\x2\t\t\x1F\x1F\x30"+
		"\x30\x5\x2\x14\x14  **\x4\x2\x12\x12\x32\x32\x4\x2\x4\x4\xF\xF\x4\x2\xB0"+
		"\xB0\xB5\xB9\x4\x2\a\a--\x3\x2\xAA\xAD\x4\x2\x6\x6,,\x6\x2\x42\x42SS\x63"+
		"\x64\x85\x85\t\x2;;\x44\x46HHWX_\x61ll\x84\x84\x4\x2  **\x4\x2\b\b\xE"+
		"\xE\x6DD\x2\x194\x3\x2\x2\x2\x4\x19E\x3\x2\x2\x2\x6\x1A0\x3\x2\x2\x2\b"+
		"\x1A2\x3\x2\x2\x2\n\x1A6\x3\x2\x2\x2\f\x1A8\x3\x2\x2\x2\xE\x1EB\x3\x2"+
		"\x2\x2\x10\x1ED\x3\x2\x2\x2\x12\x1F8\x3\x2\x2\x2\x14\x1FB\x3\x2\x2\x2"+
		"\x16\x1FD\x3\x2\x2\x2\x18\x209\x3\x2\x2\x2\x1A\x20D\x3\x2\x2\x2\x1C\x210"+
		"\x3\x2\x2\x2\x1E\x213\x3\x2\x2\x2 \x219\x3\x2\x2\x2\"\x21B\x3\x2\x2\x2"+
		"$\x225\x3\x2\x2\x2&\x22D\x3\x2\x2\x2(\x23F\x3\x2\x2\x2*\x24C\x3\x2\x2"+
		"\x2,\x254\x3\x2\x2\x2.\x257\x3\x2\x2\x2\x30\x25A\x3\x2\x2\x2\x32\x264"+
		"\x3\x2\x2\x2\x34\x26C\x3\x2\x2\x2\x36\x276\x3\x2\x2\x2\x38\x27B\x3\x2"+
		"\x2\x2:\x27D\x3\x2\x2\x2<\x285\x3\x2\x2\x2>\x287\x3\x2\x2\x2@\x28B\x3"+
		"\x2\x2\x2\x42\x290\x3\x2\x2\x2\x44\x295\x3\x2\x2\x2\x46\x297\x3\x2\x2"+
		"\x2H\x29A\x3\x2\x2\x2J\x29D\x3\x2\x2\x2L\x2A0\x3\x2\x2\x2N\x2A2\x3\x2"+
		"\x2\x2P\x2AD\x3\x2\x2\x2R\x2AF\x3\x2\x2\x2T\x2C8\x3\x2\x2\x2V\x2CA\x3"+
		"\x2\x2\x2X\x2F1\x3\x2\x2\x2Z\x2FB\x3\x2\x2\x2\\\x2FF\x3\x2\x2\x2^\x316"+
		"\x3\x2\x2\x2`\x322\x3\x2\x2\x2\x62\x32C\x3\x2\x2\x2\x64\x32E\x3\x2\x2"+
		"\x2\x66\x33D\x3\x2\x2\x2h\x34C\x3\x2\x2\x2j\x35B\x3\x2\x2\x2l\x35F\x3"+
		"\x2\x2\x2n\x361\x3\x2\x2\x2p\x36C\x3\x2\x2\x2r\x36E\x3\x2\x2\x2t\x370"+
		"\x3\x2\x2\x2v\x373\x3\x2\x2\x2x\x377\x3\x2\x2\x2z\x381\x3\x2\x2\x2|\x383"+
		"\x3\x2\x2\x2~\x38B\x3\x2\x2\x2\x80\x38D\x3\x2\x2\x2\x82\x393\x3\x2\x2"+
		"\x2\x84\x398\x3\x2\x2\x2\x86\x3AC\x3\x2\x2\x2\x88\x3B0\x3\x2\x2\x2\x8A"+
		"\x3B2\x3\x2\x2\x2\x8C\x3BE\x3\x2\x2\x2\x8E\x3C9\x3\x2\x2\x2\x90\x3CE\x3"+
		"\x2\x2\x2\x92\x3D3\x3\x2\x2\x2\x94\x3D8\x3\x2\x2\x2\x96\x3DA\x3\x2\x2"+
		"\x2\x98\x3E1\x3\x2\x2\x2\x9A\x3E3\x3\x2\x2\x2\x9C\x3E8\x3\x2\x2\x2\x9E"+
		"\x3ED\x3\x2\x2\x2\xA0\x3EF\x3\x2\x2\x2\xA2\x3F7\x3\x2\x2\x2\xA4\x400\x3"+
		"\x2\x2\x2\xA6\x404\x3\x2\x2\x2\xA8\x418\x3\x2\x2\x2\xAA\x41A\x3\x2\x2"+
		"\x2\xAC\x41C\x3\x2\x2\x2\xAE\x41E\x3\x2\x2\x2\xB0\x428\x3\x2\x2\x2\xB2"+
		"\x42A\x3\x2\x2\x2\xB4\x42E\x3\x2\x2\x2\xB6\x430\x3\x2\x2\x2\xB8\x432\x3"+
		"\x2\x2\x2\xBA\x43A\x3\x2\x2\x2\xBC\x43E\x3\x2\x2\x2\xBE\x440\x3\x2\x2"+
		"\x2\xC0\x442\x3\x2\x2\x2\xC2\x455\x3\x2\x2\x2\xC4\x457\x3\x2\x2\x2\xC6"+
		"\x459\x3\x2\x2\x2\xC8\x45B\x3\x2\x2\x2\xCA\x463\x3\x2\x2\x2\xCC\x46E\x3"+
		"\x2\x2\x2\xCE\x470\x3\x2\x2\x2\xD0\x474\x3\x2\x2\x2\xD2\x47A\x3\x2\x2"+
		"\x2\xD4\x47E\x3\x2\x2\x2\xD6\x482\x3\x2\x2\x2\xD8\x484\x3\x2\x2\x2\xDA"+
		"\x48A\x3\x2\x2\x2\xDC\x48C\x3\x2\x2\x2\xDE\x48E\x3\x2\x2\x2\xE0\x492\x3"+
		"\x2\x2\x2\xE2\x496\x3\x2\x2\x2\xE4\x498\x3\x2\x2\x2\xE6\x4A8\x3\x2\x2"+
		"\x2\xE8\x4AB\x3\x2\x2\x2\xEA\x4B5\x3\x2\x2\x2\xEC\x4B7\x3\x2\x2\x2\xEE"+
		"\x4D0\x3\x2\x2\x2\xF0\x4D2\x3\x2\x2\x2\xF2\x4D7\x3\x2\x2\x2\xF4\x4DD\x3"+
		"\x2\x2\x2\xF6\x4E4\x3\x2\x2\x2\xF8\x4EA\x3\x2\x2\x2\xFA\x4EC\x3\x2\x2"+
		"\x2\xFC\x4F0\x3\x2\x2\x2\xFE\x4F4\x3\x2\x2\x2\x100\x4F6\x3\x2\x2\x2\x102"+
		"\x4F9\x3\x2\x2\x2\x104\x516\x3\x2\x2\x2\x106\x518\x3\x2\x2\x2\x108\x520"+
		"\x3\x2\x2\x2\x10A\x522\x3\x2\x2\x2\x10C\x525\x3\x2\x2\x2\x10E\x527\x3"+
		"\x2\x2\x2\x110\x52B\x3\x2\x2\x2\x112\x537\x3\x2\x2\x2\x114\x53E\x3\x2"+
		"\x2\x2\x116\x540\x3\x2\x2\x2\x118\x548\x3\x2\x2\x2\x11A\x54D\x3\x2\x2"+
		"\x2\x11C\x552\x3\x2\x2\x2\x11E\x555\x3\x2\x2\x2\x120\x558\x3\x2\x2\x2"+
		"\x122\x560\x3\x2\x2\x2\x124\x564\x3\x2\x2\x2\x126\x56E\x3\x2\x2\x2\x128"+
		"\x57C\x3\x2\x2\x2\x12A\x586\x3\x2\x2\x2\x12C\x594\x3\x2\x2\x2\x12E\x59B"+
		"\x3\x2\x2\x2\x130\x59F\x3\x2\x2\x2\x132\x5A1\x3\x2\x2\x2\x134\x5A6\x3"+
		"\x2\x2\x2\x136\x5A8\x3\x2\x2\x2\x138\x5B1\x3\x2\x2\x2\x13A\x5B9\x3\x2"+
		"\x2\x2\x13C\x5C3\x3\x2\x2\x2\x13E\x5C5\x3\x2\x2\x2\x140\x5CB\x3\x2\x2"+
		"\x2\x142\x5CF\x3\x2\x2\x2\x144\x5D4\x3\x2\x2\x2\x146\x5D9\x3\x2\x2\x2"+
		"\x148\x5DD\x3\x2\x2\x2\x14A\x5E5\x3\x2\x2\x2\x14C\x5E7\x3\x2\x2\x2\x14E"+
		"\x5E9\x3\x2\x2\x2\x150\x5EB\x3\x2\x2\x2\x152\x5F5\x3\x2\x2\x2\x154\x5F7"+
		"\x3\x2\x2\x2\x156\x5FB\x3\x2\x2\x2\x158\x5FD\x3\x2\x2\x2\x15A\x601\x3"+
		"\x2\x2\x2\x15C\x60B\x3\x2\x2\x2\x15E\x617\x3\x2\x2\x2\x160\x619\x3\x2"+
		"\x2\x2\x162\x621\x3\x2\x2\x2\x164\x62A\x3\x2\x2\x2\x166\x632\x3\x2\x2"+
		"\x2\x168\x634\x3\x2\x2\x2\x16A\x636\x3\x2\x2\x2\x16C\x63D\x3\x2\x2\x2"+
		"\x16E\x644\x3\x2\x2\x2\x170\x646\x3\x2\x2\x2\x172\x648\x3\x2\x2\x2\x174"+
		"\x64B\x3\x2\x2\x2\x176\x650\x3\x2\x2\x2\x178\x655\x3\x2\x2\x2\x17A\x657"+
		"\x3\x2\x2\x2\x17C\x659\x3\x2\x2\x2\x17E\x65B\x3\x2\x2\x2\x180\x662\x3"+
		"\x2\x2\x2\x182\x666\x3\x2\x2\x2\x184\x668\x3\x2\x2\x2\x186\x670\x3\x2"+
		"\x2\x2\x188\x674\x3\x2\x2\x2\x18A\x67C\x3\x2\x2\x2\x18C\x683\x3\x2\x2"+
		"\x2\x18E\x685\x3\x2\x2\x2\x190\x68C\x3\x2\x2\x2\x192\x6AB\x3\x2\x2\x2"+
		"\x194\x196\x5\x4\x3\x2\x195\x197\a\xB2\x2\x2\x196\x195\x3\x2\x2\x2\x196"+
		"\x197\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x198\x199\a\x2\x2\x3\x199\x3\x3"+
		"\x2\x2\x2\x19A\x19F\x5\x6\x4\x2\x19B\x19F\x5\b\x5\x2\x19C\x19F\x5\n\x6"+
		"\x2\x19D\x19F\x5\f\a\x2\x19E\x19A\x3\x2\x2\x2\x19E\x19B\x3\x2\x2\x2\x19E"+
		"\x19C\x3\x2\x2\x2\x19E\x19D\x3\x2\x2\x2\x19F\x5\x3\x2\x2\x2\x1A0\x1A1"+
		"\x5\x122\x92\x2\x1A1\a\x3\x2\x2\x2\x1A2\x1A3\x5\x192\xCA\x2\x1A3\t\x3"+
		"\x2\x2\x2\x1A4\x1A7\x5\xE\b\x2\x1A5\x1A7\x5:\x1E\x2\x1A6\x1A4\x3\x2\x2"+
		"\x2\x1A6\x1A5\x3\x2\x2\x2\x1A7\v\x3\x2\x2\x2\x1A8\x1AA\a\f\x2\x2\x1A9"+
		"\x1AB\a\x33\x2\x2\x1AA\x1A9\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2\x1AB\x1AC"+
		"\x3\x2\x2\x2\x1AC\x1AD\aT\x2\x2\x1AD\x1AE\x5<\x1F\x2\x1AE\x1AF\a&\x2\x2"+
		"\x1AF\x1B1\x5\x136\x9C\x2\x1B0\x1B2\x5\x1A\xE\x2\x1B1\x1B0\x3\x2\x2\x2"+
		"\x1B1\x1B2\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x1B4\a\xBA\x2\x2\x1B4"+
		"\x1B5\x5\x188\xC5\x2\x1B5\x1B7\a\xBB\x2\x2\x1B6\x1B8\x5\x16\f\x2\x1B7"+
		"\x1B6\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8\r\x3\x2\x2\x2\x1B9\x1BA\a"+
		"\f\x2\x2\x1BA\x1BB\aK\x2\x2\x1BB\x1BC\a.\x2\x2\x1BC\x1BD\x5\x136\x9C\x2"+
		"\x1BD\x1BE\x5\x10\t\x2\x1BE\x1BF\a\x34\x2\x2\x1BF\x1C1\x5<\x1F\x2\x1C0"+
		"\x1C2\x5\x16\f\x2\x1C1\x1C0\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C4"+
		"\x3\x2\x2\x2\x1C3\x1C5\x5 \x11\x2\x1C4\x1C3\x3\x2\x2\x2\x1C4\x1C5\x3\x2"+
		"\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C7\a\\\x2\x2\x1C7\x1C8\a\xCB\x2\x2"+
		"\x1C8\x1EC\x3\x2\x2\x2\x1C9\x1CA\a\f\x2\x2\x1CA\x1CB\a.\x2\x2\x1CB\x1CC"+
		"\x5\x136\x9C\x2\x1CC\x1CF\x5\x10\t\x2\x1CD\x1CE\a\x34\x2\x2\x1CE\x1D0"+
		"\x5<\x1F\x2\x1CF\x1CD\x3\x2\x2\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0\x1D2\x3\x2"+
		"\x2\x2\x1D1\x1D3\x5\x16\f\x2\x1D2\x1D1\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2"+
		"\x2\x1D3\x1D5\x3\x2\x2\x2\x1D4\x1D6\x5 \x11\x2\x1D5\x1D4\x3\x2\x2\x2\x1D5"+
		"\x1D6\x3\x2\x2\x2\x1D6\x1D9\x3\x2\x2\x2\x1D7\x1D8\a\x3\x2\x2\x1D8\x1DA"+
		"\x5\x122\x92\x2\x1D9\x1D7\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1EC"+
		"\x3\x2\x2\x2\x1DB\x1DC\a\f\x2\x2\x1DC\x1DD\a.\x2\x2\x1DD\x1E0\x5\x136"+
		"\x9C\x2\x1DE\x1DF\a\x34\x2\x2\x1DF\x1E1\x5<\x1F\x2\x1E0\x1DE\x3\x2\x2"+
		"\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1\x1E3\x3\x2\x2\x2\x1E2\x1E4\x5\x16\f\x2"+
		"\x1E3\x1E2\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1E6\x3\x2\x2\x2\x1E5"+
		"\x1E7\x5 \x11\x2\x1E6\x1E5\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1E8"+
		"\x3\x2\x2\x2\x1E8\x1E9\a\x3\x2\x2\x1E9\x1EA\x5\x122\x92\x2\x1EA\x1EC\x3"+
		"\x2\x2\x2\x1EB\x1B9\x3\x2\x2\x2\x1EB\x1C9\x3\x2\x2\x2\x1EB\x1DB\x3\x2"+
		"\x2\x2\x1EC\xF\x3\x2\x2\x2\x1ED\x1EE\a\xBA\x2\x2\x1EE\x1F3\x5\x12\n\x2"+
		"\x1EF\x1F0\a\xB3\x2\x2\x1F0\x1F2\x5\x12\n\x2\x1F1\x1EF\x3\x2\x2\x2\x1F2"+
		"\x1F5\x3\x2\x2\x2\x1F3\x1F1\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F6"+
		"\x3\x2\x2\x2\x1F5\x1F3\x3\x2\x2\x2\x1F6\x1F7\a\xBB\x2\x2\x1F7\x11\x3\x2"+
		"\x2\x2\x1F8\x1F9\x5<\x1F\x2\x1F9\x1FA\x5\x14\v\x2\x1FA\x13\x3\x2\x2\x2"+
		"\x1FB\x1FC\x5N(\x2\x1FC\x15\x3\x2\x2\x2\x1FD\x1FE\a\x37\x2\x2\x1FE\x1FF"+
		"\a\xBA\x2\x2\x1FF\x204\x5\x18\r\x2\x200\x201\a\xB3\x2\x2\x201\x203\x5"+
		"\x18\r\x2\x202\x200\x3\x2\x2\x2\x203\x206\x3\x2\x2\x2\x204\x202\x3\x2"+
		"\x2\x2\x204\x205\x3\x2\x2\x2\x205\x207\x3\x2\x2\x2\x206\x204\x3\x2\x2"+
		"\x2\x207\x208\a\xBB\x2\x2\x208\x17\x3\x2\x2\x2\x209\x20A\a\xCB\x2\x2\x20A"+
		"\x20B\a\xB0\x2\x2\x20B\x20C\x5\xA0Q\x2\x20C\x19\x3\x2\x2\x2\x20D\x20E"+
		"\a\x34\x2\x2\x20E\x20F\x5<\x1F\x2\x20F\x1B\x3\x2\x2\x2\x210\x211\ax\x2"+
		"\x2\x211\x212\x5\x1E\x10\x2\x212\x1D\x3\x2\x2\x2\x213\x214\x5<\x1F\x2"+
		"\x214\x1F\x3\x2\x2\x2\x215\x21A\x5\"\x12\x2\x216\x21A\x5(\x15\x2\x217"+
		"\x21A\x5\x30\x19\x2\x218\x21A\x5\x36\x1C\x2\x219\x215\x3\x2\x2\x2\x219"+
		"\x216\x3\x2\x2\x2\x219\x217\x3\x2\x2\x2\x219\x218\x3\x2\x2\x2\x21A!\x3"+
		"\x2\x2\x2\x21B\x21C\ah\x2\x2\x21C\x21D\a:\x2\x2\x21D\x21E\am\x2\x2\x21E"+
		"\x21F\a\xBA\x2\x2\x21F\x220\x5\x148\xA5\x2\x220\x221\a\xBB\x2\x2\x221"+
		"\x222\a\xBA\x2\x2\x222\x223\x5$\x13\x2\x223\x224\a\xBB\x2\x2\x224#\x3"+
		"\x2\x2\x2\x225\x22A\x5&\x14\x2\x226\x227\a\xB3\x2\x2\x227\x229\x5&\x14"+
		"\x2\x228\x226\x3\x2\x2\x2\x229\x22C\x3\x2\x2\x2\x22A\x228\x3\x2\x2\x2"+
		"\x22A\x22B\x3\x2\x2\x2\x22B%\x3\x2\x2\x2\x22C\x22A\x3\x2\x2\x2\x22D\x22E"+
		"\ah\x2\x2\x22E\x22F\x5\x38\x1D\x2\x22F\x230\a\x80\x2\x2\x230\x231\aZ\x2"+
		"\x2\x231\x23D\ay\x2\x2\x232\x233\a\xBA\x2\x2\x233\x234\x5\x9CO\x2\x234"+
		"\x235\a\xBB\x2\x2\x235\x23E\x3\x2\x2\x2\x236\x238\a\xBA\x2\x2\x237\x236"+
		"\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x23B\a^"+
		"\x2\x2\x23A\x23C\a\xBB\x2\x2\x23B\x23A\x3\x2\x2\x2\x23B\x23C\x3\x2\x2"+
		"\x2\x23C\x23E\x3\x2\x2\x2\x23D\x232\x3\x2\x2\x2\x23D\x237\x3\x2\x2\x2"+
		"\x23E\'\x3\x2\x2\x2\x23F\x240\ah\x2\x2\x240\x241\a:\x2\x2\x241\x242\a"+
		"R\x2\x2\x242\x243\a\xBA\x2\x2\x243\x244\x5\x148\xA5\x2\x244\x24A\a\xBB"+
		"\x2\x2\x245\x246\a\xBA\x2\x2\x246\x247\x5*\x16\x2\x247\x248\a\xBB\x2\x2"+
		"\x248\x24B\x3\x2\x2\x2\x249\x24B\x5.\x18\x2\x24A\x245\x3\x2\x2\x2\x24A"+
		"\x249\x3\x2\x2\x2\x24B)\x3\x2\x2\x2\x24C\x251\x5,\x17\x2\x24D\x24E\a\xB3"+
		"\x2\x2\x24E\x250\x5,\x17\x2\x24F\x24D\x3\x2\x2\x2\x250\x253\x3\x2\x2\x2"+
		"\x251\x24F\x3\x2\x2\x2\x251\x252\x3\x2\x2\x2\x252+\x3\x2\x2\x2\x253\x251"+
		"\x3\x2\x2\x2\x254\x255\ah\x2\x2\x255\x256\x5\x38\x1D\x2\x256-\x3\x2\x2"+
		"\x2\x257\x258\ai\x2\x2\x258\x259\x5\xA0Q\x2\x259/\x3\x2\x2\x2\x25A\x25B"+
		"\ah\x2\x2\x25B\x25C\a:\x2\x2\x25C\x25D\a[\x2\x2\x25D\x25E\a\xBA\x2\x2"+
		"\x25E\x25F\x5\x148\xA5\x2\x25F\x260\a\xBB\x2\x2\x260\x261\a\xBA\x2\x2"+
		"\x261\x262\x5\x32\x1A\x2\x262\x263\a\xBB\x2\x2\x263\x31\x3\x2\x2\x2\x264"+
		"\x269\x5\x34\x1B\x2\x265\x266\a\xB3\x2\x2\x266\x268\x5\x34\x1B\x2\x267"+
		"\x265\x3\x2\x2\x2\x268\x26B\x3\x2\x2\x2\x269\x267\x3\x2\x2\x2\x269\x26A"+
		"\x3\x2\x2\x2\x26A\x33\x3\x2\x2\x2\x26B\x269\x3\x2\x2\x2\x26C\x26D\ah\x2"+
		"\x2\x26D\x26E\x5\x38\x1D\x2\x26E\x270\a\x80\x2\x2\x26F\x271\a\x19\x2\x2"+
		"\x270\x26F\x3\x2\x2\x2\x270\x271\x3\x2\x2\x2\x271\x272\x3\x2\x2\x2\x272"+
		"\x273\a\xBA\x2\x2\x273\x274\x5\x160\xB1\x2\x274\x275\a\xBB\x2\x2\x275"+
		"\x35\x3\x2\x2\x2\x276\x277\ah\x2\x2\x277\x278\a:\x2\x2\x278\x279\a?\x2"+
		"\x2\x279\x27A\x5\x10\t\x2\x27A\x37\x3\x2\x2\x2\x27B\x27C\x5<\x1F\x2\x27C"+
		"\x39\x3\x2\x2\x2\x27D\x27E\aG\x2\x2\x27E\x27F\a.\x2\x2\x27F\x281\x5\x136"+
		"\x9C\x2\x280\x282\ak\x2\x2\x281\x280\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2"+
		"\x282;\x3\x2\x2\x2\x283\x286\a\xCA\x2\x2\x284\x286\x5> \x2\x285\x283\x3"+
		"\x2\x2\x2\x285\x284\x3\x2\x2\x2\x286=\x3\x2\x2\x2\x287\x288\t\x2\x2\x2"+
		"\x288?\x3\x2\x2\x2\x289\x28C\x5t;\x2\x28A\x28C\x5\x42\"\x2\x28B\x289\x3"+
		"\x2\x2\x2\x28B\x28A\x3\x2\x2\x2\x28C\x41\x3\x2\x2\x2\x28D\x291\a\xCB\x2"+
		"\x2\x28E\x291\x5\x44#\x2\x28F\x291\x5L\'\x2\x290\x28D\x3\x2\x2\x2\x290"+
		"\x28E\x3\x2\x2\x2\x290\x28F\x3\x2\x2\x2\x291\x43\x3\x2\x2\x2\x292\x296"+
		"\x5H%\x2\x293\x296\x5\x46$\x2\x294\x296\x5J&\x2\x295\x292\x3\x2\x2\x2"+
		"\x295\x293\x3\x2\x2\x2\x295\x294\x3\x2\x2\x2\x296\x45\x3\x2\x2\x2\x297"+
		"\x298\a\xA0\x2\x2\x298\x299\a\xCB\x2\x2\x299G\x3\x2\x2\x2\x29A\x29B\a"+
		"\xA2\x2\x2\x29B\x29C\a\xCB\x2\x2\x29CI\x3\x2\x2\x2\x29D\x29E\a\x9F\x2"+
		"\x2\x29E\x29F\a\xCB\x2\x2\x29FK\x3\x2\x2\x2\x2A0\x2A1\t\x3\x2\x2\x2A1"+
		"M\x3\x2\x2\x2\x2A2\x2A3\x5P)\x2\x2A3O\x3\x2\x2\x2\x2A4\x2AE\x5T+\x2\x2A5"+
		"\x2AE\x5X-\x2\x2A6\x2AE\x5Z.\x2\x2A7\x2AE\x5\\/\x2\x2A8\x2AE\x5\x64\x33"+
		"\x2\x2A9\x2AE\x5\x66\x34\x2\x2AA\x2AE\x5h\x35\x2\x2AB\x2AE\x5j\x36\x2"+
		"\x2AC\x2AE\x5R*\x2\x2AD\x2A4\x3\x2\x2\x2\x2AD\x2A5\x3\x2\x2\x2\x2AD\x2A6"+
		"\x3\x2\x2\x2\x2AD\x2A7\x3\x2\x2\x2\x2AD\x2A8\x3\x2\x2\x2\x2AD\x2A9\x3"+
		"\x2\x2\x2\x2AD\x2AA\x3\x2\x2\x2\x2AD\x2AB\x3\x2\x2\x2\x2AD\x2AC\x3\x2"+
		"\x2\x2\x2AEQ\x3\x2\x2\x2\x2AF\x2B0\a\xA9\x2\x2\x2B0S\x3\x2\x2\x2\x2B1"+
		"\x2B3\a<\x2\x2\x2B2\x2B4\x5V,\x2\x2B3\x2B2\x3\x2\x2\x2\x2B3\x2B4\x3\x2"+
		"\x2\x2\x2B4\x2C9\x3\x2\x2\x2\x2B5\x2B7\a\x9B\x2\x2\x2B6\x2B8\x5V,\x2\x2B7"+
		"\x2B6\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8\x2C9\x3\x2\x2\x2\x2B9\x2BA"+
		"\a<\x2\x2\x2BA\x2BC\a\x83\x2\x2\x2BB\x2BD\x5V,\x2\x2BC\x2BB\x3\x2\x2\x2"+
		"\x2BC\x2BD\x3\x2\x2\x2\x2BD\x2C9\x3\x2\x2\x2\x2BE\x2BF\a\x9B\x2\x2\x2BF"+
		"\x2C1\a\x83\x2\x2\x2C0\x2C2\x5V,\x2\x2C1\x2C0\x3\x2\x2\x2\x2C1\x2C2\x3"+
		"\x2\x2\x2\x2C2\x2C9\x3\x2\x2\x2\x2C3\x2C5\a\x9C\x2\x2\x2C4\x2C6\x5V,\x2"+
		"\x2C5\x2C4\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6\x2C9\x3\x2\x2\x2\x2C7"+
		"\x2C9\a\xA4\x2\x2\x2C8\x2B1\x3\x2\x2\x2\x2C8\x2B5\x3\x2\x2\x2\x2C8\x2B9"+
		"\x3\x2\x2\x2\x2C8\x2BE\x3\x2\x2\x2\x2C8\x2C3\x3\x2\x2\x2\x2C8\x2C7\x3"+
		"\x2\x2\x2\x2C9U\x3\x2\x2\x2\x2CA\x2CB\a\xBA\x2\x2\x2CB\x2CC\a\xC6\x2\x2"+
		"\x2CC\x2CD\a\xBB\x2\x2\x2CDW\x3\x2\x2\x2\x2CE\x2CF\a\x65\x2\x2\x2CF\x2D1"+
		"\a<\x2\x2\x2D0\x2D2\x5V,\x2\x2D1\x2D0\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2"+
		"\x2D2\x2F2\x3\x2\x2\x2\x2D3\x2D4\a\x65\x2\x2\x2D4\x2D6\a\x9B\x2\x2\x2D5"+
		"\x2D7\x5V,\x2\x2D6\x2D5\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2F2\x3"+
		"\x2\x2\x2\x2D8\x2DA\a\x9D\x2\x2\x2D9\x2DB\x5V,\x2\x2DA\x2D9\x3\x2\x2\x2"+
		"\x2DA\x2DB\x3\x2\x2\x2\x2DB\x2F2\x3\x2\x2\x2\x2DC\x2DD\a\x65\x2\x2\x2DD"+
		"\x2DE\a<\x2\x2\x2DE\x2E0\a\x83\x2\x2\x2DF\x2E1\x5V,\x2\x2E0\x2DF\x3\x2"+
		"\x2\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1\x2F2\x3\x2\x2\x2\x2E2\x2E3\a\x65\x2"+
		"\x2\x2E3\x2E4\a\x9B\x2\x2\x2E4\x2E6\a\x83\x2\x2\x2E5\x2E7\x5V,\x2\x2E6"+
		"\x2E5\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2F2\x3\x2\x2\x2\x2E8\x2E9"+
		"\a\x9D\x2\x2\x2E9\x2EB\a\x83\x2\x2\x2EA\x2EC\x5V,\x2\x2EB\x2EA\x3\x2\x2"+
		"\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2F2\x3\x2\x2\x2\x2ED\x2EF\a\x9E\x2\x2"+
		"\x2EE\x2F0\x5V,\x2\x2EF\x2EE\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0\x2F2"+
		"\x3\x2\x2\x2\x2F1\x2CE\x3\x2\x2\x2\x2F1\x2D3\x3\x2\x2\x2\x2F1\x2D8\x3"+
		"\x2\x2\x2\x2F1\x2DC\x3\x2\x2\x2\x2F1\x2E2\x3\x2\x2\x2\x2F1\x2E8\x3\x2"+
		"\x2\x2\x2F1\x2ED\x3\x2\x2\x2\x2F2Y\x3\x2\x2\x2\x2F3\x2F5\a\xA7\x2\x2\x2F4"+
		"\x2F6\x5V,\x2\x2F5\x2F4\x3\x2\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6\x2FC\x3"+
		"\x2\x2\x2\x2F7\x2F9\a\xA8\x2\x2\x2F8\x2FA\x5V,\x2\x2F9\x2F8\x3\x2\x2\x2"+
		"\x2F9\x2FA\x3\x2\x2\x2\x2FA\x2FC\x3\x2\x2\x2\x2FB\x2F3\x3\x2\x2\x2\x2FB"+
		"\x2F7\x3\x2\x2\x2\x2FC[\x3\x2\x2\x2\x2FD\x300\x5^\x30\x2\x2FE\x300\x5"+
		"`\x31\x2\x2FF\x2FD\x3\x2\x2\x2\x2FF\x2FE\x3\x2\x2\x2\x300]\x3\x2\x2\x2"+
		"\x301\x303\a\x99\x2\x2\x302\x304\x5\x62\x32\x2\x303\x302\x3\x2\x2\x2\x303"+
		"\x304\x3\x2\x2\x2\x304\x317\x3\x2\x2\x2\x305\x307\a\x9A\x2\x2\x306\x308"+
		"\x5\x62\x32\x2\x307\x306\x3\x2\x2\x2\x307\x308\x3\x2\x2\x2\x308\x317\x3"+
		"\x2\x2\x2\x309\x30B\a\x43\x2\x2\x30A\x30C\x5\x62\x32\x2\x30B\x30A\x3\x2"+
		"\x2\x2\x30B\x30C\x3\x2\x2\x2\x30C\x317\x3\x2\x2\x2\x30D\x317\a\x8B\x2"+
		"\x2\x30E\x317\a\x8F\x2\x2\x30F\x317\a\x8C\x2\x2\x310\x317\a\x90\x2\x2"+
		"\x311\x317\a\x8D\x2\x2\x312\x317\a\x91\x2\x2\x313\x317\a\x92\x2\x2\x314"+
		"\x317\a\x8E\x2\x2\x315\x317\a\x93\x2\x2\x316\x301\x3\x2\x2\x2\x316\x305"+
		"\x3\x2\x2\x2\x316\x309\x3\x2\x2\x2\x316\x30D\x3\x2\x2\x2\x316\x30E\x3"+
		"\x2\x2\x2\x316\x30F\x3\x2\x2\x2\x316\x310\x3\x2\x2\x2\x316\x311\x3\x2"+
		"\x2\x2\x316\x312\x3\x2\x2\x2\x316\x313\x3\x2\x2\x2\x316\x314\x3\x2\x2"+
		"\x2\x316\x315\x3\x2\x2\x2\x317_\x3\x2\x2\x2\x318\x31A\a\x97\x2\x2\x319"+
		"\x31B\x5\x62\x32\x2\x31A\x319\x3\x2\x2\x2\x31A\x31B\x3\x2\x2\x2\x31B\x323"+
		"\x3\x2\x2\x2\x31C\x323\a\x94\x2\x2\x31D\x323\a\x96\x2\x2\x31E\x323\a\x95"+
		"\x2\x2\x31F\x323\a\x98\x2\x2\x320\x321\a\x98\x2\x2\x321\x323\aj\x2\x2"+
		"\x322\x318\x3\x2\x2\x2\x322\x31C\x3\x2\x2\x2\x322\x31D\x3\x2\x2\x2\x322"+
		"\x31E\x3\x2\x2\x2\x322\x31F\x3\x2\x2\x2\x322\x320\x3\x2\x2\x2\x323\x61"+
		"\x3\x2\x2\x2\x324\x325\a\xBA\x2\x2\x325\x326\a\xC6\x2\x2\x326\x32D\a\xBB"+
		"\x2\x2\x327\x328\a\xBA\x2\x2\x328\x329\a\xC6\x2\x2\x329\x32A\a\xB3\x2"+
		"\x2\x32A\x32B\a\xC6\x2\x2\x32B\x32D\a\xBB\x2\x2\x32C\x324\x3\x2\x2\x2"+
		"\x32C\x327\x3\x2\x2\x2\x32D\x63\x3\x2\x2\x2\x32E\x32F\t\x4\x2\x2\x32F"+
		"\x65\x3\x2\x2\x2\x330\x33E\a\x9F\x2\x2\x331\x33E\a\xA0\x2\x2\x332\x333"+
		"\a\xA0\x2\x2\x333\x334\a\x37\x2\x2\x334\x335\a\xA0\x2\x2\x335\x33E\a\x86"+
		"\x2\x2\x336\x33E\a\xA1\x2\x2\x337\x33E\a\xA2\x2\x2\x338\x339\a\xA2\x2"+
		"\x2\x339\x33A\a\x37\x2\x2\x33A\x33B\a\xA0\x2\x2\x33B\x33E\a\x86\x2\x2"+
		"\x33C\x33E\a\xA3\x2\x2\x33D\x330\x3\x2\x2\x2\x33D\x331\x3\x2\x2\x2\x33D"+
		"\x332\x3\x2\x2\x2\x33D\x336\x3\x2\x2\x2\x33D\x337\x3\x2\x2\x2\x33D\x338"+
		"\x3\x2\x2\x2\x33D\x33C\x3\x2\x2\x2\x33Eg\x3\x2\x2\x2\x33F\x341\a\x89\x2"+
		"\x2\x340\x342\x5V,\x2\x341\x340\x3\x2\x2\x2\x341\x342\x3\x2\x2\x2\x342"+
		"\x34D\x3\x2\x2\x2\x343\x345\a\x8A\x2\x2\x344\x346\x5V,\x2\x345\x344\x3"+
		"\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346\x34D\x3\x2\x2\x2\x347\x348\a\x89"+
		"\x2\x2\x348\x34A\a\x83\x2\x2\x349\x34B\x5V,\x2\x34A\x349\x3\x2\x2\x2\x34A"+
		"\x34B\x3\x2\x2\x2\x34B\x34D\x3\x2\x2\x2\x34C\x33F\x3\x2\x2\x2\x34C\x343"+
		"\x3\x2\x2\x2\x34C\x347\x3\x2\x2\x2\x34Di\x3\x2\x2\x2\x34E\x350\a\xA5\x2"+
		"\x2\x34F\x351\x5V,\x2\x350\x34F\x3\x2\x2\x2\x350\x351\x3\x2\x2\x2\x351"+
		"\x35C\x3\x2\x2\x2\x352\x353\a\xA5\x2\x2\x353\x355\a\x83\x2\x2\x354\x356"+
		"\x5V,\x2\x355\x354\x3\x2\x2\x2\x355\x356\x3\x2\x2\x2\x356\x35C\x3\x2\x2"+
		"\x2\x357\x359\a\xA6\x2\x2\x358\x35A\x5V,\x2\x359\x358\x3\x2\x2\x2\x359"+
		"\x35A\x3\x2\x2\x2\x35A\x35C\x3\x2\x2\x2\x35B\x34E\x3\x2\x2\x2\x35B\x352"+
		"\x3\x2\x2\x2\x35B\x357\x3\x2\x2\x2\x35Ck\x3\x2\x2\x2\x35D\x360\x5n\x38"+
		"\x2\x35E\x360\x5p\x39\x2\x35F\x35D\x3\x2\x2\x2\x35F\x35E\x3\x2\x2\x2\x360"+
		"m\x3\x2\x2\x2\x361\x362\a\xBA\x2\x2\x362\x363\x5\x9CO\x2\x363\x364\a\xBB"+
		"\x2\x2\x364o\x3\x2\x2\x2\x365\x36D\x5r:\x2\x366\x36D\x5\x144\xA3\x2\x367"+
		"\x36D\x5x=\x2\x368\x36D\x5\x14A\xA6\x2\x369\x36D\x5\x84\x43\x2\x36A\x36D"+
		"\x5\x96L\x2\x36B\x36D\x5\x17E\xC0\x2\x36C\x365\x3\x2\x2\x2\x36C\x366\x3"+
		"\x2\x2\x2\x36C\x367\x3\x2\x2\x2\x36C\x368\x3\x2\x2\x2\x36C\x369\x3\x2"+
		"\x2\x2\x36C\x36A\x3\x2\x2\x2\x36C\x36B\x3\x2\x2\x2\x36Dq\x3\x2\x2\x2\x36E"+
		"\x36F\x5@!\x2\x36Fs\x3\x2\x2\x2\x370\x371\t\x5\x2\x2\x371u\x3\x2\x2\x2"+
		"\x372\x374\x5\xAAV\x2\x373\x372\x3\x2\x2\x2\x373\x374\x3\x2\x2\x2\x374"+
		"\x375\x3\x2\x2\x2\x375\x376\x5t;\x2\x376w\x3\x2\x2\x2\x377\x378\x5z>\x2"+
		"\x378y\x3\x2\x2\x2\x379\x37A\a@\x2\x2\x37A\x37B\a\xBA\x2\x2\x37B\x37C"+
		"\a\xBE\x2\x2\x37C\x382\a\xBB\x2\x2\x37D\x37F\x5|?\x2\x37E\x380\x5\x80"+
		"\x41\x2\x37F\x37E\x3\x2\x2\x2\x37F\x380\x3\x2\x2\x2\x380\x382\x3\x2\x2"+
		"\x2\x381\x379\x3\x2\x2\x2\x381\x37D\x3\x2\x2\x2\x382{\x3\x2\x2\x2\x383"+
		"\x384\x5~@\x2\x384\x386\a\xBA\x2\x2\x385\x387\x5\x142\xA2\x2\x386\x385"+
		"\x3\x2\x2\x2\x386\x387\x3\x2\x2\x2\x387\x388\x3\x2\x2\x2\x388\x389\x5"+
		"\x9CO\x2\x389\x38A\a\xBB\x2\x2\x38A}\x3\x2\x2\x2\x38B\x38C\t\x6\x2\x2"+
		"\x38C\x7F\x3\x2\x2\x2\x38D\x38E\aM\x2\x2\x38E\x38F\a\xBA\x2\x2\x38F\x390"+
		"\a\x36\x2\x2\x390\x391\x5\x10C\x87\x2\x391\x392\a\xBB\x2\x2\x392\x81\x3"+
		"\x2\x2\x2\x393\x394\aQ\x2\x2\x394\x395\a\xBA\x2\x2\x395\x396\x5\x148\xA5"+
		"\x2\x396\x397\a\xBB\x2\x2\x397\x83\x3\x2\x2\x2\x398\x399\x5\x88\x45\x2"+
		"\x399\x85\x3\x2\x2\x2\x39A\x39B\a\x66\x2\x2\x39B\x39C\a\xBA\x2\x2\x39C"+
		"\x39D\x5\xA0Q\x2\x39D\x39E\a\xB3\x2\x2\x39E\x39F\x5\xC6\x64\x2\x39F\x3A0"+
		"\a\xBB\x2\x2\x3A0\x3AD\x3\x2\x2\x2\x3A1\x3A2\a>\x2\x2\x3A2\x3A3\a\xBA"+
		"\x2\x2\x3A3\x3A6\x5\xA0Q\x2\x3A4\x3A5\a\xB3\x2\x2\x3A5\x3A7\x5\xC6\x64"+
		"\x2\x3A6\x3A4\x3\x2\x2\x2\x3A7\x3A8\x3\x2\x2\x2\x3A8\x3A6\x3\x2\x2\x2"+
		"\x3A8\x3A9\x3\x2\x2\x2\x3A9\x3AA\x3\x2\x2\x2\x3AA\x3AB\a\xBB\x2\x2\x3AB"+
		"\x3AD\x3\x2\x2\x2\x3AC\x39A\x3\x2\x2\x2\x3AC\x3A1\x3\x2\x2\x2\x3AD\x87"+
		"\x3\x2\x2\x2\x3AE\x3B1\x5\x8A\x46\x2\x3AF\x3B1\x5\x8CG\x2\x3B0\x3AE\x3"+
		"\x2\x2\x2\x3B0\x3AF\x3\x2\x2\x2\x3B1\x89\x3\x2\x2\x2\x3B2\x3B3\a\n\x2"+
		"\x2\x3B3\x3B5\x5\xC6\x64\x2\x3B4\x3B6\x5\x8EH\x2\x3B5\x3B4\x3\x2\x2\x2"+
		"\x3B6\x3B7\x3\x2\x2\x2\x3B7\x3B5\x3\x2\x2\x2\x3B7\x3B8\x3\x2\x2\x2\x3B8"+
		"\x3BA\x3\x2\x2\x2\x3B9\x3BB\x5\x92J\x2\x3BA\x3B9\x3\x2\x2\x2\x3BA\x3BB"+
		"\x3\x2\x2\x2\x3BB\x3BC\x3\x2\x2\x2\x3BC\x3BD\a\x10\x2\x2\x3BD\x8B\x3\x2"+
		"\x2\x2\x3BE\x3C0\a\n\x2\x2\x3BF\x3C1\x5\x90I\x2\x3C0\x3BF\x3\x2\x2\x2"+
		"\x3C1\x3C2\x3\x2\x2\x2\x3C2\x3C0\x3\x2\x2\x2\x3C2\x3C3\x3\x2\x2\x2\x3C3"+
		"\x3C5\x3\x2\x2\x2\x3C4\x3C6\x5\x92J\x2\x3C5\x3C4\x3\x2\x2\x2\x3C5\x3C6"+
		"\x3\x2\x2\x2\x3C6\x3C7\x3\x2\x2\x2\x3C7\x3C8\a\x10\x2\x2\x3C8\x8D\x3\x2"+
		"\x2\x2\x3C9\x3CA\a\x35\x2\x2\x3CA\x3CB\x5\x10C\x87\x2\x3CB\x3CC\a/\x2"+
		"\x2\x3CC\x3CD\x5\x94K\x2\x3CD\x8F\x3\x2\x2\x2\x3CE\x3CF\a\x35\x2\x2\x3CF"+
		"\x3D0\x5\x10C\x87\x2\x3D0\x3D1\a/\x2\x2\x3D1\x3D2\x5\x94K\x2\x3D2\x91"+
		"\x3\x2\x2\x2\x3D3\x3D4\a\x11\x2\x2\x3D4\x3D5\x5\x94K\x2\x3D5\x93\x3\x2"+
		"\x2\x2\x3D6\x3D9\x5\x9CO\x2\x3D7\x3D9\a%\x2\x2\x3D8\x3D6\x3\x2\x2\x2\x3D8"+
		"\x3D7\x3\x2\x2\x2\x3D9\x95\x3\x2\x2\x2\x3DA\x3DB\a\v\x2\x2\x3DB\x3DC\a"+
		"\xBA\x2\x2\x3DC\x3DD\x5\x98M\x2\x3DD\x3DE\a\x3\x2\x2\x3DE\x3DF\x5\x9A"+
		"N\x2\x3DF\x3E0\a\xBB\x2\x2\x3E0\x97\x3\x2\x2\x2\x3E1\x3E2\x5\x9CO\x2\x3E2"+
		"\x99\x3\x2\x2\x2\x3E3\x3E4\x5N(\x2\x3E4\x9B\x3\x2\x2\x2\x3E5\x3E9\x5\x9E"+
		"P\x2\x3E6\x3E9\x5\xDAn\x2\x3E7\x3E9\x5\xC6\x64\x2\x3E8\x3E5\x3\x2\x2\x2"+
		"\x3E8\x3E6\x3\x2\x2\x2\x3E8\x3E7\x3\x2\x2\x2\x3E9\x9D\x3\x2\x2\x2\x3EA"+
		"\x3EE\x5\xA0Q\x2\x3EB\x3EE\x5\xB6\\\x2\x3EC\x3EE\a%\x2\x2\x3ED\x3EA\x3"+
		"\x2\x2\x2\x3ED\x3EB\x3\x2\x2\x2\x3ED\x3EC\x3\x2\x2\x2\x3EE\x9F\x3\x2\x2"+
		"\x2\x3EF\x3F4\x5\xA2R\x2\x3F0\x3F1\t\a\x2\x2\x3F1\x3F3\x5\xA2R\x2\x3F2"+
		"\x3F0\x3\x2\x2\x2\x3F3\x3F6\x3\x2\x2\x2\x3F4\x3F2\x3\x2\x2\x2\x3F4\x3F5"+
		"\x3\x2\x2\x2\x3F5\xA1\x3\x2\x2\x2\x3F6\x3F4\x3\x2\x2\x2\x3F7\x3FC\x5\xA4"+
		"S\x2\x3F8\x3F9\t\b\x2\x2\x3F9\x3FB\x5\xA4S\x2\x3FA\x3F8\x3\x2\x2\x2\x3FB"+
		"\x3FE\x3\x2\x2\x2\x3FC\x3FA\x3\x2\x2\x2\x3FC\x3FD\x3\x2\x2\x2\x3FD\xA3"+
		"\x3\x2\x2\x2\x3FE\x3FC\x3\x2\x2\x2\x3FF\x401\x5\xAAV\x2\x400\x3FF\x3\x2"+
		"\x2\x2\x400\x401\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x403\x5\xA8U\x2"+
		"\x403\xA5\x3\x2\x2\x2\x404\x405\a\xBA\x2\x2\x405\x40A\x5\xA0Q\x2\x406"+
		"\x407\a\xB3\x2\x2\x407\x409\x5\xA0Q\x2\x408\x406\x3\x2\x2\x2\x409\x40C"+
		"\x3\x2\x2\x2\x40A\x408\x3\x2\x2\x2\x40A\x40B\x3\x2\x2\x2\x40B\x40D\x3"+
		"\x2\x2\x2\x40C\x40A\x3\x2\x2\x2\x40D\x40E\a\xBB\x2\x2\x40E\xA7\x3\x2\x2"+
		"\x2\x40F\x414\x5l\x37\x2\x410\x411\a\xAE\x2\x2\x411\x413\x5\x9AN\x2\x412"+
		"\x410\x3\x2\x2\x2\x413\x416\x3\x2\x2\x2\x414\x412\x3\x2\x2\x2\x414\x415"+
		"\x3\x2\x2\x2\x415\x419\x3\x2\x2\x2\x416\x414\x3\x2\x2\x2\x417\x419\x5"+
		"\xACW\x2\x418\x40F\x3\x2\x2\x2\x418\x417\x3\x2\x2\x2\x419\xA9\x3\x2\x2"+
		"\x2\x41A\x41B\t\a\x2\x2\x41B\xAB\x3\x2\x2\x2\x41C\x41D\x5\xAEX\x2\x41D"+
		"\xAD\x3\x2\x2\x2\x41E\x41F\aL\x2\x2\x41F\x420\a\xBA\x2\x2\x420\x421\x5"+
		"\xB0Y\x2\x421\x422\a\x15\x2\x2\x422\x423\x5\xB4[\x2\x423\x424\a\xBB\x2"+
		"\x2\x424\xAF\x3\x2\x2\x2\x425\x429\x5\x178\xBD\x2\x426\x429\x5\xB2Z\x2"+
		"\x427\x429\x5\x17C\xBF\x2\x428\x425\x3\x2\x2\x2\x428\x426\x3\x2\x2\x2"+
		"\x428\x427\x3\x2\x2\x2\x429\xB1\x3\x2\x2\x2\x42A\x42B\t\t\x2\x2\x42B\xB3"+
		"\x3\x2\x2\x2\x42C\x42F\x5\x144\xA3\x2\x42D\x42F\x5\x44#\x2\x42E\x42C\x3"+
		"\x2\x2\x2\x42E\x42D\x3\x2\x2\x2\x42F\xB5\x3\x2\x2\x2\x430\x431\x5\xB8"+
		"]\x2\x431\xB7\x3\x2\x2\x2\x432\x437\x5\xBA^\x2\x433\x434\a\xB4\x2\x2\x434"+
		"\x436\x5\xBA^\x2\x435\x433\x3\x2\x2\x2\x436\x439\x3\x2\x2\x2\x437\x435"+
		"\x3\x2\x2\x2\x437\x438\x3\x2\x2\x2\x438\xB9\x3\x2\x2\x2\x439\x437\x3\x2"+
		"\x2\x2\x43A\x43B\x5\xBC_\x2\x43B\xBB\x3\x2\x2\x2\x43C\x43F\x5l\x37\x2"+
		"\x43D\x43F\x5\xBE`\x2\x43E\x43C\x3\x2\x2\x2\x43E\x43D\x3\x2\x2\x2\x43F"+
		"\xBD\x3\x2\x2\x2\x440\x441\x5\xC0\x61\x2\x441\xBF\x3\x2\x2\x2\x442\x443"+
		"\a}\x2\x2\x443\x444\a\xBA\x2\x2\x444\x445\x5\xC2\x62\x2\x445\x446\a\xBB"+
		"\x2\x2\x446\xC1\x3\x2\x2\x2\x447\x449\x5\xC4\x63\x2\x448\x447\x3\x2\x2"+
		"\x2\x448\x449\x3\x2\x2\x2\x449\x44B\x3\x2\x2\x2\x44A\x44C\x5\xB8]\x2\x44B"+
		"\x44A\x3\x2\x2\x2\x44B\x44C\x3\x2\x2\x2\x44C\x44D\x3\x2\x2\x2\x44D\x44F"+
		"\a\x15\x2\x2\x44E\x448\x3\x2\x2\x2\x44E\x44F\x3\x2\x2\x2\x44F\x450\x3"+
		"\x2\x2\x2\x450\x456\x5\xB8]\x2\x451\x452\x5\xB8]\x2\x452\x453\a\xB3\x2"+
		"\x2\x453\x454\x5\xB8]\x2\x454\x456\x3\x2\x2\x2\x455\x44E\x3\x2\x2\x2\x455"+
		"\x451\x3\x2\x2\x2\x456\xC3\x3\x2\x2\x2\x457\x458\t\n\x2\x2\x458\xC5\x3"+
		"\x2\x2\x2\x459\x45A\x5\xC8\x65\x2\x45A\xC7\x3\x2\x2\x2\x45B\x460\x5\xCA"+
		"\x66\x2\x45C\x45D\a(\x2\x2\x45D\x45F\x5\xC8\x65\x2\x45E\x45C\x3\x2\x2"+
		"\x2\x45F\x462\x3\x2\x2\x2\x460\x45E\x3\x2\x2\x2\x460\x461\x3\x2\x2\x2"+
		"\x461\xC9\x3\x2\x2\x2\x462\x460\x3\x2\x2\x2\x463\x468\x5\xCCg\x2\x464"+
		"\x465\a\x5\x2\x2\x465\x467\x5\xCA\x66\x2\x466\x464\x3\x2\x2\x2\x467\x46A"+
		"\x3\x2\x2\x2\x468\x466\x3\x2\x2\x2\x468\x469\x3\x2\x2\x2\x469\xCB\x3\x2"+
		"\x2\x2\x46A\x468\x3\x2\x2\x2\x46B\x46F\x5\xCEh\x2\x46C\x46D\a$\x2\x2\x46D"+
		"\x46F\x5\xCEh\x2\x46E\x46B\x3\x2\x2\x2\x46E\x46C\x3\x2\x2\x2\x46F\xCD"+
		"\x3\x2\x2\x2\x470\x472\x5\xD4k\x2\x471\x473\x5\xD0i\x2\x472\x471\x3\x2"+
		"\x2\x2\x472\x473\x3\x2\x2\x2\x473\xCF\x3\x2\x2\x2\x474\x476\a\x1D\x2\x2"+
		"\x475\x477\a$\x2\x2\x476\x475\x3\x2\x2\x2\x476\x477\x3\x2\x2\x2\x477\x478"+
		"\x3\x2\x2\x2\x478\x479\x5\xD2j\x2\x479\xD1\x3\x2\x2\x2\x47A\x47B\t\x3"+
		"\x2\x2\x47B\xD3\x3\x2\x2\x2\x47C\x47F\x5\x152\xAA\x2\x47D\x47F\x5\xD6"+
		"l\x2\x47E\x47C\x3\x2\x2\x2\x47E\x47D\x3\x2\x2\x2\x47F\xD5\x3\x2\x2\x2"+
		"\x480\x483\x5\xD8m\x2\x481\x483\x5p\x39\x2\x482\x480\x3\x2\x2\x2\x482"+
		"\x481\x3\x2\x2\x2\x483\xD7\x3\x2\x2\x2\x484\x485\a\xBA\x2\x2\x485\x486"+
		"\x5\xC6\x64\x2\x486\x487\a\xBB\x2\x2\x487\xD9\x3\x2\x2\x2\x488\x48B\x5"+
		"\xDCo\x2\x489\x48B\x5\xDEp\x2\x48A\x488\x3\x2\x2\x2\x48A\x489\x3\x2\x2"+
		"\x2\x48B\xDB\x3\x2\x2\x2\x48C\x48D\x5p\x39\x2\x48D\xDD\x3\x2\x2\x2\x48E"+
		"\x48F\a%\x2\x2\x48F\xDF\x3\x2\x2\x2\x490\x493\x5\xDCo\x2\x491\x493\x5"+
		"\xE2r\x2\x492\x490\x3\x2\x2\x2\x492\x491\x3\x2\x2\x2\x493\xE1\x3\x2\x2"+
		"\x2\x494\x497\x5\x9EP\x2\x495\x497\x5\xD6l\x2\x496\x494\x3\x2\x2\x2\x496"+
		"\x495\x3\x2\x2\x2\x497\xE3\x3\x2\x2\x2\x498\x49A\x5\xE6t\x2\x499\x49B"+
		"\x5\x10A\x86\x2\x49A\x499\x3\x2\x2\x2\x49A\x49B\x3\x2\x2\x2\x49B\x49D"+
		"\x3\x2\x2\x2\x49C\x49E\x5\x10E\x88\x2\x49D\x49C\x3\x2\x2\x2\x49D\x49E"+
		"\x3\x2\x2\x2\x49E\x4A0\x3\x2\x2\x2\x49F\x4A1\x5\x11E\x90\x2\x4A0\x49F"+
		"\x3\x2\x2\x2\x4A0\x4A1\x3\x2\x2\x2\x4A1\x4A3\x3\x2\x2\x2\x4A2\x4A4\x5"+
		"\x186\xC4\x2\x4A3\x4A2\x3\x2\x2\x2\x4A3\x4A4\x3\x2\x2\x2\x4A4\x4A6\x3"+
		"\x2\x2\x2\x4A5\x4A7\x5\x18E\xC8\x2\x4A6\x4A5\x3\x2\x2\x2\x4A6\x4A7\x3"+
		"\x2\x2\x2\x4A7\xE5\x3\x2\x2\x2\x4A8\x4A9\a\x15\x2\x2\x4A9\x4AA\x5\xE8"+
		"u\x2\x4AA\xE7\x3\x2\x2\x2\x4AB\x4B0\x5\xEAv\x2\x4AC\x4AD\a\xB3\x2\x2\x4AD"+
		"\x4AF\x5\xEAv\x2\x4AE\x4AC\x3\x2\x2\x2\x4AF\x4B2\x3\x2\x2\x2\x4B0\x4AE"+
		"\x3\x2\x2\x2\x4B0\x4B1\x3\x2\x2\x2\x4B1\xE9\x3\x2\x2\x2\x4B2\x4B0\x3\x2"+
		"\x2\x2\x4B3\x4B6\x5\xECw\x2\x4B4\x4B6\x5\x104\x83\x2\x4B5\x4B3\x3\x2\x2"+
		"\x2\x4B5\x4B4\x3\x2\x2\x2\x4B6\xEB\x3\x2\x2\x2\x4B7\x4B9\x5\x104\x83\x2"+
		"\x4B8\x4BA\x5\xEEx\x2\x4B9\x4B8\x3\x2\x2\x2\x4BA\x4BB\x3\x2\x2\x2\x4BB"+
		"\x4B9\x3\x2\x2\x2\x4BB\x4BC\x3\x2\x2\x2\x4BC\xED\x3\x2\x2\x2\x4BD\x4BE"+
		"\a\r\x2\x2\x4BE\x4BF\a\x1E\x2\x2\x4BF\x4D1\x5\x104\x83\x2\x4C0\x4C2\x5"+
		"\xF8}\x2\x4C1\x4C0\x3\x2\x2\x2\x4C1\x4C2\x3\x2\x2\x2\x4C2\x4C3\x3\x2\x2"+
		"\x2\x4C3\x4C4\a\x1E\x2\x2\x4C4\x4C5\x5\x104\x83\x2\x4C5\x4C6\x5\xFE\x80"+
		"\x2\x4C6\x4D1\x3\x2\x2\x2\x4C7\x4C9\a#\x2\x2\x4C8\x4CA\x5\xF8}\x2\x4C9"+
		"\x4C8\x3\x2\x2\x2\x4C9\x4CA\x3\x2\x2\x2\x4CA\x4CB\x3\x2\x2\x2\x4CB\x4CC"+
		"\a\x1E\x2\x2\x4CC\x4D1\x5\x104\x83\x2\x4CD\x4CE\a\x32\x2\x2\x4CE\x4CF"+
		"\a\x1E\x2\x2\x4CF\x4D1\x5\x104\x83\x2\x4D0\x4BD\x3\x2\x2\x2\x4D0\x4C1"+
		"\x3\x2\x2\x2\x4D0\x4C7\x3\x2\x2\x2\x4D0\x4CD\x3\x2\x2\x2\x4D1\xEF\x3\x2"+
		"\x2\x2\x4D2\x4D3\a\r\x2\x2\x4D3\x4D4\a\x1E\x2\x2\x4D4\x4D5\x5\x104\x83"+
		"\x2\x4D5\xF1\x3\x2\x2\x2\x4D6\x4D8\x5\xF8}\x2\x4D7\x4D6\x3\x2\x2\x2\x4D7"+
		"\x4D8\x3\x2\x2\x2\x4D8\x4D9\x3\x2\x2\x2\x4D9\x4DA\a\x1E\x2\x2\x4DA\x4DB"+
		"\x5\x104\x83\x2\x4DB\x4DC\x5\xFE\x80\x2\x4DC\xF3\x3\x2\x2\x2\x4DD\x4DF"+
		"\a#\x2\x2\x4DE\x4E0\x5\xF8}\x2\x4DF\x4DE\x3\x2\x2\x2\x4DF\x4E0\x3\x2\x2"+
		"\x2\x4E0\x4E1\x3\x2\x2\x2\x4E1\x4E2\a\x1E\x2\x2\x4E2\x4E3\x5\x104\x83"+
		"\x2\x4E3\xF5\x3\x2\x2\x2\x4E4\x4E5\a\x32\x2\x2\x4E5\x4E6\a\x1E\x2\x2\x4E6"+
		"\x4E7\x5\x104\x83\x2\x4E7\xF7\x3\x2\x2\x2\x4E8\x4EB\a\x1A\x2\x2\x4E9\x4EB"+
		"\x5\xFA~\x2\x4EA\x4E8\x3\x2\x2\x2\x4EA\x4E9\x3\x2\x2\x2\x4EB\xF9\x3\x2"+
		"\x2\x2\x4EC\x4EE\x5\xFC\x7F\x2\x4ED\x4EF\a\'\x2\x2\x4EE\x4ED\x3\x2\x2"+
		"\x2\x4EE\x4EF\x3\x2\x2\x2\x4EF\xFB\x3\x2\x2\x2\x4F0\x4F1\t\v\x2\x2\x4F1"+
		"\xFD\x3\x2\x2\x2\x4F2\x4F5\x5\x100\x81\x2\x4F3\x4F5\x5\x102\x82\x2\x4F4"+
		"\x4F2\x3\x2\x2\x2\x4F4\x4F3\x3\x2\x2\x2\x4F5\xFF\x3\x2\x2\x2\x4F6\x4F7"+
		"\a&\x2\x2\x4F7\x4F8\x5\x10C\x87\x2\x4F8\x101\x3\x2\x2\x2\x4F9\x4FA\a\x34"+
		"\x2\x2\x4FA\x4FB\a\xBA\x2\x2\x4FB\x4FC\x5\x148\xA5\x2\x4FC\x4FD\a\xBB"+
		"\x2\x2\x4FD\x103\x3\x2\x2\x2\x4FE\x503\x5\x134\x9B\x2\x4FF\x501\a\x3\x2"+
		"\x2\x500\x4FF\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501\x502\x3\x2\x2\x2"+
		"\x502\x504\x5<\x1F\x2\x503\x500\x3\x2\x2\x2\x503\x504\x3\x2\x2\x2\x504"+
		"\x509\x3\x2\x2\x2\x505\x506\a\xBA\x2\x2\x506\x507\x5\x106\x84\x2\x507"+
		"\x508\a\xBB\x2\x2\x508\x50A\x3\x2\x2\x2\x509\x505\x3\x2\x2\x2\x509\x50A"+
		"\x3\x2\x2\x2\x50A\x517\x3\x2\x2\x2\x50B\x50D\x5\x108\x85\x2\x50C\x50E"+
		"\a\x3\x2\x2\x50D\x50C\x3\x2\x2\x2\x50D\x50E\x3\x2\x2\x2\x50E\x50F\x3\x2"+
		"\x2\x2\x50F\x514\x5<\x1F\x2\x510\x511\a\xBA\x2\x2\x511\x512\x5\x106\x84"+
		"\x2\x512\x513\a\xBB\x2\x2\x513\x515\x3\x2\x2\x2\x514\x510\x3\x2\x2\x2"+
		"\x514\x515\x3\x2\x2\x2\x515\x517\x3\x2\x2\x2\x516\x4FE\x3\x2\x2\x2\x516"+
		"\x50B\x3\x2\x2\x2\x517\x105\x3\x2\x2\x2\x518\x51D\x5<\x1F\x2\x519\x51A"+
		"\a\xB3\x2\x2\x51A\x51C\x5<\x1F\x2\x51B\x519\x3\x2\x2\x2\x51C\x51F\x3\x2"+
		"\x2\x2\x51D\x51B\x3\x2\x2\x2\x51D\x51E\x3\x2\x2\x2\x51E\x107\x3\x2\x2"+
		"\x2\x51F\x51D\x3\x2\x2\x2\x520\x521\x5\x14E\xA8\x2\x521\x109\x3\x2\x2"+
		"\x2\x522\x523\a\x36\x2\x2\x523\x524\x5\x10C\x87\x2\x524\x10B\x3\x2\x2"+
		"\x2\x525\x526\x5\x9CO\x2\x526\x10D\x3\x2\x2\x2\x527\x528\a\x16\x2\x2\x528"+
		"\x529\a:\x2\x2\x529\x52A\x5\x110\x89\x2\x52A\x10F\x3\x2\x2\x2\x52B\x530"+
		"\x5\x112\x8A\x2\x52C\x52D\a\xB3\x2\x2\x52D\x52F\x5\x112\x8A\x2\x52E\x52C"+
		"\x3\x2\x2\x2\x52F\x532\x3\x2\x2\x2\x530\x52E\x3\x2\x2\x2\x530\x531\x3"+
		"\x2\x2\x2\x531\x111\x3\x2\x2\x2\x532\x530\x3\x2\x2\x2\x533\x538\x5\x118"+
		"\x8D\x2\x534\x538\x5\x11A\x8E\x2\x535\x538\x5\x11C\x8F\x2\x536\x538\x5"+
		"\x114\x8B\x2\x537\x533\x3\x2\x2\x2\x537\x534\x3\x2\x2\x2\x537\x535\x3"+
		"\x2\x2\x2\x537\x536\x3\x2\x2\x2\x538\x113\x3\x2\x2\x2\x539\x53F\x5\xE0"+
		"q\x2\x53A\x53B\a\xBA\x2\x2\x53B\x53C\x5\x120\x91\x2\x53C\x53D\a\xBB\x2"+
		"\x2\x53D\x53F\x3\x2\x2\x2\x53E\x539\x3\x2\x2\x2\x53E\x53A\x3\x2\x2\x2"+
		"\x53F\x115\x3\x2\x2\x2\x540\x545\x5\x114\x8B\x2\x541\x542\a\xB3\x2\x2"+
		"\x542\x544\x5\x114\x8B\x2\x543\x541\x3\x2\x2\x2\x544\x547\x3\x2\x2\x2"+
		"\x545\x543\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546\x117\x3\x2\x2\x2\x547"+
		"\x545\x3\x2\x2\x2\x548\x549\ap\x2\x2\x549\x54A\a\xBA\x2\x2\x54A\x54B\x5"+
		"\x116\x8C\x2\x54B\x54C\a\xBB\x2\x2\x54C\x119\x3\x2\x2\x2\x54D\x54E\a\x41"+
		"\x2\x2\x54E\x54F\a\xBA\x2\x2\x54F\x550\x5\x116\x8C\x2\x550\x551\a\xBB"+
		"\x2\x2\x551\x11B\x3\x2\x2\x2\x552\x553\a\xBA\x2\x2\x553\x554\a\xBB\x2"+
		"\x2\x554\x11D\x3\x2\x2\x2\x555\x556\a\x17\x2\x2\x556\x557\x5\xC6\x64\x2"+
		"\x557\x11F\x3\x2\x2\x2\x558\x55D\x5\xE0q\x2\x559\x55A\a\xB3\x2\x2\x55A"+
		"\x55C\x5\xE0q\x2\x55B\x559\x3\x2\x2\x2\x55C\x55F\x3\x2\x2\x2\x55D\x55B"+
		"\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x121\x3\x2\x2\x2\x55F\x55D\x3"+
		"\x2\x2\x2\x560\x561\x5\x124\x93\x2\x561\x123\x3\x2\x2\x2\x562\x565\x5"+
		"\x126\x94\x2\x563\x565\x5\xECw\x2\x564\x562\x3\x2\x2\x2\x564\x563\x3\x2"+
		"\x2\x2\x565\x125\x3\x2\x2\x2\x566\x56F\x5\x12A\x96\x2\x567\x568\x5\xEC"+
		"w\x2\x568\x56A\t\f\x2\x2\x569\x56B\t\r\x2\x2\x56A\x569\x3\x2\x2\x2\x56A"+
		"\x56B\x3\x2\x2\x2\x56B\x56C\x3\x2\x2\x2\x56C\x56D\x5\x128\x95\x2\x56D"+
		"\x56F\x3\x2\x2\x2\x56E\x566\x3\x2\x2\x2\x56E\x567\x3\x2\x2\x2\x56F\x577"+
		"\x3\x2\x2\x2\x570\x572\t\f\x2\x2\x571\x573\t\r\x2\x2\x572\x571\x3\x2\x2"+
		"\x2\x572\x573\x3\x2\x2\x2\x573\x574\x3\x2\x2\x2\x574\x576\x5\x128\x95"+
		"\x2\x575\x570\x3\x2\x2\x2\x576\x579\x3\x2\x2\x2\x577\x575\x3\x2\x2\x2"+
		"\x577\x578\x3\x2\x2\x2\x578\x127\x3\x2\x2\x2\x579\x577\x3\x2\x2\x2\x57A"+
		"\x57D\x5\x12A\x96\x2\x57B\x57D\x5\xECw\x2\x57C\x57A\x3\x2\x2\x2\x57C\x57B"+
		"\x3\x2\x2\x2\x57D\x129\x3\x2\x2\x2\x57E\x587\x5\x12E\x98\x2\x57F\x580"+
		"\x5\xECw\x2\x580\x582\a\x1B\x2\x2\x581\x583\t\r\x2\x2\x582\x581\x3\x2"+
		"\x2\x2\x582\x583\x3\x2\x2\x2\x583\x584\x3\x2\x2\x2\x584\x585\x5\x12C\x97"+
		"\x2\x585\x587\x3\x2\x2\x2\x586\x57E\x3\x2\x2\x2\x586\x57F\x3\x2\x2\x2"+
		"\x587\x58F\x3\x2\x2\x2\x588\x58A\a\x1B\x2\x2\x589\x58B\t\r\x2\x2\x58A"+
		"\x589\x3\x2\x2\x2\x58A\x58B\x3\x2\x2\x2\x58B\x58C\x3\x2\x2\x2\x58C\x58E"+
		"\x5\x12C\x97\x2\x58D\x588\x3\x2\x2\x2\x58E\x591\x3\x2\x2\x2\x58F\x58D"+
		"\x3\x2\x2\x2\x58F\x590\x3\x2\x2\x2\x590\x12B\x3\x2\x2\x2\x591\x58F\x3"+
		"\x2\x2\x2\x592\x595\x5\x12E\x98\x2\x593\x595\x5\xECw\x2\x594\x592\x3\x2"+
		"\x2\x2\x594\x593\x3\x2\x2\x2\x595\x12D\x3\x2\x2\x2\x596\x59C\x5\x130\x99"+
		"\x2\x597\x598\a\xBA\x2\x2\x598\x599\x5\x126\x94\x2\x599\x59A\a\xBB\x2"+
		"\x2\x59A\x59C\x3\x2\x2\x2\x59B\x596\x3\x2\x2\x2\x59B\x597\x3\x2\x2\x2"+
		"\x59C\x12F\x3\x2\x2\x2\x59D\x5A0\x5\x138\x9D\x2\x59E\x5A0\x5\x132\x9A"+
		"\x2\x59F\x59D\x3\x2\x2\x2\x59F\x59E\x3\x2\x2\x2\x5A0\x131\x3\x2\x2\x2"+
		"\x5A1\x5A2\a.\x2\x2\x5A2\x5A3\x5\x134\x9B\x2\x5A3\x133\x3\x2\x2\x2\x5A4"+
		"\x5A7\x5\x136\x9C\x2\x5A5\x5A7\x5<\x1F\x2\x5A6\x5A4\x3\x2\x2\x2\x5A6\x5A5"+
		"\x3\x2\x2\x2\x5A7\x135\x3\x2\x2\x2\x5A8\x5AF\x5<\x1F\x2\x5A9\x5AA\a\xC1"+
		"\x2\x2\x5AA\x5AD\x5<\x1F\x2\x5AB\x5AC\a\xC1\x2\x2\x5AC\x5AE\x5<\x1F\x2"+
		"\x5AD\x5AB\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2\x5AE\x5B0\x3\x2\x2\x2\x5AF"+
		"\x5A9\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0\x137\x3\x2\x2\x2\x5B1\x5B3"+
		"\a+\x2\x2\x5B2\x5B4\x5\x142\xA2\x2\x5B3\x5B2\x3\x2\x2\x2\x5B3\x5B4\x3"+
		"\x2\x2\x2\x5B4\x5B5\x3\x2\x2\x2\x5B5\x5B7\x5\x13A\x9E\x2\x5B6\x5B8\x5"+
		"\xE4s\x2\x5B7\x5B6\x3\x2\x2\x2\x5B7\x5B8\x3\x2\x2\x2\x5B8\x139\x3\x2\x2"+
		"\x2\x5B9\x5BE\x5\x13C\x9F\x2\x5BA\x5BB\a\xB3\x2\x2\x5BB\x5BD\x5\x13C\x9F"+
		"\x2\x5BC\x5BA\x3\x2\x2\x2\x5BD\x5C0\x3\x2\x2\x2\x5BE\x5BC\x3\x2\x2\x2"+
		"\x5BE\x5BF\x3\x2\x2\x2\x5BF\x13B\x3\x2\x2\x2\x5C0\x5BE\x3\x2\x2\x2\x5C1"+
		"\x5C4\x5\x13E\xA0\x2\x5C2\x5C4\x5\x140\xA1\x2\x5C3\x5C1\x3\x2\x2\x2\x5C3"+
		"\x5C2\x3\x2\x2\x2\x5C4\x13D\x3\x2\x2\x2\x5C5\x5C7\x5\x9CO\x2\x5C6\x5C8"+
		"\x5\x146\xA4\x2\x5C7\x5C6\x3\x2\x2\x2\x5C7\x5C8\x3\x2\x2\x2\x5C8\x13F"+
		"\x3\x2\x2\x2\x5C9\x5CA\a\xCA\x2\x2\x5CA\x5CC\a\xC1\x2\x2\x5CB\x5C9\x3"+
		"\x2\x2\x2\x5CB\x5CC\x3\x2\x2\x2\x5CC\x5CD\x3\x2\x2\x2\x5CD\x5CE\a\xBE"+
		"\x2\x2\x5CE\x141\x3\x2\x2\x2\x5CF\x5D0\t\r\x2\x2\x5D0\x143\x3\x2\x2\x2"+
		"\x5D1\x5D2\x5<\x1F\x2\x5D2\x5D3\a\xC1\x2\x2\x5D3\x5D5\x3\x2\x2\x2\x5D4"+
		"\x5D1\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2\x2\x5D5\x5D6\x3\x2\x2\x2\x5D6\x5D7"+
		"\x5<\x1F\x2\x5D7\x145\x3\x2\x2\x2\x5D8\x5DA\a\x3\x2\x2\x5D9\x5D8\x3\x2"+
		"\x2\x2\x5D9\x5DA\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5DC\x5<\x1F\x2"+
		"\x5DC\x147\x3\x2\x2\x2\x5DD\x5E2\x5\x144\xA3\x2\x5DE\x5DF\a\xB3\x2\x2"+
		"\x5DF\x5E1\x5\x144\xA3\x2\x5E0\x5DE\x3\x2\x2\x2\x5E1\x5E4\x3\x2\x2\x2"+
		"\x5E2\x5E0\x3\x2\x2\x2\x5E2\x5E3\x3\x2\x2\x2\x5E3\x149\x3\x2\x2\x2\x5E4"+
		"\x5E2\x3\x2\x2\x2\x5E5\x5E6\x5\x150\xA9\x2\x5E6\x14B\x3\x2\x2\x2\x5E7"+
		"\x5E8\x5\x150\xA9\x2\x5E8\x14D\x3\x2\x2\x2\x5E9\x5EA\x5\x150\xA9\x2\x5EA"+
		"\x14F\x3\x2\x2\x2\x5EB\x5EC\a\xBA\x2\x2\x5EC\x5ED\x5\x122\x92\x2\x5ED"+
		"\x5EE\a\xBB\x2\x2\x5EE\x151\x3\x2\x2\x2\x5EF\x5F6\x5\x154\xAB\x2\x5F0"+
		"\x5F6\x5\x158\xAD\x2\x5F1\x5F6\x5\x15C\xAF\x2\x5F2\x5F6\x5\x162\xB2\x2"+
		"\x5F3\x5F6\x5\x16A\xB6\x2\x5F4\x5F6\x5\x174\xBB\x2\x5F5\x5EF\x3\x2\x2"+
		"\x2\x5F5\x5F0\x3\x2\x2\x2\x5F5\x5F1\x3\x2\x2\x2\x5F5\x5F2\x3\x2\x2\x2"+
		"\x5F5\x5F3\x3\x2\x2\x2\x5F5\x5F4\x3\x2\x2\x2\x5F6\x153\x3\x2\x2\x2\x5F7"+
		"\x5F8\x5\xE0q\x2\x5F8\x5F9\x5\x156\xAC\x2\x5F9\x5FA\x5\xE0q\x2\x5FA\x155"+
		"\x3\x2\x2\x2\x5FB\x5FC\t\xE\x2\x2\x5FC\x157\x3\x2\x2\x2\x5FD\x5FE\x5\xE0"+
		"q\x2\x5FE\x5FF\x5\x15A\xAE\x2\x5FF\x159\x3\x2\x2\x2\x600\x602\a$\x2\x2"+
		"\x601\x600\x3\x2\x2\x2\x601\x602\x3\x2\x2\x2\x602\x603\x3\x2\x2\x2\x603"+
		"\x605\a\x39\x2\x2\x604\x606\t\xF\x2\x2\x605\x604\x3\x2\x2\x2\x605\x606"+
		"\x3\x2\x2\x2\x606\x607\x3\x2\x2\x2\x607\x608\x5\xE0q\x2\x608\x609\a\x5"+
		"\x2\x2\x609\x60A\x5\xE0q\x2\x60A\x15B\x3\x2\x2\x2\x60B\x60D\x5\xA0Q\x2"+
		"\x60C\x60E\a$\x2\x2\x60D\x60C\x3\x2\x2\x2\x60D\x60E\x3\x2\x2\x2\x60E\x60F"+
		"\x3\x2\x2\x2\x60F\x610\a\x19\x2\x2\x610\x611\x5\x15E\xB0\x2\x611\x15D"+
		"\x3\x2\x2\x2\x612\x618\x5\x14E\xA8\x2\x613\x614\a\xBA\x2\x2\x614\x615"+
		"\x5\x160\xB1\x2\x615\x616\a\xBB\x2\x2\x616\x618\x3\x2\x2\x2\x617\x612"+
		"\x3\x2\x2\x2\x617\x613\x3\x2\x2\x2\x618\x15F\x3\x2\x2\x2\x619\x61E\x5"+
		"\xDAn\x2\x61A\x61B\a\xB3\x2\x2\x61B\x61D\x5\xDAn\x2\x61C\x61A\x3\x2\x2"+
		"\x2\x61D\x620\x3\x2\x2\x2\x61E\x61C\x3\x2\x2\x2\x61E\x61F\x3\x2\x2\x2"+
		"\x61F\x161\x3\x2\x2\x2\x620\x61E\x3\x2\x2\x2\x621\x622\x5\xE0q\x2\x622"+
		"\x623\x5\x164\xB3\x2\x623\x624\a\xCB\x2\x2\x624\x163\x3\x2\x2\x2\x625"+
		"\x627\a$\x2\x2\x626\x625\x3\x2\x2\x2\x626\x627\x3\x2\x2\x2\x627\x628\x3"+
		"\x2\x2\x2\x628\x62B\x5\x166\xB4\x2\x629\x62B\x5\x168\xB5\x2\x62A\x626"+
		"\x3\x2\x2\x2\x62A\x629\x3\x2\x2\x2\x62B\x165\x3\x2\x2\x2\x62C\x633\a!"+
		"\x2\x2\x62D\x633\a\x18\x2\x2\x62E\x62F\as\x2\x2\x62F\x633\a~\x2\x2\x630"+
		"\x633\an\x2\x2\x631\x633\ao\x2\x2\x632\x62C\x3\x2\x2\x2\x632\x62D\x3\x2"+
		"\x2\x2\x632\x62E\x3\x2\x2\x2\x632\x630\x3\x2\x2\x2\x632\x631\x3\x2\x2"+
		"\x2\x633\x167\x3\x2\x2\x2\x634\x635\t\x10\x2\x2\x635\x169\x3\x2\x2\x2"+
		"\x636\x637\x5\xE0q\x2\x637\x639\a\x1D\x2\x2\x638\x63A\a$\x2\x2\x639\x638"+
		"\x3\x2\x2\x2\x639\x63A\x3\x2\x2\x2\x63A\x63B\x3\x2\x2\x2\x63B\x63C\a%"+
		"\x2\x2\x63C\x16B\x3\x2\x2\x2\x63D\x63E\x5\xA0Q\x2\x63E\x63F\x5\x156\xAC"+
		"\x2\x63F\x640\x5\x16E\xB8\x2\x640\x641\x5\x14E\xA8\x2\x641\x16D\x3\x2"+
		"\x2\x2\x642\x645\x5\x170\xB9\x2\x643\x645\x5\x172\xBA\x2\x644\x642\x3"+
		"\x2\x2\x2\x644\x643\x3\x2\x2\x2\x645\x16F\x3\x2\x2\x2\x646\x647\a\x4\x2"+
		"\x2\x647\x171\x3\x2\x2\x2\x648\x649\t\x11\x2\x2\x649\x173\x3\x2\x2\x2"+
		"\x64A\x64C\a$\x2\x2\x64B\x64A\x3\x2\x2\x2\x64B\x64C\x3\x2\x2\x2\x64C\x64D"+
		"\x3\x2\x2\x2\x64D\x64E\aJ\x2\x2\x64E\x64F\x5\x14E\xA8\x2\x64F\x175\x3"+
		"\x2\x2\x2\x650\x651\a\x33\x2\x2\x651\x652\x5\x14E\xA8\x2\x652\x177\x3"+
		"\x2\x2\x2\x653\x656\x5\x17A\xBE\x2\x654\x656\aq\x2\x2\x655\x653\x3\x2"+
		"\x2\x2\x655\x654\x3\x2\x2\x2\x656\x179\x3\x2\x2\x2\x657\x658\t\x12\x2"+
		"\x2\x658\x17B\x3\x2\x2\x2\x659\x65A\t\x13\x2\x2\x65A\x17D\x3\x2\x2\x2"+
		"\x65B\x65C\x5\x182\xC2\x2\x65C\x65E\a\xBA\x2\x2\x65D\x65F\x5\x184\xC3"+
		"\x2\x65E\x65D\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2\x65F\x660\x3\x2\x2\x2"+
		"\x660\x661\a\xBB\x2\x2\x661\x17F\x3\x2\x2\x2\x662\x663\t\x14\x2\x2\x663"+
		"\x181\x3\x2\x2\x2\x664\x667\x5<\x1F\x2\x665\x667\x5\x180\xC1\x2\x666\x664"+
		"\x3\x2\x2\x2\x666\x665\x3\x2\x2\x2\x667\x183\x3\x2\x2\x2\x668\x66D\x5"+
		"\x9CO\x2\x669\x66A\a\xB3\x2\x2\x66A\x66C\x5\x9CO\x2\x66B\x669\x3\x2\x2"+
		"\x2\x66C\x66F\x3\x2\x2\x2\x66D\x66B\x3\x2\x2\x2\x66D\x66E\x3\x2\x2\x2"+
		"\x66E\x185\x3\x2\x2\x2\x66F\x66D\x3\x2\x2\x2\x670\x671\a)\x2\x2\x671\x672"+
		"\a:\x2\x2\x672\x673\x5\x188\xC5\x2\x673\x187\x3\x2\x2\x2\x674\x679\x5"+
		"\x18A\xC6\x2\x675\x676\a\xB3\x2\x2\x676\x678\x5\x18A\xC6\x2\x677\x675"+
		"\x3\x2\x2\x2\x678\x67B\x3\x2\x2\x2\x679\x677\x3\x2\x2\x2\x679\x67A\x3"+
		"\x2\x2\x2\x67A\x189\x3\x2\x2\x2\x67B\x679\x3\x2\x2\x2\x67C\x67E\x5\xE0"+
		"q\x2\x67D\x67F\x5\x18C\xC7\x2\x67E\x67D\x3\x2\x2\x2\x67E\x67F\x3\x2\x2"+
		"\x2\x67F\x681\x3\x2\x2\x2\x680\x682\x5\x190\xC9\x2\x681\x680\x3\x2\x2"+
		"\x2\x681\x682\x3\x2\x2\x2\x682\x18B\x3\x2\x2\x2\x683\x684\t\x15\x2\x2"+
		"\x684\x18D\x3\x2\x2\x2\x685\x686\a\"\x2\x2\x686\x687\x5\xA0Q\x2\x687\x18F"+
		"\x3\x2\x2\x2\x688\x689\a%\x2\x2\x689\x68D\aN\x2\x2\x68A\x68B\a%\x2\x2"+
		"\x68B\x68D\aY\x2\x2\x68C\x688\x3\x2\x2\x2\x68C\x68A\x3\x2\x2\x2\x68D\x191"+
		"\x3\x2\x2\x2\x68E\x690\aU\x2\x2\x68F\x691\ag\x2\x2\x690\x68F\x3\x2\x2"+
		"\x2\x690\x691\x3\x2\x2\x2\x691\x692\x3\x2\x2\x2\x692\x693\a\x1C\x2\x2"+
		"\x693\x698\x5\x136\x9C\x2\x694\x695\a\xBA\x2\x2\x695\x696\x5\x106\x84"+
		"\x2\x696\x697\a\xBB\x2\x2\x697\x699\x3\x2\x2\x2\x698\x694\x3\x2\x2\x2"+
		"\x698\x699\x3\x2\x2\x2\x699\x69A\x3\x2\x2\x2\x69A\x69B\x5\x122\x92\x2"+
		"\x69B\x6AC\x3\x2\x2\x2\x69C\x69E\aU\x2\x2\x69D\x69F\ag\x2\x2\x69E\x69D"+
		"\x3\x2\x2\x2\x69E\x69F\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x6A1\a\x1C"+
		"\x2\x2\x6A1\x6A2\a\\\x2\x2\x6A2\x6A8\a\xCB\x2\x2\x6A3\x6A4\a\x34\x2\x2"+
		"\x6A4\x6A6\x5<\x1F\x2\x6A5\x6A7\x5\x16\f\x2\x6A6\x6A5\x3\x2\x2\x2\x6A6"+
		"\x6A7\x3\x2\x2\x2\x6A7\x6A9\x3\x2\x2\x2\x6A8\x6A3\x3\x2\x2\x2\x6A8\x6A9"+
		"\x3\x2\x2\x2\x6A9\x6AA\x3\x2\x2\x2\x6AA\x6AC\x5\x122\x92\x2\x6AB\x68E"+
		"\x3\x2\x2\x2\x6AB\x69C\x3\x2\x2\x2\x6AC\x193\x3\x2\x2\x2\xBC\x196\x19E"+
		"\x1A6\x1AA\x1B1\x1B7\x1C1\x1C4\x1CF\x1D2\x1D5\x1D9\x1E0\x1E3\x1E6\x1EB"+
		"\x1F3\x204\x219\x22A\x237\x23B\x23D\x24A\x251\x269\x270\x281\x285\x28B"+
		"\x290\x295\x2AD\x2B3\x2B7\x2BC\x2C1\x2C5\x2C8\x2D1\x2D6\x2DA\x2E0\x2E6"+
		"\x2EB\x2EF\x2F1\x2F5\x2F9\x2FB\x2FF\x303\x307\x30B\x316\x31A\x322\x32C"+
		"\x33D\x341\x345\x34A\x34C\x350\x355\x359\x35B\x35F\x36C\x373\x37F\x381"+
		"\x386\x3A8\x3AC\x3B0\x3B7\x3BA\x3C2\x3C5\x3D8\x3E8\x3ED\x3F4\x3FC\x400"+
		"\x40A\x414\x418\x428\x42E\x437\x43E\x448\x44B\x44E\x455\x460\x468\x46E"+
		"\x472\x476\x47E\x482\x48A\x492\x496\x49A\x49D\x4A0\x4A3\x4A6\x4B0\x4B5"+
		"\x4BB\x4C1\x4C9\x4D0\x4D7\x4DF\x4EA\x4EE\x4F4\x500\x503\x509\x50D\x514"+
		"\x516\x51D\x530\x537\x53E\x545\x55D\x564\x56A\x56E\x572\x577\x57C\x582"+
		"\x586\x58A\x58F\x594\x59B\x59F\x5A6\x5AD\x5AF\x5B3\x5B7\x5BE\x5C3\x5C7"+
		"\x5CB\x5D4\x5D9\x5E2\x5F5\x601\x605\x60D\x617\x61E\x626\x62A\x632\x639"+
		"\x644\x64B\x655\x65E\x666\x66D\x679\x67E\x681\x68C\x690\x698\x69E\x6A6"+
		"\x6A8\x6AB";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Mlo.Examples.Parsers
